import{u as i,o as a,c as l,F as d,D as u,l as F,n as h,k as s,t as p,e as m}from"./chunks/framework.cb9cb047.js";const g=JSON.parse('[{"src":"<h2>李仲谋</h2>\\r\\n<p>苦难是成长的催化剂</p>\\r\\n<p>\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;金溪民方仲永，世隶耕。仲永生五年，未尝识书具，忽啼求之。父异焉，\\r\\n\\r\\n借旁近与之，即书诗四句，并自为其名。其诗以养父母、收族为意，传一乡秀\\r\\n\\r\\n才观之。自是指物作诗立就，其文理皆有可观者。邑人奇之，稍稍宾客其父，\\r\\n\\r\\n或以钱币丐之。父利其然也，日扳仲永环谒于邑人，不使学。\\r\\n\\r\\n</p>\\r\\n<!-- <p>\\r\\n我叫XX, xx年毕业于XXX（211/985可以说，其他的不说学校即可），本科（本科及以上才说学历）；\\r\\n我在上一份工作中从事xxxx，独立负责多款混合app前端的开发，测试与发版，也负责开发各种前端H5项目；\\r\\n我熟悉的技术有:\\r\\n首先 ，我掌握了XXX， 曾应用在XXX项目中，开发了XX功能；客户反馈非常好，使得项目XXX，给公司来带了XXX收益；（用数据和案例说话）\\r\\n除此之外，XX框架我也非常熟悉，XXX项目都是用到了这个XXX框架\\r\\n\\r\\n</p> -->\\r\\n\\r\\n<p>\\r\\n　　余闻之也久。明道中，从先人还家，于舅家见之，十二三矣。令作诗，不\\r\\n\\r\\n能称前时之闻。又七年，还自扬州，复到舅家，问焉，曰：“泯然众人矣。”\\r\\n\\r\\n</p>\\r\\n<p>\\r\\n\\r\\n</p>\\r\\n","html":"<h2>李仲谋</h2>\\n<p>苦难是成长的催化剂</p>\\n<p>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;金溪民方仲永，世隶耕。仲永生五年，未尝识书具，忽啼求之。父异焉，\\n<p>借旁近与之，即书诗四句，并自为其名。其诗以养父母、收族为意，传一乡秀</p>\\n<p>才观之。自是指物作诗立就，其文理皆有可观者。邑人奇之，稍稍宾客其父，</p>\\n<p>或以钱币丐之。父利其然也，日扳仲永环谒于邑人，不使学。</p>\\n</p>\\n<!-- <p>\\n我叫XX, xx年毕业于XXX（211/985可以说，其他的不说学校即可），本科（本科及以上才说学历）；\\n我在上一份工作中从事xxxx，独立负责多款混合app前端的开发，测试与发版，也负责开发各种前端H5项目；\\n我熟悉的技术有:\\n首先 ，我掌握了XXX， 曾应用在XXX项目中，开发了XX功能；客户反馈非常好，使得项目XXX，给公司来带了XXX收益；（用数据和案例说话）\\n除此之外，XX框架我也非常熟悉，XXX项目都是用到了这个XXX框架\\n</p> -->\\n<p>\\n　　余闻之也久。明道中，从先人还家，于舅家见之，十二三矣。令作诗，不\\n<p>能称前时之闻。又七年，还自扬州，复到舅家，问焉，曰：“泯然众人矣。”</p>\\n</p>\\n<p>\\n</p>\\n","frontmatter":{},"excerpt":"","url":"/about.html"},{"src":"---\\r\\ntitle: esbuild基本使用\\r\\nauthor: power\\r\\ndescription: \'版本（\\"^0.19.4\\"）\'\\r\\ndate: 2023-10-17 15:14:33\\r\\nlink: ./engineering/Esbuild.md\\r\\ntags:\\r\\n  - 工程\\r\\n---\\r\\n\\r\\n# {{ $frontmatter.title }}\\r\\n\\r\\n{{ $frontmatter.description }}\\r\\n\\r\\n## 一、打包\\r\\n\\r\\n```js\\r\\nimport esbuild from \'esbuild\';\\r\\n\\r\\nconst { build, transform } = esbuild;\\r\\nasync function runBuild() {\\r\\n  // 异步方法，返回一个 Promise\\r\\n  const result = await build({\\r\\n    // ----  如下是一些常见的配置  ---\\r\\n    // 当前项目根目录\\r\\n    absWorkingDir: process.cwd(),\\r\\n    // 入口文件列表，为一个数组\\r\\n    entryPoints: [\'./src/index.jsx\'],\\r\\n    // 打包产物目录\\r\\n    outdir: \'dist\',\\r\\n    // 是否需要打包，一般设为 true\\r\\n    bundle: true,\\r\\n    // 模块格式，包括`esm`、`commonjs`和`iife`\\r\\n    format: \'esm\',\\r\\n    // 需要排除打包的依赖列表\\r\\n    external: [],\\r\\n    // 是否开启自动拆包\\r\\n    splitting: true,\\r\\n    // 是否生成 SourceMap 文件\\r\\n    sourcemap: true,\\r\\n    // 是否生成打包的元信息文件\\r\\n    metafile: true,\\r\\n    // 是否进行代码压缩\\r\\n    minify: false,\\r\\n    // 是否开启 watch 模式，在 watch 模式下代码变动则会触发重新打包\\r\\n    // watch: false,\\r\\n    // 是否将产物写入磁盘\\r\\n    write: true,\\r\\n    // Esbuild 内置了一系列的 loader，包括 base64、binary、css、dataurl、file、js(x)、ts(x)、text、json\\r\\n    // 针对一些特殊的文件，调用不同的 loader 进行加载\\r\\n    loader: {\\r\\n      \'.png\': \'base64\',\\r\\n    },\\r\\n  });\\r\\n  console.log(result);\\r\\n}\\r\\n\\r\\nrunBuild();\\r\\n```\\r\\n\\r\\n## 二、服务\\r\\n\\r\\n```js\\r\\nfunction runServer() {\\r\\n  esbuild\\r\\n    .context({\\r\\n      outdir: \'./dist\',\\r\\n      absWorkingDir: process.cwd(),\\r\\n      entryPoints: [\'./src/index.jsx\'],\\r\\n      bundle: true,\\r\\n      format: \'esm\',\\r\\n      splitting: true,\\r\\n      sourcemap: true,\\r\\n      ignoreAnnotations: true,\\r\\n      metafile: true,\\r\\n    })\\r\\n    .then((server) => {\\r\\n      server\\r\\n        .serve({\\r\\n          servedir: \'./dist\',\\r\\n        })\\r\\n        .then(({ host, port }) => {\\r\\n          console.log(`HTTP Server starts at port: http://${host}:${port} `);\\r\\n        });\\r\\n    });\\r\\n}\\r\\nrunServer();\\r\\n```\\r\\n\\r\\n## 转译\\r\\n\\r\\n```js\\r\\nasync function runTransform() {\\r\\n  // 第一个参数是代码字符串，第二个参数为编译配置\\r\\n  const content = await transform(\'const isNull = (str: string): boolean => str.length > 0;\', {\\r\\n    sourcemap: true,\\r\\n    loader: \'tsx\',\\r\\n  });\\r\\n  console.log(content, \'content\');\\r\\n}\\r\\n\\r\\nrunTransform();\\r\\n```\\r\\n\\r\\n## 四、插件\\r\\n\\r\\n```js\\r\\n// 插件\\r\\nlet envPlugin = {\\r\\n  name: \'env\',\\r\\n  setup(build) {\\r\\n    build.onResolve({ filter: /^env$/ }, (args) => ({\\r\\n      path: args.path,\\r\\n      namespace: \'env-ns\',\\r\\n    }));\\r\\n\\r\\n    build.onLoad({ filter: /.*/, namespace: \'env-ns\' }, () => ({\\r\\n      contents: JSON.stringify(process.env),\\r\\n      loader: \'json\',\\r\\n    }));\\r\\n  },\\r\\n};\\r\\n\\r\\nesbuild\\r\\n  .build({\\r\\n    entryPoints: [\'src/index.jsx\'],\\r\\n    bundle: true,\\r\\n    outfile: \'./dist/out.js\',\\r\\n    // 应用插件\\r\\n    plugins: [envPlugin],\\r\\n  })\\r\\n  .catch(() => process.exit(1));\\r\\n```\\r\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{ $frontmatter.title }} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{ $frontmatter.title }}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>{{ $frontmatter.description }}</p>\\n<h2 id=\\"一、打包\\" tabindex=\\"-1\\">一、打包 <a class=\\"header-anchor\\" href=\\"#一、打包\\" aria-label=\\"Permalink to &quot;一、打包&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">import</span><span style=\\"color: #E1E4E8\\"> esbuild </span><span style=\\"color: #F97583\\">from</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;esbuild&#39;</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">build</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">transform</span><span style=\\"color: #E1E4E8\\"> } </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> esbuild;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">async</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">runBuild</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 异步方法，返回一个 Promise</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">result</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">build</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// ----  如下是一些常见的配置  ---</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 当前项目根目录</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    absWorkingDir: process.</span><span style=\\"color: #B392F0\\">cwd</span><span style=\\"color: #E1E4E8\\">(),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 入口文件列表，为一个数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    entryPoints: [</span><span style=\\"color: #9ECBFF\\">&#39;./src/index.jsx&#39;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 打包产物目录</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    outdir: </span><span style=\\"color: #9ECBFF\\">&#39;dist&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 是否需要打包，一般设为 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    bundle: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 模块格式，包括`esm`、`commonjs`和`iife`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    format: </span><span style=\\"color: #9ECBFF\\">&#39;esm&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 需要排除打包的依赖列表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    external: [],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 是否开启自动拆包</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    splitting: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 是否生成 SourceMap 文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    sourcemap: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 是否生成打包的元信息文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    metafile: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 是否进行代码压缩</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    minify: </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 是否开启 watch 模式，在 watch 模式下代码变动则会触发重新打包</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// watch: false,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 是否将产物写入磁盘</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    write: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// Esbuild 内置了一系列的 loader，包括 base64、binary、css、dataurl、file、js(x)、ts(x)、text、json</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 针对一些特殊的文件，调用不同的 loader 进行加载</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    loader: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&#39;.png&#39;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&#39;base64&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(result);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">runBuild</span><span style=\\"color: #E1E4E8\\">();</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">import</span><span style=\\"color: #24292E\\"> esbuild </span><span style=\\"color: #D73A49\\">from</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;esbuild&#39;</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">build</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">transform</span><span style=\\"color: #24292E\\"> } </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> esbuild;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">async</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">runBuild</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 异步方法，返回一个 Promise</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">result</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">build</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// ----  如下是一些常见的配置  ---</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 当前项目根目录</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    absWorkingDir: process.</span><span style=\\"color: #6F42C1\\">cwd</span><span style=\\"color: #24292E\\">(),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 入口文件列表，为一个数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    entryPoints: [</span><span style=\\"color: #032F62\\">&#39;./src/index.jsx&#39;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 打包产物目录</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    outdir: </span><span style=\\"color: #032F62\\">&#39;dist&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 是否需要打包，一般设为 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    bundle: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 模块格式，包括`esm`、`commonjs`和`iife`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    format: </span><span style=\\"color: #032F62\\">&#39;esm&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 需要排除打包的依赖列表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    external: [],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 是否开启自动拆包</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    splitting: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 是否生成 SourceMap 文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    sourcemap: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 是否生成打包的元信息文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    metafile: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 是否进行代码压缩</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    minify: </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 是否开启 watch 模式，在 watch 模式下代码变动则会触发重新打包</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// watch: false,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 是否将产物写入磁盘</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    write: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// Esbuild 内置了一系列的 loader，包括 base64、binary、css、dataurl、file、js(x)、ts(x)、text、json</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 针对一些特殊的文件，调用不同的 loader 进行加载</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    loader: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&#39;.png&#39;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&#39;base64&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(result);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">runBuild</span><span style=\\"color: #24292E\\">();</span></span></code></pre>\\n</div><h2 id=\\"二、服务\\" tabindex=\\"-1\\">二、服务 <a class=\\"header-anchor\\" href=\\"#二、服务\\" aria-label=\\"Permalink to &quot;二、服务&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">runServer</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  esbuild</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    .</span><span style=\\"color: #B392F0\\">context</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      outdir: </span><span style=\\"color: #9ECBFF\\">&#39;./dist&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      absWorkingDir: process.</span><span style=\\"color: #B392F0\\">cwd</span><span style=\\"color: #E1E4E8\\">(),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      entryPoints: [</span><span style=\\"color: #9ECBFF\\">&#39;./src/index.jsx&#39;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      bundle: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      format: </span><span style=\\"color: #9ECBFF\\">&#39;esm&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      splitting: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      sourcemap: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      ignoreAnnotations: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      metafile: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    .</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">((</span><span style=\\"color: #FFAB70\\">server</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      server</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        .</span><span style=\\"color: #B392F0\\">serve</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          servedir: </span><span style=\\"color: #9ECBFF\\">&#39;./dist&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        .</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">(({ </span><span style=\\"color: #FFAB70\\">host</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">port</span><span style=\\"color: #E1E4E8\\"> }) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">`HTTP Server starts at port: http://${</span><span style=\\"color: #E1E4E8\\">host</span><span style=\\"color: #9ECBFF\\">}:${</span><span style=\\"color: #E1E4E8\\">port</span><span style=\\"color: #9ECBFF\\">} `</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">runServer</span><span style=\\"color: #E1E4E8\\">();</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">runServer</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  esbuild</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    .</span><span style=\\"color: #6F42C1\\">context</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      outdir: </span><span style=\\"color: #032F62\\">&#39;./dist&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      absWorkingDir: process.</span><span style=\\"color: #6F42C1\\">cwd</span><span style=\\"color: #24292E\\">(),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      entryPoints: [</span><span style=\\"color: #032F62\\">&#39;./src/index.jsx&#39;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      bundle: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      format: </span><span style=\\"color: #032F62\\">&#39;esm&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      splitting: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      sourcemap: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      ignoreAnnotations: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      metafile: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    .</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">((</span><span style=\\"color: #E36209\\">server</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      server</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        .</span><span style=\\"color: #6F42C1\\">serve</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          servedir: </span><span style=\\"color: #032F62\\">&#39;./dist&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        .</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">(({ </span><span style=\\"color: #E36209\\">host</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">port</span><span style=\\"color: #24292E\\"> }) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">`HTTP Server starts at port: http://${</span><span style=\\"color: #24292E\\">host</span><span style=\\"color: #032F62\\">}:${</span><span style=\\"color: #24292E\\">port</span><span style=\\"color: #032F62\\">} `</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">runServer</span><span style=\\"color: #24292E\\">();</span></span></code></pre>\\n</div><h2 id=\\"转译\\" tabindex=\\"-1\\">转译 <a class=\\"header-anchor\\" href=\\"#转译\\" aria-label=\\"Permalink to &quot;转译&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">async</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">runTransform</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 第一个参数是代码字符串，第二个参数为编译配置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">content</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">transform</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;const isNull = (str: string): boolean =&gt; str.length &gt; 0;&#39;</span><span style=\\"color: #E1E4E8\\">, {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    sourcemap: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    loader: </span><span style=\\"color: #9ECBFF\\">&#39;tsx&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(content, </span><span style=\\"color: #9ECBFF\\">&#39;content&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">runTransform</span><span style=\\"color: #E1E4E8\\">();</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">async</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">runTransform</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 第一个参数是代码字符串，第二个参数为编译配置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">content</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">transform</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;const isNull = (str: string): boolean =&gt; str.length &gt; 0;&#39;</span><span style=\\"color: #24292E\\">, {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    sourcemap: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    loader: </span><span style=\\"color: #032F62\\">&#39;tsx&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(content, </span><span style=\\"color: #032F62\\">&#39;content&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">runTransform</span><span style=\\"color: #24292E\\">();</span></span></code></pre>\\n</div><h2 id=\\"四、插件\\" tabindex=\\"-1\\">四、插件 <a class=\\"header-anchor\\" href=\\"#四、插件\\" aria-label=\\"Permalink to &quot;四、插件&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// 插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> envPlugin </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  name: </span><span style=\\"color: #9ECBFF\\">&#39;env&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">setup</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">build</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    build.</span><span style=\\"color: #B392F0\\">onResolve</span><span style=\\"color: #E1E4E8\\">({ filter:</span><span style=\\"color: #DBEDFF\\"> </span><span style=\\"color: #9ECBFF\\">/</span><span style=\\"color: #F97583\\">^</span><span style=\\"color: #DBEDFF\\">env</span><span style=\\"color: #F97583\\">$</span><span style=\\"color: #9ECBFF\\">/</span><span style=\\"color: #E1E4E8\\"> }, (</span><span style=\\"color: #FFAB70\\">args</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> ({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      path: args.path,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      namespace: </span><span style=\\"color: #9ECBFF\\">&#39;env-ns&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    build.</span><span style=\\"color: #B392F0\\">onLoad</span><span style=\\"color: #E1E4E8\\">({ filter:</span><span style=\\"color: #DBEDFF\\"> </span><span style=\\"color: #9ECBFF\\">/</span><span style=\\"color: #79B8FF\\">.</span><span style=\\"color: #F97583\\">*</span><span style=\\"color: #9ECBFF\\">/</span><span style=\\"color: #E1E4E8\\">, namespace: </span><span style=\\"color: #9ECBFF\\">&#39;env-ns&#39;</span><span style=\\"color: #E1E4E8\\"> }, () </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> ({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      contents: </span><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">(process.env),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      loader: </span><span style=\\"color: #9ECBFF\\">&#39;json&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">esbuild</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  .</span><span style=\\"color: #B392F0\\">build</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    entryPoints: [</span><span style=\\"color: #9ECBFF\\">&#39;src/index.jsx&#39;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    bundle: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    outfile: </span><span style=\\"color: #9ECBFF\\">&#39;./dist/out.js&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 应用插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    plugins: [envPlugin],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  .</span><span style=\\"color: #B392F0\\">catch</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> process.</span><span style=\\"color: #B392F0\\">exit</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">));</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// 插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> envPlugin </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  name: </span><span style=\\"color: #032F62\\">&#39;env&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">setup</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">build</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    build.</span><span style=\\"color: #6F42C1\\">onResolve</span><span style=\\"color: #24292E\\">({ filter:</span><span style=\\"color: #032F62\\"> /</span><span style=\\"color: #D73A49\\">^</span><span style=\\"color: #032F62\\">env</span><span style=\\"color: #D73A49\\">$</span><span style=\\"color: #032F62\\">/</span><span style=\\"color: #24292E\\"> }, (</span><span style=\\"color: #E36209\\">args</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> ({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      path: args.path,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      namespace: </span><span style=\\"color: #032F62\\">&#39;env-ns&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    build.</span><span style=\\"color: #6F42C1\\">onLoad</span><span style=\\"color: #24292E\\">({ filter:</span><span style=\\"color: #032F62\\"> /</span><span style=\\"color: #005CC5\\">.</span><span style=\\"color: #D73A49\\">*</span><span style=\\"color: #032F62\\">/</span><span style=\\"color: #24292E\\">, namespace: </span><span style=\\"color: #032F62\\">&#39;env-ns&#39;</span><span style=\\"color: #24292E\\"> }, () </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> ({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      contents: </span><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">(process.env),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      loader: </span><span style=\\"color: #032F62\\">&#39;json&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">esbuild</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  .</span><span style=\\"color: #6F42C1\\">build</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    entryPoints: [</span><span style=\\"color: #032F62\\">&#39;src/index.jsx&#39;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    bundle: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    outfile: </span><span style=\\"color: #032F62\\">&#39;./dist/out.js&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 应用插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    plugins: [envPlugin],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  .</span><span style=\\"color: #6F42C1\\">catch</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> process.</span><span style=\\"color: #6F42C1\\">exit</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">));</span></span></code></pre>\\n</div>","frontmatter":{"title":"esbuild基本使用","author":"power","description":"版本（\\"^0.19.4\\"）","date":"2023-10-17T15:14:33.000Z","link":"./engineering/Esbuild.md","tags":["工程"]},"excerpt":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{ $frontmatter.title }} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{ $frontmatter.title }}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>{{ $frontmatter.description }}</p>\\n<h2 id=\\"一、打包\\" tabindex=\\"-1\\">一、打包 <a class=\\"header-anchor\\" href=\\"#一、打包\\" aria-label=\\"Permalink to &quot;一、打包&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">import</span><span style=\\"color: #E1E4E8\\"> esbuild </span><span style=\\"color: #F97583\\">from</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;esbuild&#39;</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">build</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">transform</span><span style=\\"color: #E1E4E8\\"> } </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> esbuild;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">async</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">runBuild</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 异步方法，返回一个 Promise</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">result</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">build</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">//</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">import</span><span style=\\"color: #24292E\\"> esbuild </span><span style=\\"color: #D73A49\\">from</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;esbuild&#39;</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">build</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">transform</span><span style=\\"color: #24292E\\"> } </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> esbuild;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">async</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">runBuild</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 异步方法，返回一个 Promise</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">result</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">build</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">//</span></span></code></pre>\\n</div>","url":"/engineering/Esbuild.html"},{"src":"---\\r\\ntitle: webpack使用\\r\\nauthor: power\\r\\ndescription: \'webpack@4.43.0 webpack-cli@3.3.12\'\\r\\ndate: 2023-10-17 15:14:33\\r\\nlink: ./engineering/Webpack.md\\r\\ntags:\\r\\n  - 工程\\r\\n---\\r\\n\\r\\n# 配置\\r\\n\\r\\n- output.path: 生成的真实文件存放地址\\r\\n- output.publicPath: 资源访问路径。(也就是 urlhttps://www.apple.com/ipad/)\\r\\n- filename 中的 hash 值：hash，chunkhash、contenthash,contenthash 是根据打包时 CSS 内容计算出的 hash 值。一般在使用提取 CSS 的插件的时候\\r\\n\\r\\n# loader\\r\\n\\r\\n- css-loader: 仅仅是解析 CSS 文件\\r\\n- style-loader： ，就是通过 JS 动态生成 style 标签插入到 html 文件的 head 标签里。\\r\\n","html":"<h1 id=\\"配置\\" tabindex=\\"-1\\">配置 <a class=\\"header-anchor\\" href=\\"#配置\\" aria-label=\\"Permalink to &quot;配置&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>output.path: 生成的真实文件存放地址</li>\\n<li>output.publicPath: 资源访问路径。(也就是 urlhttps://www.apple.com/ipad/)</li>\\n<li>filename 中的 hash 值：hash，chunkhash、contenthash,contenthash 是根据打包时 CSS 内容计算出的 hash 值。一般在使用提取 CSS 的插件的时候</li>\\n</ul>\\n<h1 id=\\"loader\\" tabindex=\\"-1\\">loader <a class=\\"header-anchor\\" href=\\"#loader\\" aria-label=\\"Permalink to &quot;loader&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>css-loader: 仅仅是解析 CSS 文件</li>\\n<li>style-loader： ，就是通过 JS 动态生成 style 标签插入到 html 文件的 head 标签里。</li>\\n</ul>\\n","frontmatter":{"title":"webpack使用","author":"power","description":"webpack@4.43.0 webpack-cli@3.3.12","date":"2023-10-17T15:14:33.000Z","link":"./engineering/Webpack.md","tags":["工程"]},"excerpt":"","url":"/engineering/Webpack.html"},{"src":"---\\ntitle: 收藏夹\\nauthor: power\\ndescription: \'网上收集的一些链接\'\\ndate: 2023-10-09 08:49:08\\nlink: ./mac/Favorites\\ntags:\\n  - mac\\n---\\n\\n# {{$frontmatter.title}}\\n\\n- {{$frontmatter.description}}\\n\\n# 计算机体系（重要）\\n\\n- [北大计算机自学指南]（https://csdiy.wiki）\\n\\n## 博客\\n\\n- 哈工大深圳校区的计算机本科生[Clouder Blog](https://www.codein.icu/about/)\\n- [机场测速](https://www.duyaoss.com/archives/3/)\\n\\n## ordinary\\n\\n- [学会自己挑选硬件，组装一台电脑](https://zhuanlan.zhihu.com/p/406451515)\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{$frontmatter.title}} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{$frontmatter.title}}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>{{$frontmatter.description}}</li>\\n</ul>\\n<h1 id=\\"计算机体系-重要\\" tabindex=\\"-1\\">计算机体系（重要） <a class=\\"header-anchor\\" href=\\"#计算机体系-重要\\" aria-label=\\"Permalink to &quot;计算机体系（重要）&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>[北大计算机自学指南]（<a href=\\"https://csdiy.wiki\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://csdiy.wiki</a>）</li>\\n</ul>\\n<h2 id=\\"博客\\" tabindex=\\"-1\\">博客 <a class=\\"header-anchor\\" href=\\"#博客\\" aria-label=\\"Permalink to &quot;博客&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li>哈工大深圳校区的计算机本科生<a href=\\"https://www.codein.icu/about/\\" target=\\"_blank\\" rel=\\"noreferrer\\">Clouder Blog</a></li>\\n<li><a href=\\"https://www.duyaoss.com/archives/3/\\" target=\\"_blank\\" rel=\\"noreferrer\\">机场测速</a></li>\\n</ul>\\n<h2 id=\\"ordinary\\" tabindex=\\"-1\\">ordinary <a class=\\"header-anchor\\" href=\\"#ordinary\\" aria-label=\\"Permalink to &quot;ordinary&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li><a href=\\"https://zhuanlan.zhihu.com/p/406451515\\" target=\\"_blank\\" rel=\\"noreferrer\\">学会自己挑选硬件，组装一台电脑</a></li>\\n</ul>\\n","frontmatter":{"title":"收藏夹","author":"power","description":"网上收集的一些链接","date":"2023-10-09T08:49:08.000Z","link":"./mac/Favorites","tags":["mac"]},"excerpt":"","url":"/book/Favorites.html"},{"src":"---\\ntitle: 相关书籍\\nauthor: power\\ndescription: 记录好书\\ndate: 2023-10-08 11:34:19\\nlink: ./book/Recommend\\ntags:\\n  - 书籍\\n---\\n\\n# {{ $frontmatter.title }}\\n\\n{{ $frontmatter.description }}\\n\\n### 计算机\\n\\n- 张银奎的《软件调试》，国内调试领域的大牛\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{ $frontmatter.title }} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{ $frontmatter.title }}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>{{ $frontmatter.description }}</p>\\n<h3 id=\\"计算机\\" tabindex=\\"-1\\">计算机 <a class=\\"header-anchor\\" href=\\"#计算机\\" aria-label=\\"Permalink to &quot;计算机&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>张银奎的《软件调试》，国内调试领域的大牛</li>\\n</ul>\\n","frontmatter":{"title":"相关书籍","author":"power","description":"记录好书","date":"2023-10-08T11:34:19.000Z","link":"./book/Recommend","tags":["书籍"]},"excerpt":"","url":"/book/Recommend.html"},{"src":"---\\r\\ntitle: vite前端工程化之路\\r\\nauthor: power\\r\\ndescription: 面临几个问题：1、模块化需求 2、语法转译 3、产物质量 4、开发效率\\r\\ndate: 2023-10-08 11:34:19\\r\\nlink: ./frontend/Engineering\\r\\ntags:\\r\\n  - 源码\\r\\n---\\r\\n\\r\\n# {{$frontmatter.title}}\\r\\n\\r\\n- {{$frontmatter.description}}\\r\\n\\r\\n## 一、css 痛点\\r\\n\\r\\n- 1、开发体验欠佳。比如原生 CSS 不支持选择器的嵌套\\r\\n- 2、样式污染问题。如果出现同样的类名，很容易造成不同的样式互相覆盖和污染。\\r\\n- 3、浏览器兼容问题。为了兼容不同的浏览器，我们需要对一些属性(如 transition)加上不同的浏览器前缀，比如 -webkit-、-moz-、-ms-、-o-\\r\\n- 4、打包后的代码体积问题\\r\\n\\r\\n* 方案：\\r\\n  1、CSS 预处理器(sass/less) 2、CSS 后处理器 PostCSS(autoprefixer) 3、CSS Modules 4、css in js 5 、CSS 原子化框架\\r\\n\\r\\n* css 配置\\r\\n\\r\\n```sh\\r\\npnpm create vite\\r\\n```\\r\\n\\r\\n```js\\r\\n css: {\\r\\n    // 进行 PostCSS 配置\\r\\n    postcss: {\\r\\n      plugins: [\\r\\n       autoprefixer({\\r\\n          // 指定目标浏览器\\r\\n          overrideBrowserslist: [\'safari >= 6\', \'ff >= 10\'],\\r\\n        }),\\r\\n      ],\\r\\n    },\\r\\n    // css module\\r\\n    modules: {\\r\\n      // 一般我们可以通过 generateScopedName 属性来对生成的类名进行自定义\\r\\n      // 其中，name 表示当前文件名，local 表示类名\\r\\n      generateScopedName: \'[name]__[local]___[hash:base64:5]\',\\r\\n    },\\r\\n    // 全局注入\\r\\n    preprocessorOptions: {\\r\\n      scss: {\\r\\n        // additionalData 的内容会在每个 scss 文件的开头自动注入\\r\\n        additionalData: `@import \\"${variablePath}\\";`,\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n```\\r\\n\\r\\n## 二、代码规范\\r\\n\\r\\n问题：\\r\\n\\r\\n- 代码是人看的，统一风格有利于团队协作\\r\\n\\r\\n### 方案： eslint 与 prettier 结合\\r\\n\\r\\n```js\\r\\n// .prettierrc.cjs\\r\\nmodule.exports = {\\r\\n  printWidth: 80, //一行的字符数，如果超过会进行换行，默认为80\\r\\n  tabWidth: 2, // 一个 tab 代表几个空格数，默认为 2 个\\r\\n  useTabs: false, //是否使用 tab 进行缩进，默认为false，表示用空格进行缩减\\r\\n  singleQuote: true, // 字符串是否使用单引号，默认为 false，使用双引号\\r\\n  semi: true, // 行尾是否使用分号，默认为true\\r\\n  trailingComma: \'none\', // 是否使用尾逗号\\r\\n  bracketSpacing: true, // 对象大括号直接是否有空格，默认为 true，效果：{ a: 1 }\\r\\n};\\r\\n```\\r\\n\\r\\n- 将 Prettier 集成到现有的 ESLint 工具中\\r\\n\\r\\n````sh\\r\\npnpm i prettier -D\\r\\n# 其中eslint-config-prettier用来覆盖 ESLint 本身的规则配置，而eslint-plugin-prettier则是用于让 Prettier 来接管eslint --fix即修复代码的能力。\\r\\npnpm i eslint-config-prettier eslint-plugin-prettier -D\\r\\n\\r\\n```js\\r\\n// .eslintrc.cjs\\r\\nmodule.exports = {\\r\\n  root: true,\\r\\n  env: { browser: true, es2020: true },\\r\\n  extends: [\\r\\n    \'eslint:recommended\',\\r\\n    \'plugin:@typescript-eslint/recommended\',\\r\\n    \'plugin:react-hooks/recommended\',\\r\\n    // 1. 接入 prettier 的规则\\r\\n    \\"prettier\\",\\r\\n    \\"plugin:prettier/recommended\\"\\r\\n  ],\\r\\n  ignorePatterns: [\'dist\', \'.eslintrc.cjs\'],\\r\\n  parser: \'@typescript-eslint/parser\',\\r\\n  parserOptions: {\\r\\n    ecmaFeatures: {\\r\\n      jsx: true\\r\\n    },\\r\\n    ecmaVersion: \\"latest\\",\\r\\n    sourceType: \\"module\\"\\r\\n  },\\r\\n  plugins: [\'react-refresh\', \\"@typescript-eslint\\", \\"prettier\\"],\\r\\n  rules: {\\r\\n    // 3. 注意要加上这一句，开启 prettier 自动修复的功能\\r\\n    \\"prettier/prettier\\": \\"error\\",\\r\\n    quotes: [\\"error\\", \\"single\\"],\\r\\n    semi: [\\"error\\", \\"always\\"],\\r\\n    \\"react/react-in-jsx-scope\\": \\"off\\",\\r\\n    \'react-refresh/only-export-components\': [\\r\\n      \'warn\',\\r\\n      { allowConstantExport: true },\\r\\n    ],\\r\\n  },\\r\\n}\\r\\n\\r\\n````\\r\\n\\r\\n- 定义一个脚本\\r\\n\\r\\n```js\\r\\n{\\r\\n  \\"scripts\\": {\\r\\n    // 省略已有 script\\r\\n    \\"lint\\": \\"eslint --ext .js,.jsx,.ts,.tsx --fix --quiet ./src\\",\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n- 样式规范: stylelint\\r\\n\\r\\n```sh\\r\\npnpm i stylelint stylelint-prettier stylelint-config-prettier stylelint-config-recess-order stylelint-config-standard stylelint-config-standard-scss -D\\r\\n\\r\\n```\\r\\n\\r\\n```js\\r\\n// .stylelintrc.js\\r\\nmodule.exports = {\\r\\n  // 注册 stylelint 的 prettier 插件\\r\\n  plugins: [\'stylelint-prettier\'],\\r\\n  // 继承一系列规则集合\\r\\n  extends: [\\r\\n    // standard 规则集合\\r\\n    \'stylelint-config-standard\',\\r\\n    // standard 规则集合的 scss 版本\\r\\n    \'stylelint-config-standard-scss\',\\r\\n    // 样式属性顺序规则\\r\\n    \'stylelint-config-recess-order\',\\r\\n    // 接入 Prettier 规则\\r\\n    \'stylelint-config-prettier\',\\r\\n    \'stylelint-prettier/recommended\',\\r\\n  ],\\r\\n  // 配置 rules\\r\\n  rules: {\\r\\n    // 开启 Prettier 自动格式化功能\\r\\n    \'prettier/prettier\': true,\\r\\n  },\\r\\n};\\r\\n```\\r\\n\\r\\n```js\\r\\n// .stylelintrc.cjs\\r\\nmodule.exports = {\\r\\n  // 注册 stylelint 的 prettier 插件\\r\\n  plugins: [\'stylelint-prettier\'],\\r\\n  // 继承一系列规则集合\\r\\n  extends: [\\r\\n    // standard 规则集合\\r\\n    \'stylelint-config-standard\',\\r\\n    // standard 规则集合的 scss 版本\\r\\n    \'stylelint-config-standard-scss\',\\r\\n    // 样式属性顺序规则\\r\\n    \'stylelint-config-recess-order\',\\r\\n    // 接入 Prettier 规则\\r\\n    \'stylelint-config-prettier\',\\r\\n    \'stylelint-prettier/recommended\',\\r\\n  ],\\r\\n  // 配置 rules\\r\\n  rules: {\\r\\n    // 开启 Prettier 自动格式化功能\\r\\n    \'prettier/prettier\': true,\\r\\n  },\\r\\n};\\r\\n```\\r\\n\\r\\n```js\\r\\n{\\r\\n  \\"scripts\\": {\\r\\n    // 整合 lint 命令\\r\\n    \\"lint\\": \\"npm run lint:script && npm run lint:style\\",\\r\\n    // stylelint 命令\\r\\n    \\"lint:style\\": \\"stylelint --fix \\\\\\"src/**/*.{css,scss}\\\\\\"\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n### Husky + lint-staged 的 Git 提交工作流集成\\r\\n\\r\\n初始化 Husky: ,并将 husky install 作为项目启动前脚本\\r\\n\\r\\n```sh\\r\\npnpm i husky -D\\r\\n# 初始化\\r\\nnpx husky install\\r\\nnpx husky add .husky/pre-commit \\"npm run lint\\"\\r\\n\\r\\n```\\r\\n\\r\\n- lint-staged： 就是用来解决上述全量扫描问题的，可以实现只对存入暂存区的文件进行 Lint 检查，大大提高了提交代码的效率。首先，让我们安装一下对应的 npm 包:\\r\\n\\r\\n```\\r\\npnpm i -D lint-staged\\r\\n\\r\\n```\\r\\n\\r\\n- package.json\\r\\n\\r\\n```js\\r\\n{\\r\\n  \\"lint-staged\\": {\\r\\n    \\"**/*.{js,jsx,tsx,ts}\\": [\\r\\n      \\"npm run lint:script\\",\\r\\n      \\"git add .\\"\\r\\n    ],\\r\\n    \\"**/*.{scss}\\": [\\r\\n      \\"npm run lint:style\\",\\r\\n      \\"git add .\\"\\r\\n    ]\\r\\n  }\\r\\n}\\r\\n// 需要在 Husky 中应用lint-stage，回到.husky/pre-commit脚本中，将原来的npm run lint换成如下脚本\\r\\nnpx --no -- lint-staged\\r\\n\\r\\n```\\r\\n\\r\\n### 规范话 commit 信息\\r\\n\\r\\n```sh\\r\\npnpm i commitlint @commitlint/cli @commitlint/config-conventional -D\\r\\n\\r\\n```\\r\\n\\r\\n```js\\r\\n// .commitlintrc.cjs\\r\\nmodule.exports = {\\r\\n  extends: [\'@commitlint/config-conventional\'],\\r\\n};\\r\\n```\\r\\n\\r\\n- 常用的 type 值包括如下:\\r\\n\\r\\n* feat: 添加新功能。\\r\\n* fix: 修复 Bug。\\r\\n* chore: 一些不影响功能的更改。\\r\\n* docs: 专指文档的修改。\\r\\n* perf: 性能方面的优化。\\r\\n* refactor: 代码重构。\\r\\n* test: 添加一些测试代码等等。\\r\\n\\r\\n#### 我们将 commitlint 的功能集成到 Husky 的钩子当中\\r\\n\\r\\n```\\r\\nnpx husky add .husky/commit-msg \\"npx --no-install commitlint -e $HUSKY_GIT_PARAMS\\"\\r\\n\\r\\n```\\r\\n\\r\\n## 三、静态资源的处理\\r\\n\\r\\n### 问题\\r\\n\\r\\n- 静态资源解析并加载为一个 ES 模块的\\r\\n- 生产环境下我们还需要考虑静态资源的部署问题、体积问题、网络性能问题\\r\\n\\r\\n- 部署域名怎么配置？\\r\\n- 资源打包成单文件还是作为 Base64 格式内联?\\r\\n- 图片太大了怎么压缩？\\r\\n- svg 请求数量太多了怎么优化？\\r\\n\\r\\n### 三种场景\\r\\n\\r\\n```js\\r\\n// html\\r\\n<img src=\\"../../assets/a.png\\"></img>\\r\\n// css\\r\\nbackground: url(\'../../assets/b.png\') norepeat;\\r\\n// js\\r\\ndocument.getElementById(\'hero-img\').src = \'../../assets/c.png\'\\r\\n\\r\\n```\\r\\n\\r\\n### svg 加载\\r\\n\\r\\n- Vue2 项目中可以使用 vite-plugin-vue2-svg 插件。\\r\\n- Vue3 项目中可以引入 vite-svg-loader。\\r\\n- React 项目使用 vite-plugin-svgr 插件。\\r\\n\\r\\n### 图片压缩\\r\\n\\r\\n```\\r\\npnpm i vite-plugin-imagemin -D\\r\\n\\r\\n```\\r\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{$frontmatter.title}} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{$frontmatter.title}}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>{{$frontmatter.description}}</li>\\n</ul>\\n<h2 id=\\"一、css-痛点\\" tabindex=\\"-1\\">一、css 痛点 <a class=\\"header-anchor\\" href=\\"#一、css-痛点\\" aria-label=\\"Permalink to &quot;一、css 痛点&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li>1、开发体验欠佳。比如原生 CSS 不支持选择器的嵌套</li>\\n<li>2、样式污染问题。如果出现同样的类名，很容易造成不同的样式互相覆盖和污染。</li>\\n<li>3、浏览器兼容问题。为了兼容不同的浏览器，我们需要对一些属性(如 transition)加上不同的浏览器前缀，比如 -webkit-、-moz-、-ms-、-o-</li>\\n<li>4、打包后的代码体积问题</li>\\n</ul>\\n<ul>\\n<li>\\n<p>方案：\\n1、CSS 预处理器(sass/less) 2、CSS 后处理器 PostCSS(autoprefixer) 3、CSS Modules 4、css in js 5 、CSS 原子化框架</p>\\n</li>\\n<li>\\n<p>css 配置</p>\\n</li>\\n</ul>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">pnpm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">create</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">vite</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">pnpm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">create</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">vite</span></span></code></pre>\\n</div><div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">css</span><span style=\\"color: #E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 进行 PostCSS 配置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">postcss</span><span style=\\"color: #E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #B392F0\\">plugins</span><span style=\\"color: #E1E4E8\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">       </span><span style=\\"color: #B392F0\\">autoprefixer</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          </span><span style=\\"color: #6A737D\\">// 指定目标浏览器</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          overrideBrowserslist: [</span><span style=\\"color: #9ECBFF\\">&#39;safari &gt;= 6&#39;</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #9ECBFF\\">&#39;ff &gt;= 10&#39;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        }),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// css module</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">modules</span><span style=\\"color: #E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// 一般我们可以通过 generateScopedName 属性来对生成的类名进行自定义</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// 其中，name 表示当前文件名，local 表示类名</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #B392F0\\">generateScopedName</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&#39;[name]__[local]___[hash:base64:5]&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 全局注入</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">preprocessorOptions</span><span style=\\"color: #E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #B392F0\\">scss</span><span style=\\"color: #E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// additionalData 的内容会在每个 scss 文件的开头自动注入</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #B392F0\\">additionalData</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">`@import &quot;${</span><span style=\\"color: #E1E4E8\\">variablePath</span><span style=\\"color: #9ECBFF\\">}&quot;;`</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  },</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">css</span><span style=\\"color: #24292E\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 进行 PostCSS 配置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">postcss</span><span style=\\"color: #24292E\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6F42C1\\">plugins</span><span style=\\"color: #24292E\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">       </span><span style=\\"color: #6F42C1\\">autoprefixer</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          </span><span style=\\"color: #6A737D\\">// 指定目标浏览器</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          overrideBrowserslist: [</span><span style=\\"color: #032F62\\">&#39;safari &gt;= 6&#39;</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #032F62\\">&#39;ff &gt;= 10&#39;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        }),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// css module</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">modules</span><span style=\\"color: #24292E\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// 一般我们可以通过 generateScopedName 属性来对生成的类名进行自定义</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// 其中，name 表示当前文件名，local 表示类名</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6F42C1\\">generateScopedName</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&#39;[name]__[local]___[hash:base64:5]&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 全局注入</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">preprocessorOptions</span><span style=\\"color: #24292E\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6F42C1\\">scss</span><span style=\\"color: #24292E\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// additionalData 的内容会在每个 scss 文件的开头自动注入</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6F42C1\\">additionalData</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">`@import &quot;${</span><span style=\\"color: #24292E\\">variablePath</span><span style=\\"color: #032F62\\">}&quot;;`</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  },</span></span></code></pre>\\n</div><h2 id=\\"二、代码规范\\" tabindex=\\"-1\\">二、代码规范 <a class=\\"header-anchor\\" href=\\"#二、代码规范\\" aria-label=\\"Permalink to &quot;二、代码规范&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>问题：</p>\\n<ul>\\n<li>代码是人看的，统一风格有利于团队协作</li>\\n</ul>\\n<h3 id=\\"方案-eslint-与-prettier-结合\\" tabindex=\\"-1\\">方案： eslint 与 prettier 结合 <a class=\\"header-anchor\\" href=\\"#方案-eslint-与-prettier-结合\\" aria-label=\\"Permalink to &quot;方案： eslint 与 prettier 结合&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// .prettierrc.cjs</span></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">module</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #79B8FF\\">exports</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  printWidth: </span><span style=\\"color: #79B8FF\\">80</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">//一行的字符数，如果超过会进行换行，默认为80</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  tabWidth: </span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">// 一个 tab 代表几个空格数，默认为 2 个</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  useTabs: </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">//是否使用 tab 进行缩进，默认为false，表示用空格进行缩减</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  singleQuote: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">// 字符串是否使用单引号，默认为 false，使用双引号</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  semi: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">// 行尾是否使用分号，默认为true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  trailingComma: </span><span style=\\"color: #9ECBFF\\">&#39;none&#39;</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">// 是否使用尾逗号</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  bracketSpacing: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">// 对象大括号直接是否有空格，默认为 true，效果：{ a: 1 }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">};</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// .prettierrc.cjs</span></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">module</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #005CC5\\">exports</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  printWidth: </span><span style=\\"color: #005CC5\\">80</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">//一行的字符数，如果超过会进行换行，默认为80</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  tabWidth: </span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">// 一个 tab 代表几个空格数，默认为 2 个</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  useTabs: </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">//是否使用 tab 进行缩进，默认为false，表示用空格进行缩减</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  singleQuote: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">// 字符串是否使用单引号，默认为 false，使用双引号</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  semi: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">// 行尾是否使用分号，默认为true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  trailingComma: </span><span style=\\"color: #032F62\\">&#39;none&#39;</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">// 是否使用尾逗号</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  bracketSpacing: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">// 对象大括号直接是否有空格，默认为 true，效果：{ a: 1 }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">};</span></span></code></pre>\\n</div><ul>\\n<li>将 Prettier 集成到现有的 ESLint 工具中</li>\\n</ul>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">pnpm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">i</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">prettier</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-D</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 其中eslint-config-prettier用来覆盖 ESLint 本身的规则配置，而eslint-plugin-prettier则是用于让 Prettier 来接管eslint --fix即修复代码的能力。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">pnpm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">i</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">eslint-config-prettier</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">eslint-plugin-prettier</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-D</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">```</span><span style=\\"color: #B392F0\\">js</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">//</span><span style=\\"color: #9ECBFF\\"> .eslintrc.cjs</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">module.exports</span><span style=\\"color: #9ECBFF\\"> = {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  </span><span style=\\"color: #B392F0\\">root:</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #9ECBFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  </span><span style=\\"color: #B392F0\\">env:</span><span style=\\"color: #9ECBFF\\"> { browser: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #9ECBFF\\">, es2020: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #9ECBFF\\"> },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  </span><span style=\\"color: #B392F0\\">extends:</span><span style=\\"color: #9ECBFF\\"> [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">&#39;eslint:recommended&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">&#39;plugin:@typescript-eslint/recommended&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">&#39;plugin:react-hooks/recommended&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">//</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #9ECBFF\\">. 接入 prettier 的规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">&quot;prettier&quot;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">&quot;plugin:prettier/recommended&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  </span><span style=\\"color: #B392F0\\">ignorePatterns:</span><span style=\\"color: #9ECBFF\\"> [&#39;dist&#39;, &#39;.eslintrc.cjs&#39;],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  </span><span style=\\"color: #B392F0\\">parser:</span><span style=\\"color: #9ECBFF\\"> &#39;@typescript-eslint/parser&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  </span><span style=\\"color: #B392F0\\">parserOptions:</span><span style=\\"color: #9ECBFF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">ecmaFeatures:</span><span style=\\"color: #9ECBFF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">      </span><span style=\\"color: #B392F0\\">jsx:</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">ecmaVersion:</span><span style=\\"color: #9ECBFF\\"> &quot;latest&quot;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">sourceType:</span><span style=\\"color: #9ECBFF\\"> &quot;module&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  </span><span style=\\"color: #B392F0\\">plugins:</span><span style=\\"color: #9ECBFF\\"> [&#39;react-refresh&#39;, &quot;@typescript-eslint&quot;, &quot;prettier&quot;],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  </span><span style=\\"color: #B392F0\\">rules:</span><span style=\\"color: #9ECBFF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">//</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">3</span><span style=\\"color: #9ECBFF\\">. 注意要加上这一句，开启 prettier 自动修复的功能</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">&quot;prettier/prettier&quot;</span><span style=\\"color: #79B8FF\\">:</span><span style=\\"color: #9ECBFF\\"> &quot;error&quot;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">quotes:</span><span style=\\"color: #9ECBFF\\"> [&quot;error&quot;, &quot;single&quot;],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">semi:</span><span style=\\"color: #9ECBFF\\"> [&quot;error&quot;, &quot;always&quot;],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">&quot;react/react-in-jsx-scope&quot;</span><span style=\\"color: #79B8FF\\">:</span><span style=\\"color: #9ECBFF\\"> &quot;off&quot;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    </span><span style=\\"color: #B392F0\\">&#39;react-refresh/only-export-components&#39;</span><span style=\\"color: #79B8FF\\">:</span><span style=\\"color: #9ECBFF\\"> [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">      </span><span style=\\"color: #B392F0\\">&#39;warn&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">      { </span><span style=\\"color: #B392F0\\">allowConstantExport:</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #9ECBFF\\"> },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">    ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #9ECBFF\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">pnpm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">i</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">prettier</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-D</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 其中eslint-config-prettier用来覆盖 ESLint 本身的规则配置，而eslint-plugin-prettier则是用于让 Prettier 来接管eslint --fix即修复代码的能力。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">pnpm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">i</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">eslint-config-prettier</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">eslint-plugin-prettier</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-D</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">```</span><span style=\\"color: #6F42C1\\">js</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">//</span><span style=\\"color: #032F62\\"> .eslintrc.cjs</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">module.exports</span><span style=\\"color: #032F62\\"> = {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  </span><span style=\\"color: #6F42C1\\">root:</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #032F62\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  </span><span style=\\"color: #6F42C1\\">env:</span><span style=\\"color: #032F62\\"> { browser: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #032F62\\">, es2020: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #032F62\\"> },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  </span><span style=\\"color: #6F42C1\\">extends:</span><span style=\\"color: #032F62\\"> [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">&#39;eslint:recommended&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">&#39;plugin:@typescript-eslint/recommended&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">&#39;plugin:react-hooks/recommended&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">//</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #032F62\\">. 接入 prettier 的规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">&quot;prettier&quot;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">&quot;plugin:prettier/recommended&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  </span><span style=\\"color: #6F42C1\\">ignorePatterns:</span><span style=\\"color: #032F62\\"> [&#39;dist&#39;, &#39;.eslintrc.cjs&#39;],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  </span><span style=\\"color: #6F42C1\\">parser:</span><span style=\\"color: #032F62\\"> &#39;@typescript-eslint/parser&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  </span><span style=\\"color: #6F42C1\\">parserOptions:</span><span style=\\"color: #032F62\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">ecmaFeatures:</span><span style=\\"color: #032F62\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">      </span><span style=\\"color: #6F42C1\\">jsx:</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">ecmaVersion:</span><span style=\\"color: #032F62\\"> &quot;latest&quot;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">sourceType:</span><span style=\\"color: #032F62\\"> &quot;module&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  </span><span style=\\"color: #6F42C1\\">plugins:</span><span style=\\"color: #032F62\\"> [&#39;react-refresh&#39;, &quot;@typescript-eslint&quot;, &quot;prettier&quot;],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  </span><span style=\\"color: #6F42C1\\">rules:</span><span style=\\"color: #032F62\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">//</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">3</span><span style=\\"color: #032F62\\">. 注意要加上这一句，开启 prettier 自动修复的功能</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">&quot;prettier/prettier&quot;</span><span style=\\"color: #005CC5\\">:</span><span style=\\"color: #032F62\\"> &quot;error&quot;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">quotes:</span><span style=\\"color: #032F62\\"> [&quot;error&quot;, &quot;single&quot;],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">semi:</span><span style=\\"color: #032F62\\"> [&quot;error&quot;, &quot;always&quot;],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">&quot;react/react-in-jsx-scope&quot;</span><span style=\\"color: #005CC5\\">:</span><span style=\\"color: #032F62\\"> &quot;off&quot;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    </span><span style=\\"color: #6F42C1\\">&#39;react-refresh/only-export-components&#39;</span><span style=\\"color: #005CC5\\">:</span><span style=\\"color: #032F62\\"> [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">      </span><span style=\\"color: #6F42C1\\">&#39;warn&#39;,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">      { </span><span style=\\"color: #6F42C1\\">allowConstantExport:</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #032F62\\"> },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">    ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #032F62\\">}</span></span></code></pre>\\n</div><ul>\\n<li>定义一个脚本</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">&quot;scripts&quot;</span><span style=\\"color: #E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 省略已有 script</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&quot;lint&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;eslint --ext .js,.jsx,.ts,.tsx --fix --quiet ./src&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">&quot;scripts&quot;</span><span style=\\"color: #24292E\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 省略已有 script</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&quot;lint&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;eslint --ext .js,.jsx,.ts,.tsx --fix --quiet ./src&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div><ul>\\n<li>样式规范: stylelint</li>\\n</ul>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">pnpm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">i</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">stylelint</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">stylelint-prettier</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">stylelint-config-prettier</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">stylelint-config-recess-order</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">stylelint-config-standard</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">stylelint-config-standard-scss</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-D</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">pnpm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">i</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">stylelint</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">stylelint-prettier</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">stylelint-config-prettier</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">stylelint-config-recess-order</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">stylelint-config-standard</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">stylelint-config-standard-scss</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-D</span></span></code></pre>\\n</div><div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// .stylelintrc.js</span></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">module</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #79B8FF\\">exports</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 注册 stylelint 的 prettier 插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  plugins: [</span><span style=\\"color: #9ECBFF\\">&#39;stylelint-prettier&#39;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 继承一系列规则集合</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  extends: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// standard 规则集合</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-config-standard&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// standard 规则集合的 scss 版本</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-config-standard-scss&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 样式属性顺序规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-config-recess-order&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 接入 Prettier 规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-config-prettier&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-prettier/recommended&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 配置 rules</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  rules: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 开启 Prettier 自动格式化功能</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;prettier/prettier&#39;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">};</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// .stylelintrc.js</span></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">module</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #005CC5\\">exports</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 注册 stylelint 的 prettier 插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  plugins: [</span><span style=\\"color: #032F62\\">&#39;stylelint-prettier&#39;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 继承一系列规则集合</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  extends: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// standard 规则集合</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-config-standard&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// standard 规则集合的 scss 版本</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-config-standard-scss&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 样式属性顺序规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-config-recess-order&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 接入 Prettier 规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-config-prettier&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-prettier/recommended&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 配置 rules</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  rules: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 开启 Prettier 自动格式化功能</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;prettier/prettier&#39;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">};</span></span></code></pre>\\n</div><div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// .stylelintrc.cjs</span></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">module</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #79B8FF\\">exports</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 注册 stylelint 的 prettier 插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  plugins: [</span><span style=\\"color: #9ECBFF\\">&#39;stylelint-prettier&#39;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 继承一系列规则集合</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  extends: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// standard 规则集合</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-config-standard&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// standard 规则集合的 scss 版本</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-config-standard-scss&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 样式属性顺序规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-config-recess-order&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 接入 Prettier 规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-config-prettier&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;stylelint-prettier/recommended&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 配置 rules</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  rules: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 开启 Prettier 自动格式化功能</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&#39;prettier/prettier&#39;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">};</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// .stylelintrc.cjs</span></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">module</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #005CC5\\">exports</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 注册 stylelint 的 prettier 插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  plugins: [</span><span style=\\"color: #032F62\\">&#39;stylelint-prettier&#39;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 继承一系列规则集合</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  extends: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// standard 规则集合</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-config-standard&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// standard 规则集合的 scss 版本</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-config-standard-scss&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 样式属性顺序规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-config-recess-order&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 接入 Prettier 规则</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-config-prettier&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;stylelint-prettier/recommended&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 配置 rules</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  rules: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 开启 Prettier 自动格式化功能</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&#39;prettier/prettier&#39;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">};</span></span></code></pre>\\n</div><div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">&quot;scripts&quot;</span><span style=\\"color: #E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 整合 lint 命令</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&quot;lint&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;npm run lint:script &amp;&amp; npm run lint:style&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// stylelint 命令</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&quot;lint:style&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;stylelint --fix </span><span style=\\"color: #79B8FF\\">\\\\&quot;</span><span style=\\"color: #9ECBFF\\">src/**/*.{css,scss}</span><span style=\\"color: #79B8FF\\">\\\\&quot;</span><span style=\\"color: #9ECBFF\\">&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">&quot;scripts&quot;</span><span style=\\"color: #24292E\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 整合 lint 命令</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&quot;lint&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;npm run lint:script &amp;&amp; npm run lint:style&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// stylelint 命令</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&quot;lint:style&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;stylelint --fix </span><span style=\\"color: #005CC5\\">\\\\&quot;</span><span style=\\"color: #032F62\\">src/**/*.{css,scss}</span><span style=\\"color: #005CC5\\">\\\\&quot;</span><span style=\\"color: #032F62\\">&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div><h3 id=\\"husky-lint-staged-的-git-提交工作流集成\\" tabindex=\\"-1\\">Husky + lint-staged 的 Git 提交工作流集成 <a class=\\"header-anchor\\" href=\\"#husky-lint-staged-的-git-提交工作流集成\\" aria-label=\\"Permalink to &quot;Husky + lint-staged 的 Git 提交工作流集成&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>初始化 Husky: ,并将 husky install 作为项目启动前脚本</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">pnpm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">i</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">husky</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-D</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 初始化</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">npx</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">husky</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">install</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">npx</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">husky</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">add</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">.husky/pre-commit</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&quot;npm run lint&quot;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">pnpm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">i</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">husky</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-D</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 初始化</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">npx</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">husky</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">install</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">npx</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">husky</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">add</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">.husky/pre-commit</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&quot;npm run lint&quot;</span></span></code></pre>\\n</div><ul>\\n<li>lint-staged： 就是用来解决上述全量扫描问题的，可以实现只对存入暂存区的文件进行 Lint 检查，大大提高了提交代码的效率。首先，让我们安装一下对应的 npm 包:</li>\\n</ul>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">pnpm i -D lint-staged</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">pnpm i -D lint-staged</span></span></code></pre>\\n</div><ul>\\n<li>package.json</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">&quot;lint-staged&quot;</span><span style=\\"color: #E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&quot;**/*.{js,jsx,tsx,ts}&quot;</span><span style=\\"color: #E1E4E8\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;npm run lint:script&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;git add .&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #9ECBFF\\">&quot;**/*.{scss}&quot;</span><span style=\\"color: #E1E4E8\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;npm run lint:style&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;git add .&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    ]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 需要在 Husky 中应用lint-stage，回到.husky/pre-commit脚本中，将原来的npm run lint换成如下脚本</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">npx </span><span style=\\"color: #F97583\\">--</span><span style=\\"color: #E1E4E8\\">no </span><span style=\\"color: #F97583\\">--</span><span style=\\"color: #E1E4E8\\"> lint</span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #E1E4E8\\">staged</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">&quot;lint-staged&quot;</span><span style=\\"color: #24292E\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&quot;**/*.{js,jsx,tsx,ts}&quot;</span><span style=\\"color: #24292E\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;npm run lint:script&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;git add .&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    ],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #032F62\\">&quot;**/*.{scss}&quot;</span><span style=\\"color: #24292E\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;npm run lint:style&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;git add .&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    ]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 需要在 Husky 中应用lint-stage，回到.husky/pre-commit脚本中，将原来的npm run lint换成如下脚本</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">npx </span><span style=\\"color: #D73A49\\">--</span><span style=\\"color: #24292E\\">no </span><span style=\\"color: #D73A49\\">--</span><span style=\\"color: #24292E\\"> lint</span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #24292E\\">staged</span></span></code></pre>\\n</div><h3 id=\\"规范话-commit-信息\\" tabindex=\\"-1\\">规范话 commit 信息 <a class=\\"header-anchor\\" href=\\"#规范话-commit-信息\\" aria-label=\\"Permalink to &quot;规范话 commit 信息&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">pnpm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">i</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">commitlint</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">@commitlint/cli</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">@commitlint/config-conventional</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-D</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">pnpm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">i</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">commitlint</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">@commitlint/cli</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">@commitlint/config-conventional</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-D</span></span></code></pre>\\n</div><div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// .commitlintrc.cjs</span></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">module</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #79B8FF\\">exports</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  extends: [</span><span style=\\"color: #9ECBFF\\">&#39;@commitlint/config-conventional&#39;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">};</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// .commitlintrc.cjs</span></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">module</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #005CC5\\">exports</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  extends: [</span><span style=\\"color: #032F62\\">&#39;@commitlint/config-conventional&#39;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">};</span></span></code></pre>\\n</div><ul>\\n<li>常用的 type 值包括如下:</li>\\n</ul>\\n<ul>\\n<li>feat: 添加新功能。</li>\\n<li>fix: 修复 Bug。</li>\\n<li>chore: 一些不影响功能的更改。</li>\\n<li>docs: 专指文档的修改。</li>\\n<li>perf: 性能方面的优化。</li>\\n<li>refactor: 代码重构。</li>\\n<li>test: 添加一些测试代码等等。</li>\\n</ul>\\n<h4 id=\\"我们将-commitlint-的功能集成到-husky-的钩子当中\\" tabindex=\\"-1\\">我们将 commitlint 的功能集成到 Husky 的钩子当中 <a class=\\"header-anchor\\" href=\\"#我们将-commitlint-的功能集成到-husky-的钩子当中\\" aria-label=\\"Permalink to &quot;我们将 commitlint 的功能集成到 Husky 的钩子当中&quot;\\">&ZeroWidthSpace;</a></h4>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">npx husky add .husky/commit-msg &quot;npx --no-install commitlint -e $HUSKY_GIT_PARAMS&quot;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">npx husky add .husky/commit-msg &quot;npx --no-install commitlint -e $HUSKY_GIT_PARAMS&quot;</span></span></code></pre>\\n</div><h2 id=\\"三、静态资源的处理\\" tabindex=\\"-1\\">三、静态资源的处理 <a class=\\"header-anchor\\" href=\\"#三、静态资源的处理\\" aria-label=\\"Permalink to &quot;三、静态资源的处理&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"问题\\" tabindex=\\"-1\\">问题 <a class=\\"header-anchor\\" href=\\"#问题\\" aria-label=\\"Permalink to &quot;问题&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>\\n<p>静态资源解析并加载为一个 ES 模块的</p>\\n</li>\\n<li>\\n<p>生产环境下我们还需要考虑静态资源的部署问题、体积问题、网络性能问题</p>\\n</li>\\n<li>\\n<p>部署域名怎么配置？</p>\\n</li>\\n<li>\\n<p>资源打包成单文件还是作为 Base64 格式内联?</p>\\n</li>\\n<li>\\n<p>图片太大了怎么压缩？</p>\\n</li>\\n<li>\\n<p>svg 请求数量太多了怎么优化？</p>\\n</li>\\n</ul>\\n<h3 id=\\"三种场景\\" tabindex=\\"-1\\">三种场景 <a class=\\"header-anchor\\" href=\\"#三种场景\\" aria-label=\\"Permalink to &quot;三种场景&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// html</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">img</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">src</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #9ECBFF\\">&quot;../../assets/a.png&quot;</span><span style=\\"color: #E1E4E8\\">&gt;&lt;/</span><span style=\\"color: #85E89D\\">img</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// css</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">background</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #B392F0\\">url</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;../../assets/b.png&#39;</span><span style=\\"color: #E1E4E8\\">) norepeat;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// js</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">document.</span><span style=\\"color: #B392F0\\">getElementById</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;hero-img&#39;</span><span style=\\"color: #E1E4E8\\">).src </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;../../assets/c.png&#39;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// html</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">img</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">src</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #032F62\\">&quot;../../assets/a.png&quot;</span><span style=\\"color: #24292E\\">&gt;&lt;/</span><span style=\\"color: #22863A\\">img</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// css</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">background</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #6F42C1\\">url</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;../../assets/b.png&#39;</span><span style=\\"color: #24292E\\">) norepeat;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// js</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">document.</span><span style=\\"color: #6F42C1\\">getElementById</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;hero-img&#39;</span><span style=\\"color: #24292E\\">).src </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;../../assets/c.png&#39;</span></span></code></pre>\\n</div><h3 id=\\"svg-加载\\" tabindex=\\"-1\\">svg 加载 <a class=\\"header-anchor\\" href=\\"#svg-加载\\" aria-label=\\"Permalink to &quot;svg 加载&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>Vue2 项目中可以使用 vite-plugin-vue2-svg 插件。</li>\\n<li>Vue3 项目中可以引入 vite-svg-loader。</li>\\n<li>React 项目使用 vite-plugin-svgr 插件。</li>\\n</ul>\\n<h3 id=\\"图片压缩\\" tabindex=\\"-1\\">图片压缩 <a class=\\"header-anchor\\" href=\\"#图片压缩\\" aria-label=\\"Permalink to &quot;图片压缩&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">pnpm i vite-plugin-imagemin -D</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">pnpm i vite-plugin-imagemin -D</span></span></code></pre>\\n</div>","frontmatter":{"title":"vite前端工程化之路","author":"power","description":"面临几个问题：1、模块化需求 2、语法转译 3、产物质量 4、开发效率","date":"2023-10-08T11:34:19.000Z","link":"./frontend/Engineering","tags":["源码"]},"excerpt":"","url":"/frontend/Engineering.html"},{"src":"---\\r\\ntitle: 前端相关\\r\\nauthor: power\\r\\ndescription: \'记录自己踩过的坑\'\\r\\ndate: 2023-10-08 11:34:19\\r\\nlink: ./pic/Frontend.md\\r\\ntags:\\r\\n  - 问题\\r\\n---\\r\\n\\r\\n# warning Delete `␍` prettier/prettier（eslint 配置的一些问题）\\r\\n\\r\\n- 在 window 系统中，clone 代码下来，会自动把换行符 LF(linefeed character) 转换成回车符 CRLF(carriage-return character)。这时候我们本地的代码都是回车符。\\r\\n\\r\\n```sh\\r\\nnpm run lint\\r\\n# 可以使用git执行以下命令关掉自动转化（git默认是打开的）\\r\\ngit config --global core.autocrlf false\\r\\n```\\r\\n","html":"<h1 id=\\"warning-delete-␍-prettier-prettier-eslint-配置的一些问题\\" tabindex=\\"-1\\">warning Delete <code>␍</code> prettier/prettier（eslint 配置的一些问题） <a class=\\"header-anchor\\" href=\\"#warning-delete-␍-prettier-prettier-eslint-配置的一些问题\\" aria-label=\\"Permalink to &quot;warning Delete `␍` prettier/prettier（eslint 配置的一些问题）&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>在 window 系统中，clone 代码下来，会自动把换行符 LF(linefeed character) 转换成回车符 CRLF(carriage-return character)。这时候我们本地的代码都是回车符。</li>\\n</ul>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">npm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">run</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">lint</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 可以使用git执行以下命令关掉自动转化（git默认是打开的）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">config</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--global</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">core.autocrlf</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">false</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">npm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">run</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">lint</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 可以使用git执行以下命令关掉自动转化（git默认是打开的）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">config</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--global</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">core.autocrlf</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">false</span></span></code></pre>\\n</div>","frontmatter":{"title":"前端相关","author":"power","description":"记录自己踩过的坑","date":"2023-10-08T11:34:19.000Z","link":"./pic/Frontend.md","tags":["问题"]},"excerpt":"","url":"/pit/Frontend.html"},{"src":"---\\r\\ntitle: 问题记录\\r\\nauthor: power\\r\\ndescription: \'记录自己踩过的坑\'\\r\\ndate: 2023-10-08 11:34:19\\r\\nlink: ./pic/Problem\\r\\ntags:\\r\\n  - 问题\\r\\n---\\r\\n\\r\\n# npm 设置代理后无法下载\\r\\n\\r\\n- request to https://registry.npmjs.org/@commitlint/lint/-/lint-17.7.0.tgz failed, reason: connect ETIMEDOUT\\r\\n  2606:4700::6810:1b22:443\\r\\n\\r\\n```sh\\r\\n# 1126是代理端口\\r\\nnpm config set proxy=http://127.0.0.1:1126\\r\\nnpm config set https-proxy http://127.0.0.1:1126\\r\\n\\r\\n```\\r\\n\\r\\n# npm 更换淘宝源\\r\\n\\r\\n- tip：新的 Web 站点：https://npmmirror.com，Registry Endpoint：https://registry.npmmirror.com。 http://npm.taobao.org 和 http://registry.npm.taobao.org 将在 2022.06.30 号正式下线和停止 DNS 解析。\\r\\n\\r\\n```sh\\r\\nnpm config set registry https://registry.npmmirror.com\\r\\n\\r\\n```\\r\\n","html":"<h1 id=\\"npm-设置代理后无法下载\\" tabindex=\\"-1\\">npm 设置代理后无法下载 <a class=\\"header-anchor\\" href=\\"#npm-设置代理后无法下载\\" aria-label=\\"Permalink to &quot;npm 设置代理后无法下载&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>request to <a href=\\"https://registry.npmjs.org/@commitlint/lint/-/lint-17.7.0.tgz\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://registry.npmjs.org/@commitlint/lint/-/lint-17.7.0.tgz</a> failed, reason: connect ETIMEDOUT\\n2606:4700::6810:1b22:443</li>\\n</ul>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 1126是代理端口</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">npm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">config</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">set</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">proxy=http://127.0.0.1:1126</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">npm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">config</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">set</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">https-proxy</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">http://127.0.0.1:1126</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 1126是代理端口</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">npm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">config</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">set</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">proxy=http://127.0.0.1:1126</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">npm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">config</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">set</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">https-proxy</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">http://127.0.0.1:1126</span></span></code></pre>\\n</div><h1 id=\\"npm-更换淘宝源\\" tabindex=\\"-1\\">npm 更换淘宝源 <a class=\\"header-anchor\\" href=\\"#npm-更换淘宝源\\" aria-label=\\"Permalink to &quot;npm 更换淘宝源&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>tip：新的 Web 站点：<a href=\\"https://npmmirror.com\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://npmmirror.com</a>，Registry Endpoint：<a href=\\"https://registry.npmmirror.com\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://registry.npmmirror.com</a>。 <a href=\\"http://npm.taobao.org\\" target=\\"_blank\\" rel=\\"noreferrer\\">http://npm.taobao.org</a> 和 <a href=\\"http://registry.npm.taobao.org\\" target=\\"_blank\\" rel=\\"noreferrer\\">http://registry.npm.taobao.org</a> 将在 2022.06.30 号正式下线和停止 DNS 解析。</li>\\n</ul>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">npm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">config</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">set</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">registry</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">https://registry.npmmirror.com</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">npm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">config</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">set</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">registry</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">https://registry.npmmirror.com</span></span></code></pre>\\n</div>","frontmatter":{"title":"问题记录","author":"power","description":"记录自己踩过的坑","date":"2023-10-08T11:34:19.000Z","link":"./pic/Problem","tags":["问题"]},"excerpt":"","url":"/pit/Problem.html"},{"src":"---\\ntitle: window命令\\nauthor: power\\ndescription: window命令\\ndate: 2023-10-08 11:34:19\\nlink: ./frontend/Engineering\\ntags:\\n  - 源码\\n---\\n\\n## cmd\\n\\n- 查看硬件: dxdiag\\n","html":"<h2 id=\\"cmd\\" tabindex=\\"-1\\">cmd <a class=\\"header-anchor\\" href=\\"#cmd\\" aria-label=\\"Permalink to &quot;cmd&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li>查看硬件: dxdiag</li>\\n</ul>\\n","frontmatter":{"title":"window命令","author":"power","description":"window命令","date":"2023-10-08T11:34:19.000Z","link":"./frontend/Engineering","tags":["源码"]},"excerpt":"","url":"/window/Command.html"},{"src":"---\\ntitle: git基本操作\\nauthor: power\\ndescription:\\ndate: 2023-10-07 10:35:03\\nlink: ./engineering/Git.md\\ntags:\\n  - 工程\\n---\\n\\n# {{ $frontmatter.title }}\\n\\n{{ $frontmatter.description }}\\n\\n- ⼯作区(Working Directory)、缓存区(Stage)、版本库(Repository)\\n\\n```shell\\n# 查看git状态\\ngit  status\\ngit log\\ngit log --oneline (常用简短日志)\\ngit reflog（全部提交记录）\\n\\n# 前进\\ngit add ./\\ngit commit -m \'\'\\n\\n# 回退\\ngit restore ./    # 工作区回退\\ngit checkout ./   # 暂存区回退工作区\\ngit reset HEAD^  # 仓库回退一个版本 仓库版本指针回退\\ngit reset --hard HEAD^ （回退一个个版本常用）\\ngit clean -xdf # 本地新增了一些文件 (并没有 git add 到暂存区)\\n\\n\\n# 暂存\\ngit stash  存储\\ngit stash pop  弹出\\n\\n# 分支\\ngit checkout -b \'new branch\'  # 新建并切换分支\\ngit checkout master  # 切换分支\\ngit merge master # 合并分支\\ngit merge --abort # 回退合并冲突\\ngit branch --delete topic # 删除分支\\n\\ngit merge --squash newBranch # 合并分支，提交一次log记录\\n\\ngit branch -vv # 查看远程分支对应情况\\ngit push -u <branch-name> <remote-name>\\n\\n\\ngit branch -d localBranchName // 删除本地分支\\n\\n\\ngit push origin --d remoteBranchName // 删除远程分支\\ngit ls-remote //查看远程分支\\n\\n\\n\\n# 标签\\ngit tag -a v1.0.0 -m \'v1.0.0\'\\ngit push --tag\\n\\n# 删除tag\\ngit tag -d v1.0.0\\ngit push origin :v1.0.0\\n# 查看远程版本\\ngit remote -v\\n\\n\\n```\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{ $frontmatter.title }} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{ $frontmatter.title }}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>{{ $frontmatter.description }}</p>\\n<ul>\\n<li>⼯作区(Working Directory)、缓存区(Stage)、版本库(Repository)</li>\\n</ul>\\n<div class=\\"language-shell vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 查看git状态</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">status</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">log</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">log</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--oneline</span><span style=\\"color: #E1E4E8\\"> (常用简短日志)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">reflog（全部提交记录）</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 前进</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">add</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">./</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">commit</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-m</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 回退</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">restore</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">./</span><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\"># 工作区回退</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">checkout</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">./</span><span style=\\"color: #E1E4E8\\">   </span><span style=\\"color: #6A737D\\"># 暂存区回退工作区</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">reset</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">HEAD^</span><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\"># 仓库回退一个版本 仓库版本指针回退</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">reset</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--hard</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">HEAD^</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">（回退一个个版本常用）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">clean</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-xdf</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\"># 本地新增了一些文件 (并没有 git add 到暂存区)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 暂存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">stash</span><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">存储</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">stash</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">pop</span><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">弹出</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">checkout</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-b</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;new branch&#39;</span><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\"># 新建并切换分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">checkout</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">master</span><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\"># 切换分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">merge</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">master</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\"># 合并分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">merge</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--abort</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\"># 回退合并冲突</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">branch</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--delete</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">topic</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\"># 删除分支</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">merge</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--squash</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">newBranch</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\"># 合并分支，提交一次log记录</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">branch</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-vv</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\"># 查看远程分支对应情况</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">push</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-u</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&lt;</span><span style=\\"color: #9ECBFF\\">branch-nam</span><span style=\\"color: #E1E4E8\\">e</span><span style=\\"color: #F97583\\">&gt;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&lt;</span><span style=\\"color: #9ECBFF\\">remote-nam</span><span style=\\"color: #E1E4E8\\">e</span><span style=\\"color: #F97583\\">&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">branch</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-d</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">localBranchName</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">//</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">删除本地分支</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">push</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">origin</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--d</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">remoteBranchName</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">//</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">删除远程分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">ls-remote</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">//查看远程分支</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 标签</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">tag</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-a</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">v1.0.0</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-m</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;v1.0.0&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">push</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--tag</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 删除tag</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">tag</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-d</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">v1.0.0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">push</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">origin</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">:v1.0.0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 查看远程版本</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">remote</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-v</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 查看git状态</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">status</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">log</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">log</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--oneline</span><span style=\\"color: #24292E\\"> (常用简短日志)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">reflog（全部提交记录）</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 前进</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">add</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">./</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">commit</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-m</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 回退</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">restore</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">./</span><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\"># 工作区回退</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">checkout</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">./</span><span style=\\"color: #24292E\\">   </span><span style=\\"color: #6A737D\\"># 暂存区回退工作区</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">reset</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">HEAD^</span><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\"># 仓库回退一个版本 仓库版本指针回退</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">reset</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--hard</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">HEAD^</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">（回退一个个版本常用）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">clean</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-xdf</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\"># 本地新增了一些文件 (并没有 git add 到暂存区)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 暂存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">stash</span><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">存储</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">stash</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">pop</span><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">弹出</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">checkout</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-b</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;new branch&#39;</span><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\"># 新建并切换分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">checkout</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">master</span><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\"># 切换分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">merge</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">master</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\"># 合并分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">merge</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--abort</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\"># 回退合并冲突</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">branch</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--delete</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">topic</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\"># 删除分支</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">merge</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--squash</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">newBranch</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\"># 合并分支，提交一次log记录</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">branch</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-vv</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\"># 查看远程分支对应情况</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">push</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-u</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&lt;</span><span style=\\"color: #032F62\\">branch-nam</span><span style=\\"color: #24292E\\">e</span><span style=\\"color: #D73A49\\">&gt;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&lt;</span><span style=\\"color: #032F62\\">remote-nam</span><span style=\\"color: #24292E\\">e</span><span style=\\"color: #D73A49\\">&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">branch</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-d</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">localBranchName</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">//</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">删除本地分支</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">push</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">origin</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--d</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">remoteBranchName</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">//</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">删除远程分支</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">ls-remote</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">//查看远程分支</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 标签</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">tag</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-a</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">v1.0.0</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-m</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;v1.0.0&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">push</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--tag</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 删除tag</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">tag</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-d</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">v1.0.0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">push</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">origin</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">:v1.0.0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 查看远程版本</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">remote</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-v</span></span></code></pre>\\n</div>","frontmatter":{"title":"git基本操作","author":"power","description":null,"date":"2023-10-07T10:35:03.000Z","link":"./engineering/Git.md","tags":["工程"]},"excerpt":"","url":"/engineering/Git.html"},{"src":"---\\r\\ntitle: vscode调试\\r\\nauthor: power\\r\\ndescription: \'记录vscode配置\'\\r\\ndate: 2023-09-27 08:38:28\\r\\nlink: ./mac/VscodeDebugger\\r\\ntags:\\r\\n  - mac\\r\\n---\\r\\n\\r\\n# {{$frontmatter.title}}\\r\\n\\r\\n- {{$frontmatter.description}}\\r\\n\\r\\n# 调试 nest\\r\\n\\r\\n```js\\r\\n\\"configurations\\": [\\r\\n    {\\r\\n      \\"name\\": \\"nest debug\\",\\r\\n      \\"request\\": \\"launch\\",\\r\\n      \\"runtimeArgs\\": [\\"run-script\\", \\"start:dev\\"],\\r\\n      \\"runtimeExecutable\\": \\"npm\\",\\r\\n      \\"skipFiles\\": [\\"<node_internals>/**\\"],\\r\\n      \\"type\\": \\"node\\",\\r\\n      \\"console\\": \\"integratedTerminal\\"\\r\\n    }\\r\\n  ]\\r\\n```\\r\\n\\r\\n# 调试 网页\\r\\n\\r\\n```js\\r\\n {\\r\\n      \\"name\\": \\"Launch Chrome\\",\\r\\n      \\"request\\": \\"launch\\",\\r\\n      \\"type\\": \\"chrome\\",\\r\\n      \\"url\\": \\"http://localhost:5173\\",\\r\\n      \\"webRoot\\": \\"${workspaceFolder}\\"\\r\\n}\\r\\n```\\r\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{$frontmatter.title}} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{$frontmatter.title}}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>{{$frontmatter.description}}</li>\\n</ul>\\n<h1 id=\\"调试-nest\\" tabindex=\\"-1\\">调试 nest <a class=\\"header-anchor\\" href=\\"#调试-nest\\" aria-label=\\"Permalink to &quot;调试 nest&quot;\\">&ZeroWidthSpace;</a></h1>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #9ECBFF\\">&quot;configurations&quot;</span><span style=\\"color: #E1E4E8\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;name&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;nest debug&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;request&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;launch&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;run-script&quot;</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #9ECBFF\\">&quot;start:dev&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;npm&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;skipFiles&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;type&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;node&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;console&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;integratedTerminal&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  ]</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #032F62\\">&quot;configurations&quot;</span><span style=\\"color: #24292E\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;name&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;nest debug&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;request&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;launch&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;run-script&quot;</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #032F62\\">&quot;start:dev&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;npm&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;skipFiles&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;type&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;node&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;console&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;integratedTerminal&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  ]</span></span></code></pre>\\n</div><h1 id=\\"调试-网页\\" tabindex=\\"-1\\">调试 网页 <a class=\\"header-anchor\\" href=\\"#调试-网页\\" aria-label=\\"Permalink to &quot;调试 网页&quot;\\">&ZeroWidthSpace;</a></h1>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;name&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;Launch Chrome&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;request&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;launch&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;type&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;chrome&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;url&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;http://localhost:5173&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;webRoot&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;${workspaceFolder}&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;name&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;Launch Chrome&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;request&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;launch&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;type&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;chrome&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;url&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;http://localhost:5173&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;webRoot&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;${workspaceFolder}&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div>","frontmatter":{"title":"vscode调试","author":"power","description":"记录vscode配置","date":"2023-09-27T08:38:28.000Z","link":"./mac/VscodeDebugger","tags":["mac"]},"excerpt":"","url":"/mac/VscodeDebugger.html"},{"src":"---\\ntitle: nest精髓\\nauthor: power\\ndescription:\\ndate: 2023-09-26 21:13:04\\nlink: ./backend/Nest\\ntags:\\n  - node\\n---\\n\\n# {{ $frontmatter.title }}\\n\\n{{ $frontmatter.description }}\\n\\n- 著名 nest 开源项目：[apiTabel](https://github.com/apitable/apitable)\\n- nestjs 架构 -- 适配器设计模式\\n\\n  ![nest架构图--适配器模式](./imgs/image1.png)\\n\\n# nest 的使用\\n\\n- 新建项目\\n\\n```sh\\n# 第一种：\\nnpx @nestjs/cli new [projectName]\\n# 第二种\\npnpm i -g @nestjs/cli\\nnest new [projectName]\\nnpm update -g @nestjs/cli\\n# 帮助\\nnest -h\\n```\\n\\n- nest new 快速创建项目\\n- nest generate resource modlule 快速生成 modlule 模块的 crud 代码\\n- nest build 使用 tsc 或者 webpack 构建代码\\n- nest start 启动开发服务，支持 watch 和调试\\n- nest info 打印 node、npm、nest 包的依赖版本\\n\\n# 5 种 http 数据传输方式\\n\\n```sh\\n# 1、 路径参数111\\nhttp://power17.xyz/1111\\n# 2、query（get）\\nhttp://power17.xyz?name=power&age=20\\n# 3、 form 表单提交数据\\napplication/x-www-form-urlencoded\\npost\\nhttp://power17.xyz\\nbody：name=power&age=20\\n# 4、form-data：content type 为 multipart/form-data（适合传输文件）\\n\\n# 5、json\\nform-urlencoded 需要对内容做 url encode，而 form data 则需要加很长的 boundary，两种方式都有一些缺点。 json没有\\nNest 解析 form data 使用 FilesInterceptor 的拦截器，用 @UseInterceptors 装饰器启用，然后通过 @UploadedFiles 来取。非文件的内容，同样是通过 @Body 来取\\n\\n\\n\\n```\\n\\n- Nest 解析 form data 使用 FilesInterceptor 的拦截器，用 @UseInterceptors 装饰器启用，然后通过 @UploadedFiles 来取。非文件的内容，同样是通过 @Body 来取。\\n\\n```js\\n// npm i -D @types/multer\\n\\nimport { AnyFilesInterceptor } from \'@nestjs/platform-express\';\\nimport { CreatePersonDto } from \'./dto/create-person.dto\';\\n\\n@Controller(\'api/person\')\\nexport class PersonController {\\n  @Post(\'file\')\\n  @UseInterceptors(\\n    AnyFilesInterceptor({\\n      dest: \'uploads/\',\\n    })\\n  )\\n  body2(@Body() createPersonDto: CreatePersonDto, @UploadedFiles() files: Array<Express.Multer.File>) {\\n    console.log(files);\\n    return `received: ${JSON.stringify(createPersonDto)}`;\\n  }\\n}\\n```\\n\\n## IOC：Inverse of Controll,DI:Dependency Injection\\n\\n## AOP （Aspect Oriented Programming\\n\\n![Alt text](./imgs/image.png)\\n\\n## 调试\\n\\n```sh\\n#  chrome://inspect/  9229\\nnode --inspect-brk index.js\\n```\\n\\n## nest 装饰器\\n\\n- @Module： 声明 Nest 模块\\n- @Controller：声明模块里的 controller\\n- @Injectable：声明模块里可以注入的 provider\\n- @Inject：通过 token 手动指定注入的 provider，token 可以是 class 或者 string\\n- @Optional：声明注入的 provider 是可选的，可以为空\\n- @Global：声明全局模块\\n- @Catch：声明 exception filter 处理的 exception 类型\\n- @UseFilters：路由级别使用 exception filter\\n- @UsePipes：路由级别使用 pipe\\n- @UseInterceptors：路由级别使用 interceptor\\n- @SetMetadata：在 class 或者 handler 上添加 metadata\\n- @Get、@Post、@Put、@Delete、@Patch、@Options、@Head：声明 get、post、put、 -delete、patch、options、head 的请求方式\\n- @Param：取出 url 中的参数，比如 /aaa/:id 中的 id\\n- @Query: 取出 query 部分的参数，比如 /aaa?name=xx 中的 name\\n- @Body：取出请求 body，通过 dto class 来接收\\n- @Headers：取出某个或全部请求头\\n- @Session：取出 session 对象，需要启用 express-session 中间件\\n- @HostParm： 取出 host 里的参数\\n- @Req、@Request：注入 request 对象\\n- @Res、@Response：注入 response 对象，一旦注入了这个 Nest 就不会把返回值作为响应了，除 - 非指定 passthrough 为 true\\n- @Next：注入调用下一个 handler 的 next 方法\\n- @HttpCode： 修改响应的状态码\\n- @Header：修改响应头\\n- @Redirect：指定重定向的 url\\n- @Render：指定渲染用的模版引擎\\n\\n## ngix 配置：nginxconfig.io\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{ $frontmatter.title }} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{ $frontmatter.title }}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>{{ $frontmatter.description }}</p>\\n<ul>\\n<li>\\n<p>著名 nest 开源项目：<a href=\\"https://github.com/apitable/apitable\\" target=\\"_blank\\" rel=\\"noreferrer\\">apiTabel</a></p>\\n</li>\\n<li>\\n<p>nestjs 架构 -- 适配器设计模式</p>\\n<p><img src=\\"./imgs/image1.png\\" alt=\\"nest架构图--适配器模式\\"></p>\\n</li>\\n</ul>\\n<h1 id=\\"nest-的使用\\" tabindex=\\"-1\\">nest 的使用 <a class=\\"header-anchor\\" href=\\"#nest-的使用\\" aria-label=\\"Permalink to &quot;nest 的使用&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>新建项目</li>\\n</ul>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 第一种：</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">npx</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">@nestjs/cli</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">new</span><span style=\\"color: #E1E4E8\\"> [projectName]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 第二种</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">pnpm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">i</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-g</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">@nestjs/cli</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">nest</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">new</span><span style=\\"color: #E1E4E8\\"> [projectName]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">npm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">update</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-g</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">@nestjs/cli</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 帮助</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">nest</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-h</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 第一种：</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">npx</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">@nestjs/cli</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">new</span><span style=\\"color: #24292E\\"> [projectName]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 第二种</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">pnpm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">i</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-g</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">@nestjs/cli</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">nest</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">new</span><span style=\\"color: #24292E\\"> [projectName]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">npm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">update</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-g</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">@nestjs/cli</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 帮助</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">nest</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-h</span></span></code></pre>\\n</div><ul>\\n<li>nest new 快速创建项目</li>\\n<li>nest generate resource modlule 快速生成 modlule 模块的 crud 代码</li>\\n<li>nest build 使用 tsc 或者 webpack 构建代码</li>\\n<li>nest start 启动开发服务，支持 watch 和调试</li>\\n<li>nest info 打印 node、npm、nest 包的依赖版本</li>\\n</ul>\\n<h1 id=\\"_5-种-http-数据传输方式\\" tabindex=\\"-1\\">5 种 http 数据传输方式 <a class=\\"header-anchor\\" href=\\"#_5-种-http-数据传输方式\\" aria-label=\\"Permalink to &quot;5 种 http 数据传输方式&quot;\\">&ZeroWidthSpace;</a></h1>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 1、 路径参数111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">http://power17.xyz/1111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 2、query（get）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">http://power17.xyz?name</span><span style=\\"color: #E1E4E8\\">=power&amp;age</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #79B8FF\\">20</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 3、 form 表单提交数据</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">application/x-www-form-urlencoded</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">post</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">http://power17.xyz</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">body：name</span><span style=\\"color: #E1E4E8\\">=power&amp;age</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #79B8FF\\">20</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 4、form-data：content type 为 multipart/form-data（适合传输文件）</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 5、json</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">form-urlencoded</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">需要对内容做</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">url</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">encode，而</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">form</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">data</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">则需要加很长的</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">boundary，两种方式都有一些缺点。</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">json没有</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">Nest</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">解析</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">form</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">data</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">使用</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">FilesInterceptor</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">的拦截器，用</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">@UseInterceptors</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">装饰器启用，然后通过</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">@UploadedFiles</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">来取。非文件的内容，同样是通过</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">@Body</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">来取</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 1、 路径参数111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">http://power17.xyz/1111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 2、query（get）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">http://power17.xyz?name</span><span style=\\"color: #24292E\\">=power&amp;age</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #005CC5\\">20</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 3、 form 表单提交数据</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">application/x-www-form-urlencoded</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">post</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">http://power17.xyz</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">body：name</span><span style=\\"color: #24292E\\">=power&amp;age</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #005CC5\\">20</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 4、form-data：content type 为 multipart/form-data（适合传输文件）</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 5、json</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">form-urlencoded</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">需要对内容做</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">url</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">encode，而</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">form</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">data</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">则需要加很长的</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">boundary，两种方式都有一些缺点。</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">json没有</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">Nest</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">解析</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">form</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">data</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">使用</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">FilesInterceptor</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">的拦截器，用</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">@UseInterceptors</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">装饰器启用，然后通过</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">@UploadedFiles</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">来取。非文件的内容，同样是通过</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">@Body</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">来取</span></span></code></pre>\\n</div><ul>\\n<li>Nest 解析 form data 使用 FilesInterceptor 的拦截器，用 @UseInterceptors 装饰器启用，然后通过 @UploadedFiles 来取。非文件的内容，同样是通过 @Body 来取。</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// npm i -D @types/multer</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">import</span><span style=\\"color: #E1E4E8\\"> { AnyFilesInterceptor } </span><span style=\\"color: #F97583\\">from</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;@nestjs/platform-express&#39;</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">import</span><span style=\\"color: #E1E4E8\\"> { CreatePersonDto } </span><span style=\\"color: #F97583\\">from</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;./dto/create-person.dto&#39;</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">@</span><span style=\\"color: #B392F0\\">Controller</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;api/person&#39;</span><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">export</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">class</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">PersonController</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  @</span><span style=\\"color: #B392F0\\">Post</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;file&#39;</span><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  @</span><span style=\\"color: #B392F0\\">UseInterceptors</span><span style=\\"color: #E1E4E8\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">AnyFilesInterceptor</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      dest: </span><span style=\\"color: #9ECBFF\\">&#39;uploads/&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  )</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">body2</span><span style=\\"color: #E1E4E8\\">(@</span><span style=\\"color: #B392F0\\">Body</span><span style=\\"color: #E1E4E8\\">() </span><span style=\\"color: #FFAB70\\">createPersonDto</span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">CreatePersonDto</span><span style=\\"color: #E1E4E8\\">, @</span><span style=\\"color: #B392F0\\">UploadedFiles</span><span style=\\"color: #E1E4E8\\">() </span><span style=\\"color: #FFAB70\\">files</span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Array</span><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #B392F0\\">Express</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">Multer</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">File</span><span style=\\"color: #E1E4E8\\">&gt;) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(files);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">`received: ${</span><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #9ECBFF\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #9ECBFF\\">(</span><span style=\\"color: #E1E4E8\\">createPersonDto</span><span style=\\"color: #9ECBFF\\">)</span><span style=\\"color: #9ECBFF\\">}`</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// npm i -D @types/multer</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">import</span><span style=\\"color: #24292E\\"> { AnyFilesInterceptor } </span><span style=\\"color: #D73A49\\">from</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;@nestjs/platform-express&#39;</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">import</span><span style=\\"color: #24292E\\"> { CreatePersonDto } </span><span style=\\"color: #D73A49\\">from</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;./dto/create-person.dto&#39;</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">@</span><span style=\\"color: #6F42C1\\">Controller</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;api/person&#39;</span><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">export</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">class</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">PersonController</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  @</span><span style=\\"color: #6F42C1\\">Post</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;file&#39;</span><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  @</span><span style=\\"color: #6F42C1\\">UseInterceptors</span><span style=\\"color: #24292E\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">AnyFilesInterceptor</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      dest: </span><span style=\\"color: #032F62\\">&#39;uploads/&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  )</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">body2</span><span style=\\"color: #24292E\\">(@</span><span style=\\"color: #6F42C1\\">Body</span><span style=\\"color: #24292E\\">() </span><span style=\\"color: #E36209\\">createPersonDto</span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">CreatePersonDto</span><span style=\\"color: #24292E\\">, @</span><span style=\\"color: #6F42C1\\">UploadedFiles</span><span style=\\"color: #24292E\\">() </span><span style=\\"color: #E36209\\">files</span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Array</span><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #6F42C1\\">Express</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">Multer</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">File</span><span style=\\"color: #24292E\\">&gt;) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(files);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">`received: ${</span><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #032F62\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #032F62\\">(</span><span style=\\"color: #24292E\\">createPersonDto</span><span style=\\"color: #032F62\\">)</span><span style=\\"color: #032F62\\">}`</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div><h2 id=\\"ioc-inverse-of-controll-di-dependency-injection\\" tabindex=\\"-1\\">IOC：Inverse of Controll,DI:Dependency Injection <a class=\\"header-anchor\\" href=\\"#ioc-inverse-of-controll-di-dependency-injection\\" aria-label=\\"Permalink to &quot;IOC：Inverse of Controll,DI:Dependency Injection&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h2 id=\\"aop-aspect-oriented-programming\\" tabindex=\\"-1\\">AOP （Aspect Oriented Programming <a class=\\"header-anchor\\" href=\\"#aop-aspect-oriented-programming\\" aria-label=\\"Permalink to &quot;AOP （Aspect Oriented Programming&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p><img src=\\"./imgs/image.png\\" alt=\\"Alt text\\"></p>\\n<h2 id=\\"调试\\" tabindex=\\"-1\\">调试 <a class=\\"header-anchor\\" href=\\"#调试\\" aria-label=\\"Permalink to &quot;调试&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">#  chrome://inspect/  9229</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">node</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--inspect-brk</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">index.js</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">#  chrome://inspect/  9229</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">node</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--inspect-brk</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">index.js</span></span></code></pre>\\n</div><h2 id=\\"nest-装饰器\\" tabindex=\\"-1\\">nest 装饰器 <a class=\\"header-anchor\\" href=\\"#nest-装饰器\\" aria-label=\\"Permalink to &quot;nest 装饰器&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li>@Module： 声明 Nest 模块</li>\\n<li>@Controller：声明模块里的 controller</li>\\n<li>@Injectable：声明模块里可以注入的 provider</li>\\n<li>@Inject：通过 token 手动指定注入的 provider，token 可以是 class 或者 string</li>\\n<li>@Optional：声明注入的 provider 是可选的，可以为空</li>\\n<li>@Global：声明全局模块</li>\\n<li>@Catch：声明 exception filter 处理的 exception 类型</li>\\n<li>@UseFilters：路由级别使用 exception filter</li>\\n<li>@UsePipes：路由级别使用 pipe</li>\\n<li>@UseInterceptors：路由级别使用 interceptor</li>\\n<li>@SetMetadata：在 class 或者 handler 上添加 metadata</li>\\n<li>@Get、@Post、@Put、@Delete、@Patch、@Options、@Head：声明 get、post、put、 -delete、patch、options、head 的请求方式</li>\\n<li>@Param：取出 url 中的参数，比如 /aaa/:id 中的 id</li>\\n<li>@Query: 取出 query 部分的参数，比如 /aaa?name=xx 中的 name</li>\\n<li>@Body：取出请求 body，通过 dto class 来接收</li>\\n<li>@Headers：取出某个或全部请求头</li>\\n<li>@Session：取出 session 对象，需要启用 express-session 中间件</li>\\n<li>@HostParm： 取出 host 里的参数</li>\\n<li>@Req、@Request：注入 request 对象</li>\\n<li>@Res、@Response：注入 response 对象，一旦注入了这个 Nest 就不会把返回值作为响应了，除 - 非指定 passthrough 为 true</li>\\n<li>@Next：注入调用下一个 handler 的 next 方法</li>\\n<li>@HttpCode： 修改响应的状态码</li>\\n<li>@Header：修改响应头</li>\\n<li>@Redirect：指定重定向的 url</li>\\n<li>@Render：指定渲染用的模版引擎</li>\\n</ul>\\n<h2 id=\\"ngix-配置-nginxconfig-io\\" tabindex=\\"-1\\">ngix 配置：nginxconfig.io <a class=\\"header-anchor\\" href=\\"#ngix-配置-nginxconfig-io\\" aria-label=\\"Permalink to &quot;ngix 配置：nginxconfig.io&quot;\\">&ZeroWidthSpace;</a></h2>\\n","frontmatter":{"title":"nest精髓","author":"power","description":null,"date":"2023-09-26T21:13:04.000Z","link":"./backend/Nest","tags":["node"]},"excerpt":"","url":"/backend/Nest.html"},{"src":"---\\ntitle: vite 源码解析（版本：5.0.0-beta.2）\\nauthor: power\\ndescription: 在 webpack 横行的时代，webpack 的影响力几乎统治了 web 前端，react，vue-cli 等等工具都借助于 webpack 构建。在使用过程中，Webpack 构建十几个页面几百个组件的应用的性能出现了严重下降，说句公道话，webpack 的性能其实是很好的，最大的问题是配置过于复杂，导致绝大多数人不能正确的配置导致性能下降。天下苦 webpack 久矣，在这个时候，尤大巧妙的利用 esbuild 和 rollup，借助浏览器原生的 esm 能力创造的 vite 横空出世。一旦体验过，就再也回不去了\\ndate: 2023-09-26 09:25:00\\nlink: ./frontend/Vite\\ntags:\\n  - 源码\\n---\\n\\n# {{$frontmatter.title}}\\n\\n- {{$frontmatter.description}}\\n\\n### -时间对比 1\\n\\n- Webpack：启动时间 = 初始化模块加载 + 编译服务端/客户端 bundle 时间 + Midway\\n- vite： 启动时间 = 更少的初始化模块加载 + Midway 启动时间\\n\\n### 问题：作为一个打包构建工具需要解决以下基本问题\\n\\n- 1、vite 如何为开发提供开发环境的\\n- 2、文件更改，vite 如何热更新\\n- 3、vite 如何进行打包的\\n\\n# 配置调试环境\\n\\n- 克隆 vite 源码\\n\\n```\\ncd packages/vite\\npnpm i\\nnpm run dev\\ncd playground/cli\\n```\\n\\n- vscode 配置\\n\\n```json\\n    {\\n      \\"name\\": \\"playground\\",\\n      \\"request\\": \\"launch\\",\\n      \\"runtimeArgs\\": [\\"run-script\\", \\"dev\\"],\\n      \\"runtimeExecutable\\": \\"npm\\",\\n      \\"console\\": \\"integratedTerminal\\",\\n      \\"skipFiles\\": [\\"<node_internals>/**\\"],\\n      \\"type\\": \\"node\\",\\n      \\"cwd\\": \\"${workspaceFolder}/vite/playground/cli\\"\\n    },\\n    {\\n      \\"name\\": \\"playground build\\",\\n      \\"request\\": \\"launch\\",\\n      \\"runtimeArgs\\": [\\"run-script\\", \\"build\\"],\\n      \\"runtimeExecutable\\": \\"npm\\",\\n      \\"console\\": \\"integratedTerminal\\",\\n      \\"skipFiles\\": [\\"<node_internals>/**\\"],\\n      \\"type\\": \\"node\\",\\n      \\"cwd\\": \\"${workspaceFolder}/vite/playground/cli\\"\\n    }\\n```\\n\\n# 开始\\n\\n1、第一个问题\\n\\n- 简单来说通过 nodejs 的 http 和 ws 库启动 http 和 socket 服务\\n\\n```js\\nexport async function _createServer(inlineConfig = {}, options) {\\n  // 解析配置\\n  const config = await resolveConfig(inlineConfig, \'serve\');\\n  const { root, server: serverConfig } = config;\\n  const httpsOptions = await resolveHttpsConfig(config.server.https);\\n  const { middlewareMode } = serverConfig;\\n  const resolvedWatchOptions = resolveChokidarOptions(config, {\\n    disableGlobbing: true,\\n    ...serverConfig.watch,\\n  });\\n  const middlewares = connect();\\n\\n  // 创建http和socket\\n  const httpServer = middlewareMode ? null : await resolveHttpServer(serverConfig, middlewares, httpsOptions);\\n  const ws = createWebSocketServer(httpServer, config, httpsOptions);\\n  if (httpServer) {\\n    setClientErrorHandler(httpServer, config.logger);\\n  }\\n}\\n\\nexport async function resolveHttpServer({ proxy }, app, httpsOptions) {\\n  if (!httpsOptions) {\\n    const { createServer } = await import(\'node:http\');\\n    return createServer(app);\\n  }\\n  //...\\n}\\nexport function createWebSocketServer(server, config, httpsOptions) {\\n  let wss;\\n  let wsHttpServer = undefined;\\n  const hmr = isObject(config.server.hmr) && config.server.hmr;\\n  const hmrServer = hmr && hmr.server;\\n  const hmrPort = hmr && hmr.port;\\n  // TODO: the main server port may not have been chosen yet as it may use the next available\\n  const portsAreCompatible = !hmrPort || hmrPort === config.server.port;\\n  const wsServer = hmrServer || (portsAreCompatible && server);\\n  let hmrServerWsListener;\\n  const customListeners = new Map();\\n  const clientsMap = new WeakMap();\\n  const port = hmrPort || 24678;\\n  const host = (hmr && hmr.host) || undefined;\\n  if (wsServer) {\\n    let hmrBase = config.base;\\n    const hmrPath = hmr ? hmr.path : undefined;\\n    if (hmrPath) {\\n      hmrBase = path.posix.join(hmrBase, hmrPath);\\n    }\\n    // 来自ws库\\n    wss = new WebSocketServerRaw({ noServer: true });\\n    hmrServerWsListener = (req, socket, head) => {\\n      if (req.headers[\'sec-websocket-protocol\'] === HMR_HEADER && req.url === hmrBase) {\\n        wss.handleUpgrade(req, socket, head, (ws) => {\\n          wss.emit(\'connection\', ws, req);\\n        });\\n      }\\n    };\\n    wsServer.on(\'upgrade\', hmrServerWsListener);\\n  }\\n}\\n```\\n\\n### 第二个问题，vite 如何实现热更新 HRM\\n\\n- 通过 chokidar 库监听\\n\\n```js\\n// chokidar监听文件变化\\nconst watcher = watchEnabled\\n  ? chokidar.watch(\\n      // config file dependencies and env file might be outside of root\\n      [root, ...config.configFileDependencies, config.envDir],\\n      resolvedWatchOptions\\n    )\\n  : createNoopWatcher(resolvedWatchOptions);\\n```\\n\\n- 通过 chokidar 库监听文件变化\\n\\n```js\\n// chokidar监听文件变化\\nconst watcher = watchEnabled\\n  ? chokidar.watch(\\n      // config file dependencies and env file might be outside of root\\n      [root, ...config.configFileDependencies, config.envDir],\\n      resolvedWatchOptions\\n    )\\n  : createNoopWatcher(resolvedWatchOptions);\\n```\\n\\n- 根据条件分别通过 fsEventsHandler 或者 nodeFsHandler 进行文件状态的监听, 分别是底层的 fs.watch 和 fs.watchFile 还有 mac 底层库 fsevents 来监听文件变化，通过 webSocket 推送给前端含路径信息\\n\\n```js\\n// Initialize with proper watcher.\\nif (opts.useFsEvents) {\\n  this._fsEventsHandler = new FsEventsHandler(this);\\n} else {\\n  this._nodeFsHandler = new NodeFsHandler(this);\\n}\\n\\n// 文件的增删改监听\\nwatcher.on(\'change\', async (file) => {\\n  file = normalizePath(file);\\n  // invalidate module graph cache on file change\\n  moduleGraph.onFileChange(file);\\n  await onHMRUpdate(file, false);\\n});\\nwatcher.on(\'add\', onFileAddUnlink);\\nwatcher.on(\'unlink\', onFileAddUnlink);\\n\\n// 利用socket推送更新内容\\nconfig.logger.info(colors.green(`hmr update `) + colors.dim([...new Set(updates.map((u) => u.path))].join(\', \')), {\\n  clear: !afterInvalidation,\\n  timestamp: true,\\n});\\nws.send({\\n  type: \'update\',\\n  updates,\\n});\\n```\\n\\n- 前端 header 插入@vite/client 脚本，通过监听 message 接收路径信息，vite 是把这个更新文件再请求一次。\\n  至此，整个更新结束\\n\\n```js\\nasync function fetchUpdate({ path, acceptedPath, timestamp, explicitImportRequired }) {\\n  const mod = hotModulesMap.get(path);\\n  if (!mod) {\\n    // In a code-splitting project,\\n    // it is common that the hot-updating module is not loaded yet.\\n    // https://github.com/vitejs/vite/issues/721\\n    return;\\n  }\\n  let fetchedModule;\\n  const isSelfUpdate = path === acceptedPath;\\n  // determine the qualified callbacks before we re-import the modules\\n  const qualifiedCallbacks = mod.callbacks.filter(({ deps }) => deps.includes(acceptedPath));\\n  if (isSelfUpdate || qualifiedCallbacks.length > 0) {\\n    const disposer = disposeMap.get(acceptedPath);\\n    if (disposer) await disposer(dataMap.get(acceptedPath));\\n    const [acceptedPathWithoutQuery, query] = acceptedPath.split(`?`);\\n    try {\\n      // 请求文件\\n      fetchedModule = await import(\\n        /* @vite-ignore */\\n        base + acceptedPathWithoutQuery.slice(1) + `?${explicitImportRequired ? \'import&\' : \'\'}t=${timestamp}${query ? `&${query}` : \'\'}`\\n      );\\n    } catch (e) {\\n      warnFailedFetch(e, acceptedPath);\\n    }\\n  }\\n  return () => {\\n    for (const { deps, fn } of qualifiedCallbacks) {\\n      // 更新\\n      fn(deps.map((dep) => (dep === acceptedPath ? fetchedModule : undefined)));\\n    }\\n    const loggedPath = isSelfUpdate ? path : `${acceptedPath} via ${path}`;\\n    console.debug(`[vite] hot updated: ${loggedPath}`);\\n  };\\n}\\n```\\n\\n# 第三个问题：vite 如何打包构建\\n\\n- 很简单，使用 rollup 打包，借助 rollup 生态\\n\\n```js\\n      const { watch } = await import(\'rollup\')\\n      const watcher = watch({\\n        ...rollupOptions,\\n        output: normalizedOutputs,\\n        watch: {\\n          ...config.build.watch,\\n          chokidar: resolvedChokidarOptions,\\n        },\\n      })\\n\\n      watcher.on(\'event\', (event) => {\\n        if (event.code === \'BUNDLE_START\') {\\n          config.logger.info(colors.cyan(`\\\\nbuild started...`))\\n          if (options.write) {\\n            prepareOutDir(outDirs, options.emptyOutDir, config)\\n          }\\n        } else if (event.code === \'BUNDLE_END\') {\\n          event.result.close()\\n          config.logger.info(colors.cyan(`built in ${event.duration}ms.`))\\n        } else if (event.code === \'ERROR\') {\\n          outputBuildError(event.error)\\n        }\\n      })\\n\\n      return watcher\\n    }\\n\\n    // write or generate files with rollup\\n    const { rollup } = await import(\'rollup\')\\n    bundle = await rollup(rollupOptions)\\n```\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{$frontmatter.title}} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{$frontmatter.title}}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>{{$frontmatter.description}}</li>\\n</ul>\\n<h3 id=\\"时间对比-1\\" tabindex=\\"-1\\">-时间对比 1 <a class=\\"header-anchor\\" href=\\"#时间对比-1\\" aria-label=\\"Permalink to &quot;-时间对比 1&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>Webpack：启动时间 = 初始化模块加载 + 编译服务端/客户端 bundle 时间 + Midway</li>\\n<li>vite： 启动时间 = 更少的初始化模块加载 + Midway 启动时间</li>\\n</ul>\\n<h3 id=\\"问题-作为一个打包构建工具需要解决以下基本问题\\" tabindex=\\"-1\\">问题：作为一个打包构建工具需要解决以下基本问题 <a class=\\"header-anchor\\" href=\\"#问题-作为一个打包构建工具需要解决以下基本问题\\" aria-label=\\"Permalink to &quot;问题：作为一个打包构建工具需要解决以下基本问题&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>1、vite 如何为开发提供开发环境的</li>\\n<li>2、文件更改，vite 如何热更新</li>\\n<li>3、vite 如何进行打包的</li>\\n</ul>\\n<h1 id=\\"配置调试环境\\" tabindex=\\"-1\\">配置调试环境 <a class=\\"header-anchor\\" href=\\"#配置调试环境\\" aria-label=\\"Permalink to &quot;配置调试环境&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>克隆 vite 源码</li>\\n</ul>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">cd packages/vite</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">pnpm i</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">npm run dev</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">cd playground/cli</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">cd packages/vite</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">pnpm i</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">npm run dev</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">cd playground/cli</span></span></code></pre>\\n</div><ul>\\n<li>vscode 配置</li>\\n</ul>\\n<div class=\\"language-json vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">json</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;name&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;playground&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;request&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;launch&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;run-script&quot;</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #9ECBFF\\">&quot;dev&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;npm&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;console&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;integratedTerminal&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;skipFiles&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;type&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;node&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;cwd&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;${workspaceFolder}/vite/playground/cli&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;name&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;playground build&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;request&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;launch&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;run-script&quot;</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #9ECBFF\\">&quot;build&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;npm&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;console&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;integratedTerminal&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;skipFiles&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;type&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;node&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">&quot;cwd&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;${workspaceFolder}/vite/playground/cli&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;name&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;playground&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;request&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;launch&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;run-script&quot;</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #032F62\\">&quot;dev&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;npm&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;console&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;integratedTerminal&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;skipFiles&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;type&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;node&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;cwd&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;${workspaceFolder}/vite/playground/cli&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;name&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;playground build&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;request&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;launch&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;run-script&quot;</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #032F62\\">&quot;build&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;npm&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;console&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;integratedTerminal&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;skipFiles&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;type&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;node&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">&quot;cwd&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;${workspaceFolder}/vite/playground/cli&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span></code></pre>\\n</div><h1 id=\\"开始\\" tabindex=\\"-1\\">开始 <a class=\\"header-anchor\\" href=\\"#开始\\" aria-label=\\"Permalink to &quot;开始&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>1、第一个问题</p>\\n<ul>\\n<li>简单来说通过 nodejs 的 http 和 ws 库启动 http 和 socket 服务</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">export</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">async</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">_createServer</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">inlineConfig</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {}, </span><span style=\\"color: #FFAB70\\">options</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 解析配置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">config</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">resolveConfig</span><span style=\\"color: #E1E4E8\\">(inlineConfig, </span><span style=\\"color: #9ECBFF\\">&#39;serve&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">root</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">server</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">serverConfig</span><span style=\\"color: #E1E4E8\\"> } </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> config;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">httpsOptions</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">resolveHttpsConfig</span><span style=\\"color: #E1E4E8\\">(config.server.https);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">middlewareMode</span><span style=\\"color: #E1E4E8\\"> } </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> serverConfig;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">resolvedWatchOptions</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">resolveChokidarOptions</span><span style=\\"color: #E1E4E8\\">(config, {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    disableGlobbing: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">...</span><span style=\\"color: #E1E4E8\\">serverConfig.watch,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">middlewares</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">connect</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 创建http和socket</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">httpServer</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> middlewareMode </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">resolveHttpServer</span><span style=\\"color: #E1E4E8\\">(serverConfig, middlewares, httpsOptions);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">ws</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">createWebSocketServer</span><span style=\\"color: #E1E4E8\\">(httpServer, config, httpsOptions);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (httpServer) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">setClientErrorHandler</span><span style=\\"color: #E1E4E8\\">(httpServer, config.logger);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">export</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">async</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">resolveHttpServer</span><span style=\\"color: #E1E4E8\\">({ </span><span style=\\"color: #FFAB70\\">proxy</span><span style=\\"color: #E1E4E8\\"> }, </span><span style=\\"color: #FFAB70\\">app</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">httpsOptions</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #F97583\\">!</span><span style=\\"color: #E1E4E8\\">httpsOptions) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">createServer</span><span style=\\"color: #E1E4E8\\"> } </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">import</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;node:http&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">createServer</span><span style=\\"color: #E1E4E8\\">(app);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">export</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">createWebSocketServer</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">server</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">config</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">httpsOptions</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> wss;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> wsHttpServer </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">undefined</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">hmr</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">isObject</span><span style=\\"color: #E1E4E8\\">(config.server.hmr) </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> config.server.hmr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">hmrServer</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> hmr </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> hmr.server;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">hmrPort</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> hmr </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> hmr.port;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// TODO: the main server port may not have been chosen yet as it may use the next available</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">portsAreCompatible</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">!</span><span style=\\"color: #E1E4E8\\">hmrPort </span><span style=\\"color: #F97583\\">||</span><span style=\\"color: #E1E4E8\\"> hmrPort </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> config.server.port;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">wsServer</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> hmrServer </span><span style=\\"color: #F97583\\">||</span><span style=\\"color: #E1E4E8\\"> (portsAreCompatible </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> server);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> hmrServerWsListener;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">customListeners</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Map</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">clientsMap</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">WeakMap</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">port</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> hmrPort </span><span style=\\"color: #F97583\\">||</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">24678</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">host</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> (hmr </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> hmr.host) </span><span style=\\"color: #F97583\\">||</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">undefined</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (wsServer) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> hmrBase </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> config.base;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">hmrPath</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> hmr </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> hmr.path </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">undefined</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (hmrPath) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      hmrBase </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> path.posix.</span><span style=\\"color: #B392F0\\">join</span><span style=\\"color: #E1E4E8\\">(hmrBase, hmrPath);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 来自ws库</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    wss </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">WebSocketServerRaw</span><span style=\\"color: #E1E4E8\\">({ noServer: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\"> });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">hmrServerWsListener</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #FFAB70\\">req</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">socket</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">head</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (req.headers[</span><span style=\\"color: #9ECBFF\\">&#39;sec-websocket-protocol&#39;</span><span style=\\"color: #E1E4E8\\">] </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">HMR_HEADER</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> req.url </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> hmrBase) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        wss.</span><span style=\\"color: #B392F0\\">handleUpgrade</span><span style=\\"color: #E1E4E8\\">(req, socket, head, (</span><span style=\\"color: #FFAB70\\">ws</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          wss.</span><span style=\\"color: #B392F0\\">emit</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;connection&#39;</span><span style=\\"color: #E1E4E8\\">, ws, req);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    wsServer.</span><span style=\\"color: #B392F0\\">on</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;upgrade&#39;</span><span style=\\"color: #E1E4E8\\">, hmrServerWsListener);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">export</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">async</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">_createServer</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">inlineConfig</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {}, </span><span style=\\"color: #E36209\\">options</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 解析配置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">config</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">resolveConfig</span><span style=\\"color: #24292E\\">(inlineConfig, </span><span style=\\"color: #032F62\\">&#39;serve&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">root</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">server</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">serverConfig</span><span style=\\"color: #24292E\\"> } </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> config;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">httpsOptions</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">resolveHttpsConfig</span><span style=\\"color: #24292E\\">(config.server.https);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">middlewareMode</span><span style=\\"color: #24292E\\"> } </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> serverConfig;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">resolvedWatchOptions</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">resolveChokidarOptions</span><span style=\\"color: #24292E\\">(config, {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    disableGlobbing: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">...</span><span style=\\"color: #24292E\\">serverConfig.watch,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">middlewares</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">connect</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 创建http和socket</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">httpServer</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> middlewareMode </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">resolveHttpServer</span><span style=\\"color: #24292E\\">(serverConfig, middlewares, httpsOptions);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">ws</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">createWebSocketServer</span><span style=\\"color: #24292E\\">(httpServer, config, httpsOptions);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (httpServer) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">setClientErrorHandler</span><span style=\\"color: #24292E\\">(httpServer, config.logger);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">export</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">async</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">resolveHttpServer</span><span style=\\"color: #24292E\\">({ </span><span style=\\"color: #E36209\\">proxy</span><span style=\\"color: #24292E\\"> }, </span><span style=\\"color: #E36209\\">app</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">httpsOptions</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #D73A49\\">!</span><span style=\\"color: #24292E\\">httpsOptions) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">createServer</span><span style=\\"color: #24292E\\"> } </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">import</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;node:http&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">createServer</span><span style=\\"color: #24292E\\">(app);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">export</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">createWebSocketServer</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">server</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">config</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">httpsOptions</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> wss;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> wsHttpServer </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">undefined</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">hmr</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">isObject</span><span style=\\"color: #24292E\\">(config.server.hmr) </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> config.server.hmr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">hmrServer</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> hmr </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> hmr.server;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">hmrPort</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> hmr </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> hmr.port;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// TODO: the main server port may not have been chosen yet as it may use the next available</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">portsAreCompatible</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">!</span><span style=\\"color: #24292E\\">hmrPort </span><span style=\\"color: #D73A49\\">||</span><span style=\\"color: #24292E\\"> hmrPort </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> config.server.port;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">wsServer</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> hmrServer </span><span style=\\"color: #D73A49\\">||</span><span style=\\"color: #24292E\\"> (portsAreCompatible </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> server);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> hmrServerWsListener;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">customListeners</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Map</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">clientsMap</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">WeakMap</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">port</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> hmrPort </span><span style=\\"color: #D73A49\\">||</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">24678</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">host</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> (hmr </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> hmr.host) </span><span style=\\"color: #D73A49\\">||</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">undefined</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (wsServer) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> hmrBase </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> config.base;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">hmrPath</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> hmr </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> hmr.path </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">undefined</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (hmrPath) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      hmrBase </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> path.posix.</span><span style=\\"color: #6F42C1\\">join</span><span style=\\"color: #24292E\\">(hmrBase, hmrPath);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 来自ws库</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    wss </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">WebSocketServerRaw</span><span style=\\"color: #24292E\\">({ noServer: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\"> });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">hmrServerWsListener</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #E36209\\">req</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">socket</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">head</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (req.headers[</span><span style=\\"color: #032F62\\">&#39;sec-websocket-protocol&#39;</span><span style=\\"color: #24292E\\">] </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">HMR_HEADER</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> req.url </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> hmrBase) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        wss.</span><span style=\\"color: #6F42C1\\">handleUpgrade</span><span style=\\"color: #24292E\\">(req, socket, head, (</span><span style=\\"color: #E36209\\">ws</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          wss.</span><span style=\\"color: #6F42C1\\">emit</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;connection&#39;</span><span style=\\"color: #24292E\\">, ws, req);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    wsServer.</span><span style=\\"color: #6F42C1\\">on</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;upgrade&#39;</span><span style=\\"color: #24292E\\">, hmrServerWsListener);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div><h3 id=\\"第二个问题-vite-如何实现热更新-hrm\\" tabindex=\\"-1\\">第二个问题，vite 如何实现热更新 HRM <a class=\\"header-anchor\\" href=\\"#第二个问题-vite-如何实现热更新-hrm\\" aria-label=\\"Permalink to &quot;第二个问题，vite 如何实现热更新 HRM&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>通过 chokidar 库监听</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// chokidar监听文件变化</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">watcher</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> watchEnabled</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> chokidar.</span><span style=\\"color: #B392F0\\">watch</span><span style=\\"color: #E1E4E8\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// config file dependencies and env file might be outside of root</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      [root, </span><span style=\\"color: #F97583\\">...</span><span style=\\"color: #E1E4E8\\">config.configFileDependencies, config.envDir],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      resolvedWatchOptions</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    )</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">createNoopWatcher</span><span style=\\"color: #E1E4E8\\">(resolvedWatchOptions);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// chokidar监听文件变化</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">watcher</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> watchEnabled</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> chokidar.</span><span style=\\"color: #6F42C1\\">watch</span><span style=\\"color: #24292E\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// config file dependencies and env file might be outside of root</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      [root, </span><span style=\\"color: #D73A49\\">...</span><span style=\\"color: #24292E\\">config.configFileDependencies, config.envDir],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      resolvedWatchOptions</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    )</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">createNoopWatcher</span><span style=\\"color: #24292E\\">(resolvedWatchOptions);</span></span></code></pre>\\n</div><ul>\\n<li>通过 chokidar 库监听文件变化</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// chokidar监听文件变化</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">watcher</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> watchEnabled</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> chokidar.</span><span style=\\"color: #B392F0\\">watch</span><span style=\\"color: #E1E4E8\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// config file dependencies and env file might be outside of root</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      [root, </span><span style=\\"color: #F97583\\">...</span><span style=\\"color: #E1E4E8\\">config.configFileDependencies, config.envDir],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      resolvedWatchOptions</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    )</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">createNoopWatcher</span><span style=\\"color: #E1E4E8\\">(resolvedWatchOptions);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// chokidar监听文件变化</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">watcher</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> watchEnabled</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> chokidar.</span><span style=\\"color: #6F42C1\\">watch</span><span style=\\"color: #24292E\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// config file dependencies and env file might be outside of root</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      [root, </span><span style=\\"color: #D73A49\\">...</span><span style=\\"color: #24292E\\">config.configFileDependencies, config.envDir],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      resolvedWatchOptions</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    )</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">createNoopWatcher</span><span style=\\"color: #24292E\\">(resolvedWatchOptions);</span></span></code></pre>\\n</div><ul>\\n<li>根据条件分别通过 fsEventsHandler 或者 nodeFsHandler 进行文件状态的监听, 分别是底层的 fs.watch 和 fs.watchFile 还有 mac 底层库 fsevents 来监听文件变化，通过 webSocket 推送给前端含路径信息</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// Initialize with proper watcher.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (opts.useFsEvents) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">._fsEventsHandler </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">FsEventsHandler</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">} </span><span style=\\"color: #F97583\\">else</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">._nodeFsHandler </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">NodeFsHandler</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 文件的增删改监听</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">watcher.</span><span style=\\"color: #B392F0\\">on</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;change&#39;</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #F97583\\">async</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #FFAB70\\">file</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  file </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">normalizePath</span><span style=\\"color: #E1E4E8\\">(file);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// invalidate module graph cache on file change</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  moduleGraph.</span><span style=\\"color: #B392F0\\">onFileChange</span><span style=\\"color: #E1E4E8\\">(file);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">onHMRUpdate</span><span style=\\"color: #E1E4E8\\">(file, </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">});</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">watcher.</span><span style=\\"color: #B392F0\\">on</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;add&#39;</span><span style=\\"color: #E1E4E8\\">, onFileAddUnlink);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">watcher.</span><span style=\\"color: #B392F0\\">on</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;unlink&#39;</span><span style=\\"color: #E1E4E8\\">, onFileAddUnlink);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 利用socket推送更新内容</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">config.logger.</span><span style=\\"color: #B392F0\\">info</span><span style=\\"color: #E1E4E8\\">(colors.</span><span style=\\"color: #B392F0\\">green</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">`hmr update `</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> colors.</span><span style=\\"color: #B392F0\\">dim</span><span style=\\"color: #E1E4E8\\">([</span><span style=\\"color: #F97583\\">...new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Set</span><span style=\\"color: #E1E4E8\\">(updates.</span><span style=\\"color: #B392F0\\">map</span><span style=\\"color: #E1E4E8\\">((</span><span style=\\"color: #FFAB70\\">u</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> u.path))].</span><span style=\\"color: #B392F0\\">join</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;, &#39;</span><span style=\\"color: #E1E4E8\\">)), {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  clear: </span><span style=\\"color: #F97583\\">!</span><span style=\\"color: #E1E4E8\\">afterInvalidation,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  timestamp: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">});</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">ws.</span><span style=\\"color: #B392F0\\">send</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  type: </span><span style=\\"color: #9ECBFF\\">&#39;update&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  updates,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">});</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// Initialize with proper watcher.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (opts.useFsEvents) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">._fsEventsHandler </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">FsEventsHandler</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">} </span><span style=\\"color: #D73A49\\">else</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">._nodeFsHandler </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">NodeFsHandler</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 文件的增删改监听</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">watcher.</span><span style=\\"color: #6F42C1\\">on</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;change&#39;</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #D73A49\\">async</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #E36209\\">file</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  file </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">normalizePath</span><span style=\\"color: #24292E\\">(file);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// invalidate module graph cache on file change</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  moduleGraph.</span><span style=\\"color: #6F42C1\\">onFileChange</span><span style=\\"color: #24292E\\">(file);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">onHMRUpdate</span><span style=\\"color: #24292E\\">(file, </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">});</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">watcher.</span><span style=\\"color: #6F42C1\\">on</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;add&#39;</span><span style=\\"color: #24292E\\">, onFileAddUnlink);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">watcher.</span><span style=\\"color: #6F42C1\\">on</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;unlink&#39;</span><span style=\\"color: #24292E\\">, onFileAddUnlink);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 利用socket推送更新内容</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">config.logger.</span><span style=\\"color: #6F42C1\\">info</span><span style=\\"color: #24292E\\">(colors.</span><span style=\\"color: #6F42C1\\">green</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">`hmr update `</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> colors.</span><span style=\\"color: #6F42C1\\">dim</span><span style=\\"color: #24292E\\">([</span><span style=\\"color: #D73A49\\">...new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Set</span><span style=\\"color: #24292E\\">(updates.</span><span style=\\"color: #6F42C1\\">map</span><span style=\\"color: #24292E\\">((</span><span style=\\"color: #E36209\\">u</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> u.path))].</span><span style=\\"color: #6F42C1\\">join</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;, &#39;</span><span style=\\"color: #24292E\\">)), {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  clear: </span><span style=\\"color: #D73A49\\">!</span><span style=\\"color: #24292E\\">afterInvalidation,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  timestamp: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">});</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">ws.</span><span style=\\"color: #6F42C1\\">send</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  type: </span><span style=\\"color: #032F62\\">&#39;update&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  updates,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">});</span></span></code></pre>\\n</div><ul>\\n<li>前端 header 插入@vite/client 脚本，通过监听 message 接收路径信息，vite 是把这个更新文件再请求一次。\\n至此，整个更新结束</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">async</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">fetchUpdate</span><span style=\\"color: #E1E4E8\\">({ </span><span style=\\"color: #FFAB70\\">path</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">acceptedPath</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">timestamp</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">explicitImportRequired</span><span style=\\"color: #E1E4E8\\"> }) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">mod</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> hotModulesMap.</span><span style=\\"color: #B392F0\\">get</span><span style=\\"color: #E1E4E8\\">(path);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #F97583\\">!</span><span style=\\"color: #E1E4E8\\">mod) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// In a code-splitting project,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// it is common that the hot-updating module is not loaded yet.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// https://github.com/vitejs/vite/issues/721</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> fetchedModule;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">isSelfUpdate</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> path </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> acceptedPath;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// determine the qualified callbacks before we re-import the modules</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">qualifiedCallbacks</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> mod.callbacks.</span><span style=\\"color: #B392F0\\">filter</span><span style=\\"color: #E1E4E8\\">(({ </span><span style=\\"color: #FFAB70\\">deps</span><span style=\\"color: #E1E4E8\\"> }) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> deps.</span><span style=\\"color: #B392F0\\">includes</span><span style=\\"color: #E1E4E8\\">(acceptedPath));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (isSelfUpdate </span><span style=\\"color: #F97583\\">||</span><span style=\\"color: #E1E4E8\\"> qualifiedCallbacks.</span><span style=\\"color: #79B8FF\\">length</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&gt;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">disposer</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> disposeMap.</span><span style=\\"color: #B392F0\\">get</span><span style=\\"color: #E1E4E8\\">(acceptedPath);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (disposer) </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">disposer</span><span style=\\"color: #E1E4E8\\">(dataMap.</span><span style=\\"color: #B392F0\\">get</span><span style=\\"color: #E1E4E8\\">(acceptedPath));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> [</span><span style=\\"color: #79B8FF\\">acceptedPathWithoutQuery</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">query</span><span style=\\"color: #E1E4E8\\">] </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> acceptedPath.</span><span style=\\"color: #B392F0\\">split</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">`?`</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">try</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// 请求文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      fetchedModule </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">import</span><span style=\\"color: #E1E4E8\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">/* @vite-ignore */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        base </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> acceptedPathWithoutQuery.</span><span style=\\"color: #B392F0\\">slice</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">`?${</span><span style=\\"color: #E1E4E8\\">explicitImportRequired</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #9ECBFF\\">&#39;import&amp;&#39;</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #9ECBFF\\">&#39;&#39;}t=${</span><span style=\\"color: #E1E4E8\\">timestamp</span><span style=\\"color: #9ECBFF\\">}${</span><span style=\\"color: #E1E4E8\\">query</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #9ECBFF\\">`&amp;${</span><span style=\\"color: #E1E4E8\\">query</span><span style=\\"color: #9ECBFF\\">}`</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #9ECBFF\\">&#39;&#39;}`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      );</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    } </span><span style=\\"color: #F97583\\">catch</span><span style=\\"color: #E1E4E8\\"> (e) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #B392F0\\">warnFailedFetch</span><span style=\\"color: #E1E4E8\\">(e, acceptedPath);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> () </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">for</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">deps</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">fn</span><span style=\\"color: #E1E4E8\\"> } </span><span style=\\"color: #F97583\\">of</span><span style=\\"color: #E1E4E8\\"> qualifiedCallbacks) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// 更新</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #B392F0\\">fn</span><span style=\\"color: #E1E4E8\\">(deps.</span><span style=\\"color: #B392F0\\">map</span><span style=\\"color: #E1E4E8\\">((</span><span style=\\"color: #FFAB70\\">dep</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> (dep </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> acceptedPath </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> fetchedModule </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">undefined</span><span style=\\"color: #E1E4E8\\">)));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">loggedPath</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> isSelfUpdate </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> path </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">`${</span><span style=\\"color: #E1E4E8\\">acceptedPath</span><span style=\\"color: #9ECBFF\\">} via ${</span><span style=\\"color: #E1E4E8\\">path</span><span style=\\"color: #9ECBFF\\">}`</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">debug</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">`[vite] hot updated: ${</span><span style=\\"color: #E1E4E8\\">loggedPath</span><span style=\\"color: #9ECBFF\\">}`</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">async</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">fetchUpdate</span><span style=\\"color: #24292E\\">({ </span><span style=\\"color: #E36209\\">path</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">acceptedPath</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">timestamp</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">explicitImportRequired</span><span style=\\"color: #24292E\\"> }) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">mod</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> hotModulesMap.</span><span style=\\"color: #6F42C1\\">get</span><span style=\\"color: #24292E\\">(path);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #D73A49\\">!</span><span style=\\"color: #24292E\\">mod) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// In a code-splitting project,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// it is common that the hot-updating module is not loaded yet.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// https://github.com/vitejs/vite/issues/721</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> fetchedModule;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">isSelfUpdate</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> path </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> acceptedPath;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// determine the qualified callbacks before we re-import the modules</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">qualifiedCallbacks</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> mod.callbacks.</span><span style=\\"color: #6F42C1\\">filter</span><span style=\\"color: #24292E\\">(({ </span><span style=\\"color: #E36209\\">deps</span><span style=\\"color: #24292E\\"> }) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> deps.</span><span style=\\"color: #6F42C1\\">includes</span><span style=\\"color: #24292E\\">(acceptedPath));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (isSelfUpdate </span><span style=\\"color: #D73A49\\">||</span><span style=\\"color: #24292E\\"> qualifiedCallbacks.</span><span style=\\"color: #005CC5\\">length</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&gt;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">disposer</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> disposeMap.</span><span style=\\"color: #6F42C1\\">get</span><span style=\\"color: #24292E\\">(acceptedPath);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (disposer) </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">disposer</span><span style=\\"color: #24292E\\">(dataMap.</span><span style=\\"color: #6F42C1\\">get</span><span style=\\"color: #24292E\\">(acceptedPath));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> [</span><span style=\\"color: #005CC5\\">acceptedPathWithoutQuery</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">query</span><span style=\\"color: #24292E\\">] </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> acceptedPath.</span><span style=\\"color: #6F42C1\\">split</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">`?`</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">try</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// 请求文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      fetchedModule </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">import</span><span style=\\"color: #24292E\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">/* @vite-ignore */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        base </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> acceptedPathWithoutQuery.</span><span style=\\"color: #6F42C1\\">slice</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">`?${</span><span style=\\"color: #24292E\\">explicitImportRequired</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #032F62\\">&#39;import&amp;&#39;</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #032F62\\">&#39;&#39;}t=${</span><span style=\\"color: #24292E\\">timestamp</span><span style=\\"color: #032F62\\">}${</span><span style=\\"color: #24292E\\">query</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #032F62\\">`&amp;${</span><span style=\\"color: #24292E\\">query</span><span style=\\"color: #032F62\\">}`</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #032F62\\">&#39;&#39;}`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      );</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    } </span><span style=\\"color: #D73A49\\">catch</span><span style=\\"color: #24292E\\"> (e) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6F42C1\\">warnFailedFetch</span><span style=\\"color: #24292E\\">(e, acceptedPath);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> () </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">for</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">deps</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">fn</span><span style=\\"color: #24292E\\"> } </span><span style=\\"color: #D73A49\\">of</span><span style=\\"color: #24292E\\"> qualifiedCallbacks) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// 更新</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6F42C1\\">fn</span><span style=\\"color: #24292E\\">(deps.</span><span style=\\"color: #6F42C1\\">map</span><span style=\\"color: #24292E\\">((</span><span style=\\"color: #E36209\\">dep</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> (dep </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> acceptedPath </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> fetchedModule </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">undefined</span><span style=\\"color: #24292E\\">)));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">loggedPath</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> isSelfUpdate </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> path </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">`${</span><span style=\\"color: #24292E\\">acceptedPath</span><span style=\\"color: #032F62\\">} via ${</span><span style=\\"color: #24292E\\">path</span><span style=\\"color: #032F62\\">}`</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">debug</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">`[vite] hot updated: ${</span><span style=\\"color: #24292E\\">loggedPath</span><span style=\\"color: #032F62\\">}`</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div><h1 id=\\"第三个问题-vite-如何打包构建\\" tabindex=\\"-1\\">第三个问题：vite 如何打包构建 <a class=\\"header-anchor\\" href=\\"#第三个问题-vite-如何打包构建\\" aria-label=\\"Permalink to &quot;第三个问题：vite 如何打包构建&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>很简单，使用 rollup 打包，借助 rollup 生态</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">watch</span><span style=\\"color: #E1E4E8\\"> } </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">import</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;rollup&#39;</span><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">watcher</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">watch</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #F97583\\">...</span><span style=\\"color: #E1E4E8\\">rollupOptions,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        output: normalizedOutputs,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        watch: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          </span><span style=\\"color: #F97583\\">...</span><span style=\\"color: #E1E4E8\\">config.build.watch,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          chokidar: resolvedChokidarOptions,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      })</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      watcher.</span><span style=\\"color: #B392F0\\">on</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;event&#39;</span><span style=\\"color: #E1E4E8\\">, (</span><span style=\\"color: #FFAB70\\">event</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (event.code </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;BUNDLE_START&#39;</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          config.logger.</span><span style=\\"color: #B392F0\\">info</span><span style=\\"color: #E1E4E8\\">(colors.</span><span style=\\"color: #B392F0\\">cyan</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">`</span><span style=\\"color: #79B8FF\\">\\\\n</span><span style=\\"color: #9ECBFF\\">build started...`</span><span style=\\"color: #E1E4E8\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (options.write) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            </span><span style=\\"color: #B392F0\\">prepareOutDir</span><span style=\\"color: #E1E4E8\\">(outDirs, options.emptyOutDir, config)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        } </span><span style=\\"color: #F97583\\">else</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (event.code </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;BUNDLE_END&#39;</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          event.result.</span><span style=\\"color: #B392F0\\">close</span><span style=\\"color: #E1E4E8\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          config.logger.</span><span style=\\"color: #B392F0\\">info</span><span style=\\"color: #E1E4E8\\">(colors.</span><span style=\\"color: #B392F0\\">cyan</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">`built in ${</span><span style=\\"color: #E1E4E8\\">event</span><span style=\\"color: #9ECBFF\\">.</span><span style=\\"color: #E1E4E8\\">duration</span><span style=\\"color: #9ECBFF\\">}ms.`</span><span style=\\"color: #E1E4E8\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        } </span><span style=\\"color: #F97583\\">else</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (event.code </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;ERROR&#39;</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">          </span><span style=\\"color: #B392F0\\">outputBuildError</span><span style=\\"color: #E1E4E8\\">(event.error)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      })</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> watcher</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// write or generate files with rollup</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">rollup</span><span style=\\"color: #E1E4E8\\"> } </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">import</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;rollup&#39;</span><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    bundle </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">await</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">rollup</span><span style=\\"color: #E1E4E8\\">(rollupOptions)</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">watch</span><span style=\\"color: #24292E\\"> } </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">import</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;rollup&#39;</span><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">watcher</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">watch</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #D73A49\\">...</span><span style=\\"color: #24292E\\">rollupOptions,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        output: normalizedOutputs,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        watch: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          </span><span style=\\"color: #D73A49\\">...</span><span style=\\"color: #24292E\\">config.build.watch,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          chokidar: resolvedChokidarOptions,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      })</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      watcher.</span><span style=\\"color: #6F42C1\\">on</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;event&#39;</span><span style=\\"color: #24292E\\">, (</span><span style=\\"color: #E36209\\">event</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (event.code </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;BUNDLE_START&#39;</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          config.logger.</span><span style=\\"color: #6F42C1\\">info</span><span style=\\"color: #24292E\\">(colors.</span><span style=\\"color: #6F42C1\\">cyan</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">`</span><span style=\\"color: #005CC5\\">\\\\n</span><span style=\\"color: #032F62\\">build started...`</span><span style=\\"color: #24292E\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (options.write) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            </span><span style=\\"color: #6F42C1\\">prepareOutDir</span><span style=\\"color: #24292E\\">(outDirs, options.emptyOutDir, config)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        } </span><span style=\\"color: #D73A49\\">else</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (event.code </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;BUNDLE_END&#39;</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          event.result.</span><span style=\\"color: #6F42C1\\">close</span><span style=\\"color: #24292E\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          config.logger.</span><span style=\\"color: #6F42C1\\">info</span><span style=\\"color: #24292E\\">(colors.</span><span style=\\"color: #6F42C1\\">cyan</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">`built in ${</span><span style=\\"color: #24292E\\">event</span><span style=\\"color: #032F62\\">.</span><span style=\\"color: #24292E\\">duration</span><span style=\\"color: #032F62\\">}ms.`</span><span style=\\"color: #24292E\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        } </span><span style=\\"color: #D73A49\\">else</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (event.code </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;ERROR&#39;</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">          </span><span style=\\"color: #6F42C1\\">outputBuildError</span><span style=\\"color: #24292E\\">(event.error)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      })</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> watcher</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// write or generate files with rollup</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">rollup</span><span style=\\"color: #24292E\\"> } </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">import</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;rollup&#39;</span><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    bundle </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">await</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">rollup</span><span style=\\"color: #24292E\\">(rollupOptions)</span></span></code></pre>\\n</div>","frontmatter":{"title":"vite 源码解析（版本：5.0.0-beta.2）","author":"power","description":"在 webpack 横行的时代，webpack 的影响力几乎统治了 web 前端，react，vue-cli 等等工具都借助于 webpack 构建。在使用过程中，Webpack 构建十几个页面几百个组件的应用的性能出现了严重下降，说句公道话，webpack 的性能其实是很好的，最大的问题是配置过于复杂，导致绝大多数人不能正确的配置导致性能下降。天下苦 webpack 久矣，在这个时候，尤大巧妙的利用 esbuild 和 rollup，借助浏览器原生的 esm 能力创造的 vite 横空出世。一旦体验过，就再也回不去了","date":"2023-09-26T09:25:00.000Z","link":"./frontend/Vite","tags":["源码"]},"excerpt":"","url":"/frontend/Vite.html"},{"src":"---\\ntitle: vite 插件整理\\nauthor: power\\ndescription: vite插件整理\\ndate: 2023-09-26 09:25:00\\nlink: ./frontend/VitePlugin\\ntags:\\n  - 插件\\n---\\n\\n# {{$frontmatter.title}}\\n\\n- {{$frontmatter.description}}\\n\\n# 静态资源\\n\\n- 图片压缩： vite-plugin-imagemin\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{$frontmatter.title}} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{$frontmatter.title}}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>{{$frontmatter.description}}</li>\\n</ul>\\n<h1 id=\\"静态资源\\" tabindex=\\"-1\\">静态资源 <a class=\\"header-anchor\\" href=\\"#静态资源\\" aria-label=\\"Permalink to &quot;静态资源&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>图片压缩： vite-plugin-imagemin</li>\\n</ul>\\n","frontmatter":{"title":"vite 插件整理","author":"power","description":"vite插件整理","date":"2023-09-26T09:25:00.000Z","link":"./frontend/VitePlugin","tags":["插件"]},"excerpt":"","url":"/frontend/VitePlugin.html"},{"src":"---\\ntitle: 开发node应用（nest）\\nauthor: power\\ndescription:\\ndate: 2023-09-25 07:57:11\\nlink: ./backend/Node\\ntags:\\n  - 数据结构\\n---\\n\\n# {{ $frontmatter.title }}\\n\\n{{ $frontmatter.description }}\\n\\n- 开发 node 有 3 个层次\\n- 直接用 http、https 包的 createServer\\n- 使用 express、koa 这种处理请求响应的库\\n- 使用 nest、egg、midway 这类企业级框架\\n  嗯，想从 http 开始\\n\\n## http 模块\\n\\n## stream 模块\\n\\n## event 模块\\n\\n## cluster 模块\\n\\n## child_process 模块\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{ $frontmatter.title }} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{ $frontmatter.title }}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>{{ $frontmatter.description }}</p>\\n<ul>\\n<li>开发 node 有 3 个层次</li>\\n<li>直接用 http、https 包的 createServer</li>\\n<li>使用 express、koa 这种处理请求响应的库</li>\\n<li>使用 nest、egg、midway 这类企业级框架\\n嗯，想从 http 开始</li>\\n</ul>\\n<h2 id=\\"http-模块\\" tabindex=\\"-1\\">http 模块 <a class=\\"header-anchor\\" href=\\"#http-模块\\" aria-label=\\"Permalink to &quot;http 模块&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h2 id=\\"stream-模块\\" tabindex=\\"-1\\">stream 模块 <a class=\\"header-anchor\\" href=\\"#stream-模块\\" aria-label=\\"Permalink to &quot;stream 模块&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h2 id=\\"event-模块\\" tabindex=\\"-1\\">event 模块 <a class=\\"header-anchor\\" href=\\"#event-模块\\" aria-label=\\"Permalink to &quot;event 模块&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h2 id=\\"cluster-模块\\" tabindex=\\"-1\\">cluster 模块 <a class=\\"header-anchor\\" href=\\"#cluster-模块\\" aria-label=\\"Permalink to &quot;cluster 模块&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h2 id=\\"child-process-模块\\" tabindex=\\"-1\\">child_process 模块 <a class=\\"header-anchor\\" href=\\"#child-process-模块\\" aria-label=\\"Permalink to &quot;child_process 模块&quot;\\">&ZeroWidthSpace;</a></h2>\\n","frontmatter":{"title":"开发node应用（nest）","author":"power","description":null,"date":"2023-09-25T07:57:11.000Z","link":"./backend/Node","tags":["数据结构"]},"excerpt":"","url":"/backend/node.html"},{"src":"---\\ntitle: linux命令\\nauthor: power\\ndescription: \'linux命令\'\\ndate: 2023-09-23 21:58:08\\nlink: ./mac/linuxCommand\\ntags:\\n  - mac\\n---\\n\\n# {{$frontmatter.title}}\\n\\n- {{$frontmatter.description}}\\n\\n## tree\\n\\n```sh\\n# 显示一级目录\\ntree -L 1\\n# 显示\\n```\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{$frontmatter.title}} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{$frontmatter.title}}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>{{$frontmatter.description}}</li>\\n</ul>\\n<h2 id=\\"tree\\" tabindex=\\"-1\\">tree <a class=\\"header-anchor\\" href=\\"#tree\\" aria-label=\\"Permalink to &quot;tree&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 显示一级目录</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">tree</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-L</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 显示</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 显示一级目录</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">tree</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-L</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 显示</span></span></code></pre>\\n</div>","frontmatter":{"title":"linux命令","author":"power","description":"linux命令","date":"2023-09-23T21:58:08.000Z","link":"./mac/linuxCommand","tags":["mac"]},"excerpt":"","url":"/mac/linuxCommand.html"},{"src":"---\\ntitle: mac开发配置\\nauthor: power\\ndescription: \'作为一个前端开发工程师，搭建一个舒适的本地开发环境\'\\ndate: 2023-09-23 12:08:21\\nlink: ./mac/macEvironment\\ntags:\\n  - mac\\n---\\n\\n# {{$frontmatter.title}}\\n\\n- {{$frontmatter.description}}\\n\\n## Mac 系统下 配置了 SSH keys，每次操作都提示 \\"Enter passphrase for key\\" 输入密码\\n\\n```\\n# ssh-add 命令是把专用密钥添加到ssh-agent的高速缓存\\nssh-add ~/.ssh/id_rsa\\n```\\n\\n## 安装 iterm2\\n\\n唤醒热键\\n给终端加一个快速唤醒/隐藏的快捷键是必须要做的，否则用鼠标找到终端的快捷方式再打开这种做法不仅慢而且逼格低，设置方式 iterm2 -> Preferences -> Keys -> Hotkey\\n![Alt text](./img/image.png)\\n\\n### 个人喜好这里建议给 iterm2 配置一个透明度，看起来体验感舒适很多 iterm2 -> Preferences -> Profiles -> Window -> Transparency\\n\\n### 快捷键使用\\n\\n- ctrl + a/e 快速切换到当前正在输入的文本的头部／尾部\\n- ctrl + u 清空当前输入\\n- cmd + T 打开一个新的 iterm2 Tab\\n- cmd + 方向键 左右切换 Tab\\n- cmd + D 分屏\\n- cmd + K 清屏\\n- cmd + N 打开一个新的 iterm2 窗口\\n\\n## 安装 zsh\\n\\n```sh\\nsh -c \\"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\\"\\n\\n# 更换主题\\n$ vim ~/.zshrc # 打开zsh配置文件\\n10 ZSH_THEME = \\"ys\\" # 在第10行设置当前主题为ys\\n$ source ~/.zshrc # 重新执行一遍zsh配置文件\\n```\\n\\n# 安装插件\\n\\n```sh\\n# 增加插件\\nvim ~/.zshrc\\nplugins = (\\n git\\n autojump\\n zsh-autosuggestions\\n zsh-syntax-highlighting\\n last-working-dir\\n)\\n$ source ~/.zshrc\\n# 自动补全提示\\ngit clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions\\n# 高亮git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting\\n\\nsource ~/.zshrc\\n```\\n\\n## npm link\\n\\n```sh\\ncd vue // 进入本地clone下来的vue文件夹\\nnpm link // 如果没有全局安装过vue 此时会创建全局node_modules下的一个软链接vue指向本地clone的vue入口文件\\nnpm link vue // 在需要用调试vue模块的应用执行该命令会将当前应用的node_modules/vue指向全局node_modules/vue软链接\\n```\\n\\n## vim 快捷键\\n\\n- :wq 退出 vim。stackoverflow 每日搜索次数第一问题，如何退出 vim:)\\n- i 进入插入模式\\n- q 进入可视模式，可以用光标来选择文本\\n- jk 上下移动\\n- hl 左右移动\\n- ctrl + b/f 上下翻页\\n- 0/$ 光标快速移动到行首／行尾\\n- / 搜索\\n- n/N 跳转到下一个／上一个 搜索词\\n- :s/old/new/g 单行替换\\n- :%s/old/new/g 全局替换\\n\\n## 安装插件 janus\\n\\n- 显示行号\\n- 文本高亮, 搜索高亮\\n- 句尾显示.号\\n- 轻松切换多种显示方式，水平显示 or 垂直显示\\n\\n参考 [打造舒适高效的前端开发环境](http://fe.ssr-fc.com/)\\n\\nvscode 折叠所有：cmd+ 0\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{$frontmatter.title}} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{$frontmatter.title}}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>{{$frontmatter.description}}</li>\\n</ul>\\n<h2 id=\\"mac-系统下-配置了-ssh-keys-每次操作都提示-enter-passphrase-for-key-输入密码\\" tabindex=\\"-1\\">Mac 系统下 配置了 SSH keys，每次操作都提示 &quot;Enter passphrase for key&quot; 输入密码 <a class=\\"header-anchor\\" href=\\"#mac-系统下-配置了-ssh-keys-每次操作都提示-enter-passphrase-for-key-输入密码\\" aria-label=\\"Permalink to &quot;Mac 系统下 配置了 SSH keys，每次操作都提示 &quot;Enter passphrase for key&quot; 输入密码&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\"># ssh-add 命令是把专用密钥添加到ssh-agent的高速缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">ssh-add ~/.ssh/id_rsa</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\"># ssh-add 命令是把专用密钥添加到ssh-agent的高速缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">ssh-add ~/.ssh/id_rsa</span></span></code></pre>\\n</div><h2 id=\\"安装-iterm2\\" tabindex=\\"-1\\">安装 iterm2 <a class=\\"header-anchor\\" href=\\"#安装-iterm2\\" aria-label=\\"Permalink to &quot;安装 iterm2&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>唤醒热键\\n给终端加一个快速唤醒/隐藏的快捷键是必须要做的，否则用鼠标找到终端的快捷方式再打开这种做法不仅慢而且逼格低，设置方式 iterm2 -&gt; Preferences -&gt; Keys -&gt; Hotkey\\n<img src=\\"./img/image.png\\" alt=\\"Alt text\\"></p>\\n<h3 id=\\"个人喜好这里建议给-iterm2-配置一个透明度-看起来体验感舒适很多-iterm2-preferences-profiles-window-transparency\\" tabindex=\\"-1\\">个人喜好这里建议给 iterm2 配置一个透明度，看起来体验感舒适很多 iterm2 -&gt; Preferences -&gt; Profiles -&gt; Window -&gt; Transparency <a class=\\"header-anchor\\" href=\\"#个人喜好这里建议给-iterm2-配置一个透明度-看起来体验感舒适很多-iterm2-preferences-profiles-window-transparency\\" aria-label=\\"Permalink to &quot;个人喜好这里建议给 iterm2 配置一个透明度，看起来体验感舒适很多 iterm2 -&gt; Preferences -&gt; Profiles -&gt; Window -&gt; Transparency&quot;\\">&ZeroWidthSpace;</a></h3>\\n<h3 id=\\"快捷键使用\\" tabindex=\\"-1\\">快捷键使用 <a class=\\"header-anchor\\" href=\\"#快捷键使用\\" aria-label=\\"Permalink to &quot;快捷键使用&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>ctrl + a/e 快速切换到当前正在输入的文本的头部／尾部</li>\\n<li>ctrl + u 清空当前输入</li>\\n<li>cmd + T 打开一个新的 iterm2 Tab</li>\\n<li>cmd + 方向键 左右切换 Tab</li>\\n<li>cmd + D 分屏</li>\\n<li>cmd + K 清屏</li>\\n<li>cmd + N 打开一个新的 iterm2 窗口</li>\\n</ul>\\n<h2 id=\\"安装-zsh\\" tabindex=\\"-1\\">安装 zsh <a class=\\"header-anchor\\" href=\\"#安装-zsh\\" aria-label=\\"Permalink to &quot;安装 zsh&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">sh</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-c</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&quot;$(</span><span style=\\"color: #B392F0\\">curl</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">-fsSL</span><span style=\\"color: #9ECBFF\\"> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 更换主题</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">$</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">vim</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">~/.zshrc</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\"># 打开zsh配置文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">10</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">ZSH_THEME</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&quot;ys&quot;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\"># 在第10行设置当前主题为ys</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">$</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">source</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">~/.zshrc</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\"># 重新执行一遍zsh配置文件</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">sh</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-c</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&quot;$(</span><span style=\\"color: #6F42C1\\">curl</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">-fsSL</span><span style=\\"color: #032F62\\"> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 更换主题</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">$</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">vim</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">~/.zshrc</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\"># 打开zsh配置文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">10</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">ZSH_THEME</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&quot;ys&quot;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\"># 在第10行设置当前主题为ys</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">$</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">source</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">~/.zshrc</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\"># 重新执行一遍zsh配置文件</span></span></code></pre>\\n</div><h1 id=\\"安装插件\\" tabindex=\\"-1\\">安装插件 <a class=\\"header-anchor\\" href=\\"#安装插件\\" aria-label=\\"Permalink to &quot;安装插件&quot;\\">&ZeroWidthSpace;</a></h1>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 增加插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">vim</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">~/.zshrc</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">plugins</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">=</span><span style=\\"color: #E1E4E8\\"> (</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">git</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">autojump</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">zsh-autosuggestions</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">zsh-syntax-highlighting</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">last-working-dir</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">$</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">source</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">~/.zshrc</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 自动补全提示</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">git</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">clone</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">https://github.com/zsh-users/zsh-autosuggestions</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 高亮git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">source</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">~/.zshrc</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\"># 增加插件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">vim</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">~/.zshrc</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">plugins</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">=</span><span style=\\"color: #24292E\\"> (</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">git</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">autojump</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">zsh-autosuggestions</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">zsh-syntax-highlighting</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">last-working-dir</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">$</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">source</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">~/.zshrc</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 自动补全提示</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">git</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">clone</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">https://github.com/zsh-users/zsh-autosuggestions</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 高亮git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">source</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">~/.zshrc</span></span></code></pre>\\n</div><h2 id=\\"npm-link\\" tabindex=\\"-1\\">npm link <a class=\\"header-anchor\\" href=\\"#npm-link\\" aria-label=\\"Permalink to &quot;npm link&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">cd</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">vue</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">//</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">进入本地clone下来的vue文件夹</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">npm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">link</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">//</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">如果没有全局安装过vue</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">此时会创建全局node_modules下的一个软链接vue指向本地clone的vue入口文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">npm</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">link</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">vue</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">//</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">在需要用调试vue模块的应用执行该命令会将当前应用的node_modules/vue指向全局node_modules/vue软链接</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">cd</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">vue</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">//</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">进入本地clone下来的vue文件夹</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">npm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">link</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">//</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">如果没有全局安装过vue</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">此时会创建全局node_modules下的一个软链接vue指向本地clone的vue入口文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">npm</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">link</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">vue</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">//</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">在需要用调试vue模块的应用执行该命令会将当前应用的node_modules/vue指向全局node_modules/vue软链接</span></span></code></pre>\\n</div><h2 id=\\"vim-快捷键\\" tabindex=\\"-1\\">vim 快捷键 <a class=\\"header-anchor\\" href=\\"#vim-快捷键\\" aria-label=\\"Permalink to &quot;vim 快捷键&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li>:wq 退出 vim。stackoverflow 每日搜索次数第一问题，如何退出 vim:)</li>\\n<li>i 进入插入模式</li>\\n<li>q 进入可视模式，可以用光标来选择文本</li>\\n<li>jk 上下移动</li>\\n<li>hl 左右移动</li>\\n<li>ctrl + b/f 上下翻页</li>\\n<li>0/$ 光标快速移动到行首／行尾</li>\\n<li>/ 搜索</li>\\n<li>n/N 跳转到下一个／上一个 搜索词</li>\\n<li>😒/old/new/g 单行替换</li>\\n<li>:%s/old/new/g 全局替换</li>\\n</ul>\\n<h2 id=\\"安装插件-janus\\" tabindex=\\"-1\\">安装插件 janus <a class=\\"header-anchor\\" href=\\"#安装插件-janus\\" aria-label=\\"Permalink to &quot;安装插件 janus&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li>显示行号</li>\\n<li>文本高亮, 搜索高亮</li>\\n<li>句尾显示.号</li>\\n<li>轻松切换多种显示方式，水平显示 or 垂直显示</li>\\n</ul>\\n<p>参考 <a href=\\"http://fe.ssr-fc.com/\\" target=\\"_blank\\" rel=\\"noreferrer\\">打造舒适高效的前端开发环境</a></p>\\n<p>vscode 折叠所有：cmd+ 0</p>\\n","frontmatter":{"title":"mac开发配置","author":"power","description":"作为一个前端开发工程师，搭建一个舒适的本地开发环境","date":"2023-09-23T12:08:21.000Z","link":"./mac/macEvironment","tags":["mac"]},"excerpt":"","url":"/mac/macEvironment.html"},{"src":"---\\ntitle: mysql基本操作\\nauthor: power\\ndescription: 首先声明mysql的版本是：8.0.33，系统操作是mac Monteron 12.3。内容是数据库的基本命令\\ndate: 2023-09-22 12:42:44\\nlink: ./databases/Mysql\\ntags:\\n  - 数据结构\\n---\\n\\n# {{ $frontmatter.title }}\\n\\n{{ $frontmatter.description }}\\n\\n### 数据库的连接\\n\\n```sh\\nmysql --version\\n# 连接mysql\\nmysql -h 127.0.0.1 -u root -P 3334 -p\\n# 展示数据库\\nshow databases;\\n```\\n\\n### 数据库备份\\n\\n- 全量备份脚本\\n\\n```sh\\n#!/bin/bash\\n\\n# 如果文件没有权限，提权\\n# chomd 777 ./bash.sh\\n\\n\\n#保存备份个数，备份31天数据\\nnumber=31\\n\\n#备份保存路径(脚本当前目录)\\nbackup_dir=__myslq_data\\n\\n#日期\\ndd=`date +%Y-%m-%d-%H-%M-%S`\\n\\n#备份工具\\ntool=mysqldump\\n\\n#用户名\\nusername=root\\n\\n#密码\\npassword=123456\\n\\n#将要备份的数据库\\ndatabase_name=baijiabao\\n\\n#如果文件夹不存在则创建\\nif [ ! -d $backup_dir ];\\nthen\\n    mkdir -p $backup_dir;\\nfi\\n\\n#简单写法 mysqldump -h 127.0.0.1 -P 3334 -u root -p123456 users > /root/mysqlbackup/users-$filename.sql\\n$tool -u $username -h 127.0.0.1 -P 3334 -p$password $database_name > $backup_dir/$database_name-$dd.sql\\n\\n#写创建备份日志\\necho \\"create $backup_dir/$database_name-$dd.dupm\\" >> $backup_dir/log.txt\\n\\n#找出需要删除的备份\\ndelfile=`ls -l -crt $backup_dir/*.sql | awk \'{print $9 }\' | head -1`\\n\\n#判断现在的备份数量是否大于$number\\ncount=`ls -l -crt $backup_dir/*.sql | awk \'{print $9 }\' | wc -l`\\n\\nif [ $count -gt $number ]\\nthen\\n  #删除最早生成的备份，只保留number数量的备份\\n  rm $delfile\\n  #写删除文件日志\\n  echo \\"delete $delfile\\" >> $backup_dir/log.txt\\nfi\\n\\n```\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{ $frontmatter.title }} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{ $frontmatter.title }}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>{{ $frontmatter.description }}</p>\\n<h3 id=\\"数据库的连接\\" tabindex=\\"-1\\">数据库的连接 <a class=\\"header-anchor\\" href=\\"#数据库的连接\\" aria-label=\\"Permalink to &quot;数据库的连接&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">mysql</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--version</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 连接mysql</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">mysql</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-h</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">127.0</span><span style=\\"color: #9ECBFF\\">.0.1</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-u</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">root</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-P</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">3334</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-p</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 展示数据库</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">show</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">databases</span><span style=\\"color: #E1E4E8\\">;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">mysql</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--version</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 连接mysql</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">mysql</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-h</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">127.0</span><span style=\\"color: #032F62\\">.0.1</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-u</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">root</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-P</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">3334</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-p</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 展示数据库</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">show</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">databases</span><span style=\\"color: #24292E\\">;</span></span></code></pre>\\n</div><h3 id=\\"数据库备份\\" tabindex=\\"-1\\">数据库备份 <a class=\\"header-anchor\\" href=\\"#数据库备份\\" aria-label=\\"Permalink to &quot;数据库备份&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>全量备份脚本</li>\\n</ul>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">#!/bin/bash</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 如果文件没有权限，提权</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># chomd 777 ./bash.sh</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#保存备份个数，备份31天数据</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">number</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #79B8FF\\">31</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#备份保存路径(脚本当前目录)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">backup_dir</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #9ECBFF\\">__myslq_data</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#日期</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">dd</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #9ECBFF\\">`</span><span style=\\"color: #B392F0\\">date</span><span style=\\"color: #9ECBFF\\"> +%Y-%m-%d-%H-%M-%S`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#备份工具</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">tool</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #9ECBFF\\">mysqldump</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#用户名</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">username</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #9ECBFF\\">root</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#密码</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">password</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #79B8FF\\">123456</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#将要备份的数据库</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">database_name</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #9ECBFF\\">baijiabao</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#如果文件夹不存在则创建</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> [ </span><span style=\\"color: #F97583\\">!</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-d</span><span style=\\"color: #E1E4E8\\"> $backup_dir ];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">then</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">mkdir</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">-p</span><span style=\\"color: #E1E4E8\\"> $backup_dir;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">fi</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#简单写法 mysqldump -h 127.0.0.1 -P 3334 -u root -p123456 users &gt; /root/mysqlbackup/users-$filename.sql</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">$tool -u $username -h 127.0.0.1 -P 3334 -p$password $database_name </span><span style=\\"color: #F97583\\">&gt;</span><span style=\\"color: #E1E4E8\\"> $backup_dir/$database_name-$dd.sql</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#写创建备份日志</span></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">echo</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&quot;create </span><span style=\\"color: #E1E4E8\\">$backup_dir</span><span style=\\"color: #9ECBFF\\">/</span><span style=\\"color: #E1E4E8\\">$database_name</span><span style=\\"color: #9ECBFF\\">-</span><span style=\\"color: #E1E4E8\\">$dd</span><span style=\\"color: #9ECBFF\\">.dupm&quot;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&gt;&gt;</span><span style=\\"color: #E1E4E8\\"> $backup_dir</span><span style=\\"color: #9ECBFF\\">/log.txt</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#找出需要删除的备份</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">delfile</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #9ECBFF\\">`</span><span style=\\"color: #B392F0\\">ls</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">-l</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">-crt</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #E1E4E8\\">$backup_dir</span><span style=\\"color: #9ECBFF\\">/</span><span style=\\"color: #79B8FF\\">*</span><span style=\\"color: #9ECBFF\\">.sql </span><span style=\\"color: #F97583\\">|</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #B392F0\\">awk</span><span style=\\"color: #9ECBFF\\"> &#39;{print $9 }&#39; </span><span style=\\"color: #F97583\\">|</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #B392F0\\">head</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">-1</span><span style=\\"color: #9ECBFF\\">`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#判断现在的备份数量是否大于$number</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">count</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #9ECBFF\\">`</span><span style=\\"color: #B392F0\\">ls</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">-l</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">-crt</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #E1E4E8\\">$backup_dir</span><span style=\\"color: #9ECBFF\\">/</span><span style=\\"color: #79B8FF\\">*</span><span style=\\"color: #9ECBFF\\">.sql </span><span style=\\"color: #F97583\\">|</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #B392F0\\">awk</span><span style=\\"color: #9ECBFF\\"> &#39;{print $9 }&#39; </span><span style=\\"color: #F97583\\">|</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #B392F0\\">wc</span><span style=\\"color: #9ECBFF\\"> </span><span style=\\"color: #79B8FF\\">-l</span><span style=\\"color: #9ECBFF\\">`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> [ $count </span><span style=\\"color: #F97583\\">-gt</span><span style=\\"color: #E1E4E8\\"> $number ]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">then</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">#删除最早生成的备份，只保留number数量的备份</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">rm</span><span style=\\"color: #E1E4E8\\"> $delfile</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">#写删除文件日志</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #79B8FF\\">echo</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&quot;delete </span><span style=\\"color: #E1E4E8\\">$delfile</span><span style=\\"color: #9ECBFF\\">&quot;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&gt;&gt;</span><span style=\\"color: #E1E4E8\\"> $backup_dir</span><span style=\\"color: #9ECBFF\\">/log.txt</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">fi</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">#!/bin/bash</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># 如果文件没有权限，提权</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"># chomd 777 ./bash.sh</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#保存备份个数，备份31天数据</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">number</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #005CC5\\">31</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#备份保存路径(脚本当前目录)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">backup_dir</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #032F62\\">__myslq_data</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#日期</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">dd</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #032F62\\">`</span><span style=\\"color: #6F42C1\\">date</span><span style=\\"color: #032F62\\"> +%Y-%m-%d-%H-%M-%S`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#备份工具</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">tool</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #032F62\\">mysqldump</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#用户名</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">username</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #032F62\\">root</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#密码</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">password</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #005CC5\\">123456</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#将要备份的数据库</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">database_name</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #032F62\\">baijiabao</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#如果文件夹不存在则创建</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> [ </span><span style=\\"color: #D73A49\\">!</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-d</span><span style=\\"color: #24292E\\"> $backup_dir ];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">then</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">mkdir</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">-p</span><span style=\\"color: #24292E\\"> $backup_dir;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">fi</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#简单写法 mysqldump -h 127.0.0.1 -P 3334 -u root -p123456 users &gt; /root/mysqlbackup/users-$filename.sql</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">$tool -u $username -h 127.0.0.1 -P 3334 -p$password $database_name </span><span style=\\"color: #D73A49\\">&gt;</span><span style=\\"color: #24292E\\"> $backup_dir/$database_name-$dd.sql</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#写创建备份日志</span></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">echo</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&quot;create </span><span style=\\"color: #24292E\\">$backup_dir</span><span style=\\"color: #032F62\\">/</span><span style=\\"color: #24292E\\">$database_name</span><span style=\\"color: #032F62\\">-</span><span style=\\"color: #24292E\\">$dd</span><span style=\\"color: #032F62\\">.dupm&quot;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&gt;&gt;</span><span style=\\"color: #24292E\\"> $backup_dir</span><span style=\\"color: #032F62\\">/log.txt</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#找出需要删除的备份</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">delfile</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #032F62\\">`</span><span style=\\"color: #6F42C1\\">ls</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">-l</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">-crt</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #24292E\\">$backup_dir</span><span style=\\"color: #032F62\\">/</span><span style=\\"color: #005CC5\\">*</span><span style=\\"color: #032F62\\">.sql </span><span style=\\"color: #D73A49\\">|</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #6F42C1\\">awk</span><span style=\\"color: #032F62\\"> &#39;{print $9 }&#39; </span><span style=\\"color: #D73A49\\">|</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #6F42C1\\">head</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">-1</span><span style=\\"color: #032F62\\">`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">#判断现在的备份数量是否大于$number</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">count</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #032F62\\">`</span><span style=\\"color: #6F42C1\\">ls</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">-l</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">-crt</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #24292E\\">$backup_dir</span><span style=\\"color: #032F62\\">/</span><span style=\\"color: #005CC5\\">*</span><span style=\\"color: #032F62\\">.sql </span><span style=\\"color: #D73A49\\">|</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #6F42C1\\">awk</span><span style=\\"color: #032F62\\"> &#39;{print $9 }&#39; </span><span style=\\"color: #D73A49\\">|</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #6F42C1\\">wc</span><span style=\\"color: #032F62\\"> </span><span style=\\"color: #005CC5\\">-l</span><span style=\\"color: #032F62\\">`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> [ $count </span><span style=\\"color: #D73A49\\">-gt</span><span style=\\"color: #24292E\\"> $number ]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">then</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">#删除最早生成的备份，只保留number数量的备份</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">rm</span><span style=\\"color: #24292E\\"> $delfile</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">#写删除文件日志</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #005CC5\\">echo</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&quot;delete </span><span style=\\"color: #24292E\\">$delfile</span><span style=\\"color: #032F62\\">&quot;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&gt;&gt;</span><span style=\\"color: #24292E\\"> $backup_dir</span><span style=\\"color: #032F62\\">/log.txt</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">fi</span></span></code></pre>\\n</div>","frontmatter":{"title":"mysql基本操作","author":"power","description":"首先声明mysql的版本是：8.0.33，系统操作是mac Monteron 12.3。内容是数据库的基本命令","date":"2023-09-22T12:42:44.000Z","link":"./databases/Mysql","tags":["数据结构"]},"excerpt":"","url":"/databases/Mysql.html"},{"src":"---\\ntitle: vscode配置\\nauthor: power\\ndescription: vscode调试\\ndate: 2023-09-21 12:46:28\\nlink: ./frontend/Vscode\\ntags:\\n  - config\\n---\\n\\n# {{$frontmatter.title}}\\n\\n- {{$frontmatter.description}}\\n\\n```js\\n{\\n  // 使用 IntelliSense 了解相关属性。\\n  // 悬停以查看现有属性的描述。\\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\\n  \\"version\\": \\"0.2.0\\",\\n  \\"configurations\\": [\\n    {\\n      \\"name\\": \\"debugger\\",\\n      \\"request\\": \\"launch\\",\\n      \\"runtimeArgs\\": [\\"run-script\\", \\"dev\\"],\\n      \\"runtimeExecutable\\": \\"npm\\",\\n      \\"console\\": \\"integratedTerminal\\",\\n      \\"skipFiles\\": [\\"<node_internals>/**\\"],\\n      \\"type\\": \\"node\\",\\n      \\"cwd\\": \\"${workspaceFolder}/vite-demo/vite-debugger\\",\\n      \\"resolveSourceMapLocations\\": [\\"${workspaceFolder}/**\\"]\\n    },\\n  ]\\n}\\n\\n```\\n\\n- request\\n\\n* 调试模式启动浏览器，访问 url，连上进行调试\\n* 连接已经调试模式启动的 url 进行调试\\n\\n- userDataDir --- true(默认值代表临时目录保存) fase（使用临时目录）\\n- sourcemap --- true(默认值开启)\\n  ts 中指定 declaration 会生成 d.ts 声明文件， 还可以指定 declarationMap 来生成 sourcemap\\n","html":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{$frontmatter.title}} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{$frontmatter.title}}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>{{$frontmatter.description}}</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 使用 IntelliSense 了解相关属性。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 悬停以查看现有属性的描述。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">&quot;version&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;0.2.0&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">&quot;configurations&quot;</span><span style=\\"color: #E1E4E8\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;name&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;debugger&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;request&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;launch&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;run-script&quot;</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #9ECBFF\\">&quot;dev&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;npm&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;console&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;integratedTerminal&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;skipFiles&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;type&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;node&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;cwd&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;${workspaceFolder}/vite-demo/vite-debugger&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;resolveSourceMapLocations&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;${workspaceFolder}/**&quot;</span><span style=\\"color: #E1E4E8\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  ]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 使用 IntelliSense 了解相关属性。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 悬停以查看现有属性的描述。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">&quot;version&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;0.2.0&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">&quot;configurations&quot;</span><span style=\\"color: #24292E\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;name&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;debugger&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;request&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;launch&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;run-script&quot;</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #032F62\\">&quot;dev&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;npm&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;console&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;integratedTerminal&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;skipFiles&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;type&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;node&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;cwd&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;${workspaceFolder}/vite-demo/vite-debugger&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;resolveSourceMapLocations&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;${workspaceFolder}/**&quot;</span><span style=\\"color: #24292E\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  ]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div><ul>\\n<li>request</li>\\n</ul>\\n<ul>\\n<li>调试模式启动浏览器，访问 url，连上进行调试</li>\\n<li>连接已经调试模式启动的 url 进行调试</li>\\n</ul>\\n<ul>\\n<li>userDataDir --- true(默认值代表临时目录保存) fase（使用临时目录）</li>\\n<li>sourcemap --- true(默认值开启)\\nts 中指定 declaration 会生成 d.ts 声明文件， 还可以指定 declarationMap 来生成 sourcemap</li>\\n</ul>\\n","frontmatter":{"title":"vscode配置","author":"power","description":"vscode调试","date":"2023-09-21T12:46:28.000Z","link":"./frontend/Vscode","tags":["config"]},"excerpt":"<h1 id=\\"frontmatter-title\\" tabindex=\\"-1\\">{{$frontmatter.title}} <a class=\\"header-anchor\\" href=\\"#frontmatter-title\\" aria-label=\\"Permalink to &quot;{{$frontmatter.title}}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>{{$frontmatter.description}}</li>\\n</ul>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 使用 IntelliSense 了解相关属性。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 悬停以查看现有属性的描述。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">&quot;version&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;0.2.0&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #9ECBFF\\">&quot;configurations&quot;</span><span style=\\"color: #E1E4E8\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;name&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;debugger&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;request&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;launch&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;run-script&quot;</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #9ECBFF\\">&quot;dev&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;npm&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;console&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;integratedTerminal&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;skipFiles&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;type&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;node&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;cwd&quot;</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #9ECBFF\\">&quot;${workspaceFolder}/vite-demo/vite-debugger&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #9ECBFF\\">&quot;resolveSourceMapLocations&quot;</span><span style=\\"color: #E1E4E8\\">: [</span><span style=\\"color: #9ECBFF\\">&quot;${workspaceFolder}/**&quot;</span><span style=\\"color: #E1E4E8\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  ]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 使用 IntelliSense 了解相关属性。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 悬停以查看现有属性的描述。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">&quot;version&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;0.2.0&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #032F62\\">&quot;configurations&quot;</span><span style=\\"color: #24292E\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;name&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;debugger&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;request&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;launch&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;runtimeArgs&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;run-script&quot;</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #032F62\\">&quot;dev&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;runtimeExecutable&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;npm&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;console&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;integratedTerminal&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;skipFiles&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;&lt;node_internals&gt;/**&quot;</span><span style=\\"color: #24292E\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;type&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;node&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;cwd&quot;</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #032F62\\">&quot;${workspaceFolder}/vite-demo/vite-debugger&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #032F62\\">&quot;resolveSourceMapLocations&quot;</span><span style=\\"color: #24292E\\">: [</span><span style=\\"color: #032F62\\">&quot;${workspaceFolder}/**&quot;</span><span style=\\"color: #24292E\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  ]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div><ul>\\n<li>request</li>\\n</ul>\\n<ul>\\n<li>调试模式启动浏览器，访问 url，连上进行调试</li>\\n<li>连接已经调试模式启动的 url 进行调试</li>\\n</ul>\\n<ul>\\n<li>userDataDir</li>\\n</ul>\\n","url":"/frontend/Vscode.html"},{"src":"---\\ntitle: 排序\\nauthor: power\\ndescription: \'冒泡排序： 左右指针，右指针不断-1 重复直到 0\\n\\n- 网上大部分都是双循环，用 i、j 表示不容易读。其实冒泡排序其实是右指针往回移动，每次左指针跑一遍将最大的排在最后面，\'\\ndate: 2023-09-21 11:12:29\\nlink: ./algorithm/Sort\\ntags:\\n  - 数据结构\\n---\\n\\n## 排序\\n\\n{{ $frontmatter.description }}\\n\\n```java\\n// java\\npackage sandbox;\\nimport java.util.Arrays;\\n\\n// java\\nclass Sort {\\n  public static void main(String[] args) {\\n    int[] arr = { 1, 2, 3, 4, 5, 6, 7 };\\n    int[] sortArr = sortArray(arr);\\n    System.out.println(Arrays.toString(sortArr));\\n  }\\n\\n  public static int[] sortArray(int[] nums) { // 冒泡排序\\n    int right = nums.length - 1;\\n    for (int left = 0; left <= right; left++) {\\n      // 重置j和end指针\\n      if (left == right) {\\n        right = right - 1;\\n        left = 0;\\n      }\\n      // 交换\\n      if (nums[left] > nums[left + 1]) {\\n        int tem = nums[left];\\n        nums[left] = nums[left + 1];\\n        nums[left + 1] = tem;\\n      }\\n    }\\n    return nums;\\n  }\\n}\\n```\\n","html":"<h2 id=\\"排序\\" tabindex=\\"-1\\">排序 <a class=\\"header-anchor\\" href=\\"#排序\\" aria-label=\\"Permalink to &quot;排序&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>{{ $frontmatter.description }}</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// java</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">package</span><span style=\\"color: #E1E4E8\\"> sandbox;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">import</span><span style=\\"color: #E1E4E8\\"> java.util.Arrays;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// java</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">class</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Sort</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">public</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">static</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">void</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">main</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #F97583\\">String</span><span style=\\"color: #E1E4E8\\">[] </span><span style=\\"color: #FFAB70\\">args</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\">[] arr </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">3</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">4</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">5</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">6</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">7</span><span style=\\"color: #E1E4E8\\"> };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\">[] sortArr </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">sortArray</span><span style=\\"color: #E1E4E8\\">(arr);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    System.out.</span><span style=\\"color: #B392F0\\">println</span><span style=\\"color: #E1E4E8\\">(Arrays.</span><span style=\\"color: #B392F0\\">toString</span><span style=\\"color: #E1E4E8\\">(sortArr));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">public</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">static</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\">[] </span><span style=\\"color: #B392F0\\">sortArray</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\">[] </span><span style=\\"color: #FFAB70\\">nums</span><span style=\\"color: #E1E4E8\\">) { </span><span style=\\"color: #6A737D\\">// 冒泡排序</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\"> right </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> nums.length </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">for</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\"> left </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">; left </span><span style=\\"color: #F97583\\">&lt;=</span><span style=\\"color: #E1E4E8\\"> right; left</span><span style=\\"color: #F97583\\">++</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// 重置j和end指针</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (left </span><span style=\\"color: #F97583\\">==</span><span style=\\"color: #E1E4E8\\"> right) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        right </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> right </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        left </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// 交换</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (nums[left] </span><span style=\\"color: #F97583\\">&gt;</span><span style=\\"color: #E1E4E8\\"> nums[left </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">]) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\"> tem </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> nums[left];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        nums[left] </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> nums[left </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        nums[left </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">] </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> tem;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> nums;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// java</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">package</span><span style=\\"color: #24292E\\"> sandbox;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">import</span><span style=\\"color: #24292E\\"> java.util.Arrays;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// java</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">class</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Sort</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">public</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">static</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">void</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">main</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #D73A49\\">String</span><span style=\\"color: #24292E\\">[] </span><span style=\\"color: #E36209\\">args</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\">[] arr </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">3</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">4</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">5</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">6</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">7</span><span style=\\"color: #24292E\\"> };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\">[] sortArr </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">sortArray</span><span style=\\"color: #24292E\\">(arr);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    System.out.</span><span style=\\"color: #6F42C1\\">println</span><span style=\\"color: #24292E\\">(Arrays.</span><span style=\\"color: #6F42C1\\">toString</span><span style=\\"color: #24292E\\">(sortArr));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">public</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">static</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\">[] </span><span style=\\"color: #6F42C1\\">sortArray</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\">[] </span><span style=\\"color: #E36209\\">nums</span><span style=\\"color: #24292E\\">) { </span><span style=\\"color: #6A737D\\">// 冒泡排序</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\"> right </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> nums.length </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">for</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\"> left </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">; left </span><span style=\\"color: #D73A49\\">&lt;=</span><span style=\\"color: #24292E\\"> right; left</span><span style=\\"color: #D73A49\\">++</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// 重置j和end指针</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (left </span><span style=\\"color: #D73A49\\">==</span><span style=\\"color: #24292E\\"> right) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        right </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> right </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        left </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// 交换</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (nums[left] </span><span style=\\"color: #D73A49\\">&gt;</span><span style=\\"color: #24292E\\"> nums[left </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">]) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\"> tem </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> nums[left];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        nums[left] </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> nums[left </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        nums[left </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">] </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> tem;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> nums;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div>","frontmatter":{"title":"排序","author":"power","description":"冒泡排序： 左右指针，右指针不断-1 重复直到 0\\n- 网上大部分都是双循环，用 i、j 表示不容易读。其实冒泡排序其实是右指针往回移动，每次左指针跑一遍将最大的排在最后面，","date":"2023-09-21T11:12:29.000Z","link":"./algorithm/Sort","tags":["数据结构"]},"excerpt":"","url":"/algorithm/Sort.html"},{"src":"---\\ntitle: 链表\\nauthor: power\\ndescription: \'链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“结点”。\'\\ndate: 2023-09-21 10:58:00\\nlink: ./algorithm/Array\\ntags:\\n  - 数据结构\\n---\\n\\n{{ $frontmatter.description }}\\n\\n```js\\n/**\\n * 1）单链表的插入、删除、查找操作；\\n * 2）链表中存储的是int类型的数据；\\n */\\nclass Node {\\n  constructor(element) {\\n    this.element = element;\\n    this.next = null;\\n  }\\n}\\nclass LinkList {\\n  constructor() {\\n    this.head = new Node(\'head\');\\n  }\\n  // 遍历\\n  forEach() {\\n    let currentNode = this.head.next;\\n    while (currentNode.next !== null) {\\n      console.log(currentNode.element);\\n      currentNode = currentNode.next;\\n    }\\n  }\\n\\n  // 通过值查找\\n  findByValue(val) {\\n    let currentElement = this.head;\\n    while (currentElement.next !== null && currentElement.element !== val) {\\n      currentElement = currentElement.next;\\n    }\\n    return currentElement === null ? -1 : currentElement;\\n  }\\n  // 根据index查找节点，下标从0开始\\n  findByIndex(index) {\\n    let currentNode = this.head.next;\\n    let pos = 0;\\n    while (currentNode !== null && pos !== index) {\\n      currentNode = currentNode.next;\\n      pos++;\\n    }\\n    return currentNode === null ? -1 : currentNode;\\n  }\\n  // findPrev\\n  findPrev(item) {\\n    let currentNode = this.head;\\n    while (currentNode.next !== null && currentNode.next.element !== item) {\\n      currentNode = currentNode.next;\\n    }\\n    return currentNode === null ? -1 : currentNode;\\n  }\\n  // create\\n  append(element) {\\n    let currentElement = this.head;\\n    const newNode = new Node(element);\\n    while (currentElement.next) {\\n      currentElement = currentElement.next;\\n    }\\n    currentElement.next = newNode;\\n  }\\n  insert(newValue, value) {\\n    const currentNode = this.findByValue(value);\\n    if (currentNode === null) {\\n      console.log(\'未找到该值\');\\n      return -1;\\n    }\\n    const newNode = new Node(newValue);\\n    // insert\\n    newNode.next = currentNode.next;\\n    currentNode.next = newNode;\\n  }\\n  // delete\\n  remove(item) {\\n    const preNode = this.findPrev(item);\\n    if (preNode === -1) {\\n      console.log(\'未找到该值\');\\n      return -1;\\n    }\\n    preNode.next = preNode.next.next;\\n  }\\n  removeByIndex(index) {\\n    let currentNode = this.head.next;\\n    let pos = 1;\\n    while (currentNode !== null && pos < index) {\\n      currentNode = currentNode.next;\\n      pos++;\\n    }\\n    if (currentNode !== null && currentNode.next !== null) {\\n      currentNode.next = currentNode.next.next;\\n    }\\n    console.log(\'无法删除最后一个节点或者该节点不存在\');\\n    return false;\\n  }\\n  removeByEndIndex(index) {\\n    this.reverseList();\\n    this.removeByIndex(index);\\n    this.reverseList();\\n  }\\n  /**\\n   * 1) 单链表反转\\n   * 2) 链表中环的检测\\n   * 3) 两个有序的链表合并\\n   * 4) 删除链表倒数第n个结点\\n   * 5) 求链表的中间结点\\n   *\\n   */\\n  // 反转链表\\n  reverseList() {\\n    const root = new Node(\'head\');\\n    let currentNode = this.head.next;\\n    while (currentNode !== null) {\\n      const next = currentNode.next;\\n      currentNode.next = root.next;\\n      root.next = currentNode;\\n      currentNode = next;\\n    }\\n    this.head = root;\\n  }\\n\\n  // reverseList() {\\n  //   let currentNode = this.head.next;\\n  //   let previousNode = null;\\n  //   while (currentNode !== null) {\\n  //     const next = currentNode.next;\\n  //     currentNode.next = previousNode;\\n  //     previousNode = currentNode;\\n  //     currentNode = next;\\n  //   }\\n  //   this.head.next = previousNode;\\n  // }\\n  // 环检测\\n  checkCircle() {\\n    let fast = this.head.next;\\n    let slow = this.head;\\n    while (slow.next !== null && fast.next !== null && fast.next.next !== null) {\\n      slow = slow.next;\\n      fast = fast.next.next;\\n      if (slow === fast) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n  // 找中点\\n  findMiddleNode() {\\n    let slow = this.head;\\n    let fast = this.head;\\n    while (slow.next !== null && fast.next !== null && fast.next.next !== null) {\\n      slow = slow.next;\\n      fast = fast.next.next;\\n    }\\n    console.log(slow);\\n    return slow;\\n  }\\n}\\n// Test\\nconst LList = new LinkList();\\nLList.append(1);\\nLList.append(2);\\nLList.append(3);\\nLList.append(4); // chen -> curry -> sang -> zhao\\n\\n// LList.insert(3, 5);\\n\\nLList.forEach();\\nconsole.log(JSON.stringify(LList, null, 2));\\n\\nLList.findMiddleNode();\\n// 删除\\n// LList.removeByIndex(2);\\nLList.removeByEndIndex(2);\\n// 反转\\n// LList.reverseList();\\n// 成环\\n// const lastElement = LList.findByIndex(3);\\n// lastElement.next = LList.head;\\n// console.log(LList.checkCircle(), lastElement);\\n```\\n","html":"<p>{{ $frontmatter.description }}</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> * 1）单链表的插入、删除、查找操作；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> * 2）链表中存储的是int类型的数据；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">class</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">constructor</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">element</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.element </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> element;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">class</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">LinkList</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">constructor</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;head&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 遍历</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">forEach</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(currentNode.element);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 通过值查找</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">findByValue</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">val</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentElement </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentElement.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> currentElement.element </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> val) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentElement </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentElement.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> currentElement </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> currentElement;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 根据index查找节点，下标从0开始</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">findByIndex</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">index</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> pos </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> pos </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> index) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      pos</span><span style=\\"color: #F97583\\">++</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// findPrev</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">findPrev</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">item</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> currentNode.next.element </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> item) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// create</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">element</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentElement </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">newNode</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\">(element);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentElement.next) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentElement </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentElement.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    currentElement.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">insert</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">newValue</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">value</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">currentNode</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">findByValue</span><span style=\\"color: #E1E4E8\\">(value);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;未找到该值&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">newNode</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\">(newValue);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// insert</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    newNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    currentNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// delete</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">remove</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">item</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">preNode</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">findPrev</span><span style=\\"color: #E1E4E8\\">(item);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (preNode </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;未找到该值&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    preNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> preNode.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">removeByIndex</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">index</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> pos </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> pos </span><span style=\\"color: #F97583\\">&lt;</span><span style=\\"color: #E1E4E8\\"> index) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      pos</span><span style=\\"color: #F97583\\">++</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> currentNode.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;无法删除最后一个节点或者该节点不存在&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">removeByEndIndex</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">index</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">reverseList</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">removeByIndex</span><span style=\\"color: #E1E4E8\\">(index);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">reverseList</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 1) 单链表反转</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 2) 链表中环的检测</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 3) 两个有序的链表合并</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 4) 删除链表倒数第n个结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 5) 求链表的中间结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   *</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 反转链表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">reverseList</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">root</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;head&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">next</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> root.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      root.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> root;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// reverseList() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   let currentNode = this.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   let previousNode = null;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   while (currentNode !== null) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//     const next = currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//     currentNode.next = previousNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//     previousNode = currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//     currentNode = next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   this.head.next = previousNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 环检测</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">checkCircle</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> fast </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> slow </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (slow.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> fast.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> fast.next.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      slow </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> slow.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      fast </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> fast.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (slow </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> fast) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 找中点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">findMiddleNode</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> slow </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> fast </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (slow.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> fast.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> fast.next.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      slow </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> slow.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      fast </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> fast.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(slow);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> slow;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// Test</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">LList</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">LinkList</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">3</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">4</span><span style=\\"color: #E1E4E8\\">); </span><span style=\\"color: #6A737D\\">// chen -&gt; curry -&gt; sang -&gt; zhao</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.insert(3, 5);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">forEach</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">(LList, </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #E1E4E8\\">));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">findMiddleNode</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 删除</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.removeByIndex(2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">removeByEndIndex</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 反转</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.reverseList();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 成环</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// const lastElement = LList.findByIndex(3);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// lastElement.next = LList.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// console.log(LList.checkCircle(), lastElement);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> * 1）单链表的插入、删除、查找操作；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> * 2）链表中存储的是int类型的数据；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">class</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">constructor</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">element</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.element </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> element;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">class</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">LinkList</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">constructor</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;head&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 遍历</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">forEach</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(currentNode.element);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 通过值查找</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">findByValue</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">val</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentElement </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentElement.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> currentElement.element </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> val) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentElement </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentElement.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> currentElement </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> currentElement;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 根据index查找节点，下标从0开始</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">findByIndex</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">index</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> pos </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> pos </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> index) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      pos</span><span style=\\"color: #D73A49\\">++</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// findPrev</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">findPrev</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">item</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> currentNode.next.element </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> item) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// create</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">element</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentElement </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">newNode</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\">(element);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentElement.next) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentElement </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentElement.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    currentElement.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">insert</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">newValue</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">value</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">currentNode</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">findByValue</span><span style=\\"color: #24292E\\">(value);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;未找到该值&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">newNode</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\">(newValue);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// insert</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    newNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    currentNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// delete</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">remove</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">item</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">preNode</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">findPrev</span><span style=\\"color: #24292E\\">(item);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (preNode </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;未找到该值&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    preNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> preNode.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">removeByIndex</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">index</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> pos </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> pos </span><span style=\\"color: #D73A49\\">&lt;</span><span style=\\"color: #24292E\\"> index) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      pos</span><span style=\\"color: #D73A49\\">++</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> currentNode.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;无法删除最后一个节点或者该节点不存在&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">removeByEndIndex</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">index</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">reverseList</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">removeByIndex</span><span style=\\"color: #24292E\\">(index);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">reverseList</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 1) 单链表反转</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 2) 链表中环的检测</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 3) 两个有序的链表合并</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 4) 删除链表倒数第n个结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 5) 求链表的中间结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   *</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 反转链表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">reverseList</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">root</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;head&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">next</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> root.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      root.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> root;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// reverseList() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   let currentNode = this.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   let previousNode = null;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   while (currentNode !== null) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//     const next = currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//     currentNode.next = previousNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//     previousNode = currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//     currentNode = next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   this.head.next = previousNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 环检测</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">checkCircle</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> fast </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> slow </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (slow.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> fast.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> fast.next.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      slow </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> slow.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      fast </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> fast.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (slow </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> fast) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 找中点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">findMiddleNode</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> slow </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> fast </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (slow.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> fast.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> fast.next.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      slow </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> slow.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      fast </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> fast.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(slow);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> slow;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// Test</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">LList</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">LinkList</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">3</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">4</span><span style=\\"color: #24292E\\">); </span><span style=\\"color: #6A737D\\">// chen -&gt; curry -&gt; sang -&gt; zhao</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.insert(3, 5);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">forEach</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">(LList, </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #24292E\\">));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">findMiddleNode</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 删除</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.removeByIndex(2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">removeByEndIndex</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 反转</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.reverseList();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 成环</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// const lastElement = LList.findByIndex(3);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// lastElement.next = LList.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// console.log(LList.checkCircle(), lastElement);</span></span></code></pre>\\n</div>","frontmatter":{"title":"链表","author":"power","description":"链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“结点”。","date":"2023-09-21T10:58:00.000Z","link":"./algorithm/Array","tags":["数据结构"]},"excerpt":"","url":"/algorithm/LinkedList.html"},{"src":"---\\ntitle: 数组\\nauthor: power\\ndescription: \'与 Java 、PHP 等语言不同，在 JavaScript 中，数组其实是一种特殊的对象\'\\ndate: 2023-09-21 09:52:51\\nlink: ./algorithm/Array\\ntags:\\n  - 数据结构\\n---\\n\\n## 数组\\n\\n{{ $frontmatter.description }}\\n\\n#### 数组的创建与读写\\n\\n以下两种方式都可创建数组：\\n\\n```\\n// 字面量方式,常用\\nvar num = [1,5,6,10];\\nprint(num.length);   // 4\\n\\n// 构造函数方式\\nvar num = new Array(1,5,6,10);\\nprint(num.length);    // 4\\n```\\n\\n值得注意的是，JavaScript 中的数组数据可以是不同类型，它的语法相对宽松，例如可以指定不同类型数据`var example = [1,\\"Mike\\",true,null];`另外，可以通过`Array.isArray()`来判断一个对象是否是数组，例如：\\n\\n```\\nvar num = [1,5,6,10];\\nprint(Array.isArray(num));        // true\\n```\\n\\n如何读写数组呢？可以使用循环。\\n\\n```\\nvar num = [1,5,6,10];\\nfor (var i = 0; i < num.length; i++) {\\n  console.log(num[i]+\\" \\");\\n}\\n```\\n\\n#### 数组的深复制与浅复制\\n\\n当我们把数组赋给另外一个数组，然后改变其中一个数组的值，另一数组也会随之改变，这就是数组的浅复制。而深复制指的就是不改变原来的数组而去创建一个新的数组，这种情况是经常使用的，为了不破坏原数组。下面的代码展示了这两种复制\\n\\n```\\n// 浅复制\\nvar num = [1,2,3,4,5];\\nvar newNum = num;\\nnum[0] = 10;\\nconsole.log(newNum[0]);  // 10\\n\\n// 深复制\\nfunction copy (arr1,arr2) {\\n  for(var i=0;i<arr1.length;i++){\\n    arr2[i] = arr1[i];\\n  }\\n}\\nvar num = [1,5,6,7,9];\\nvar newNum = [];\\ncopy(num,newNum);\\nnum[0] = 10;\\nconsole.log(newNum[0]);    // 仍然为 1\\n```\\n\\n#### 存取函数\\n\\nJavaScript 提供了一组用来访问数组元素的函数，叫存取函数。最常用的存取函数就是 indexOf() 函数，该函数返回指定查找的值在目标值中是否存在，如果存在，返回该值在数组中的索引，不存在则返回 -1。\\n\\n```\\nvar word = [\\"A\\",\\"B\\",\\"C\\",\\"D\\"];\\nvar result = word.indexOf(\\"A\\");\\nconsole.log(result);    // 0\\nvar test = word.indexOf(\\"F\\");\\nconsole.log(test);   // -1\\n```\\n\\n除此之外，还有 join 和 toString 函数，concat 和 splice 函数。前两个函数可以将数组转化为字符串，后面两个函数可以通过已有的数组创建新数组，其中 concat 方法通过合并多个数组来形成新数组，而 splice 方法是截取一个数组的子集作为一个新数组。它们的使用示例如下\\n\\n```\\nvar arr = [\\"Mike\\",\\"John\\",\\"Hexo\\"];\\nconsole.log(arr.join());   // Mike,John,Hexo\\nconsole.log(arr.toString());   // Mike,John,Hexo\\n\\nvar arr1 = [1,10,\\"Mike\\"];\\nvar arr2 = [8,7,6];\\nvar cat = arr1.concat(arr2);\\nconsole.log(cat);    // [1, 10, \\"Mike\\", 8, 7, 6]\\nvar num = [1,2,3,4,5,6,7];\\nvar a = num.splice(3,2);     // 3 表示索引，2 表示删除 2 个\\nconsole.log(num);      // [1, 2, 3, 6, 7]\\n```\\n\\n#### 可变函数\\n\\n不去引用数组中的某个元素，就能改变数组内容，这种函数称它为可变函数。\\n\\n###### push() 和 unshift()、pop() 和 shift()\\n\\npush() 方法可以在数组末尾添加元素，而 unshift() 方法可以在数组开头添加元素；相对应的，pop 可以删除数组末尾的元素，而 shift 删除数组的第一个元素。\\n\\n```\\nvar nums = [9,58,15,16,23];\\nnums.push(111);\\nconsole.log(nums);   // 9, 58, 15, 16, 23, 111\\nnums.unshift(1);\\nconsole.log(nums);   // 1, 9, 58, 15, 16, 23, 111\\nnums.pop();\\nconsole.log(nums);   // 1, 9, 58, 15, 16, 23\\nnums.shift();\\nconsole.log(nums);   // 9, 58, 15, 16, 23\\n```\\n\\n###### splice()、sort()、reverse()\\n\\n前面提到的 splice 不仅可以用来删除元素，还可以添加元素进数组。用 sort 可以为数组排序，reverse 将数组内的元素翻转。\\n\\n```\\nvar num = [98,99,100,101];\\nnum.splice(1,0,89);     // 1 表示索引，0 表示不删除元素，89 表示将 89 这个元素添加进数组\\nconsole.log(num);    // 98, 89, 99, 100, 101\\nnum.reverse();\\nconsole.log(num);    //  101, 100, 99, 89, 98\\n```\\n\\n关于 sort 方法非常有意思，它只能对那些字符串类型的元素排列得比较准确，但如果是数字，结果就不那么令人满意了。看看例子.\\n\\n```\\nvar str = [\\"hello\\",\\"client\\",\\"zero\\"];\\nstr.sort();\\nconsole.log(str);     // [\\"client\\", \\"hello\\", \\"zero\\"]  按照字母 a-z 排列准确\\nvar nums = [1,200,51,66,88];\\nnums.sort();\\nconsole.log(nums);   // [1, 200, 51, 66, 88]  有趣的事情来了，因为 200 的 2 比 51 的 5 先，所以 200 排在 51 前头\\n```\\n\\n那如何解决这种排序的错误呢？方法就是在调用 sort() 的时候传入一个函数，该函数可以比较出大小。\\n\\n```\\nfunction compare(num1,num2){\\n  return num1 - num2;\\n}\\nvar nums = [3,1,2,100,4,200];\\nnums.sort(compare);\\nconsole.log(nums);    // 1, 2, 3, 4, 100, 200\\n```\\n\\n可以看到，已经排序正确了，compare 函数就是利用了两数相减，如果结果为正，那么被减数大于减数，如果结果为 0，则两数相等，而如果结果为负，说明被减数小于减数。\\n\\n#### 迭代器方法\\n\\n迭代函数通过对数组中的元素逐个应用，来操作返回相应的值。\\n\\n###### 不返回新数组的 forEach() 、every()、some()、reduce()\\n\\n```\\n// 用 forEach 开方\\nfunction square(num) {\\n    console.log(num,num*num);\\n}\\nvar num = [1,2,3,4,5];\\nnum.forEach(square);\\nconsole.log(num);\\n/*  1 1\\n    2 4\\n    3 9\\n    4 16\\n    5 25\\n*/\\n```\\n\\n```\\n/*\\nevery() 返回值为布尔类型，对于应用的所有元素，该函数返回 true，则该方法返回 true\\n*/\\nfunction isEven(num){\\n  return num % 2 == 0;\\n}\\nvar num = [2,4,6,8,10];\\nvar even = num.every(isEven);\\nif(even){\\n  console.log(\\"所有的数字都是偶数\\");\\n}else{\\n  console.log(\\"不是所有的数字都是偶数\\");\\n}\\n```\\n\\n```\\n/*\\nsome() 与 every() 的不同就是只要有一个元素使改函数返回 true ，那么该方法就返回 true\\n*/\\nfunction isEven(num){\\n  return num % 2 == 0;\\n}\\nvar num = [1,2,3,4,5,6,7,8];\\nvar someEven = num.some(isEven);\\nif(someEven){\\n  console.log(\\"有些数字是偶数\\");\\n}else{\\n  console.log(\\"没有数字是偶数\\");\\n}\\n```\\n\\n```\\n/*\\nreduce() 有两个功能，一是可以对数组元素进行求和，二是将数组元素连接成字符串。\\n*/\\nfucntion add(num1,num2){\\n  return num1 + num2;\\n}\\nvar num = [1,2,3,4];\\nvar sum = num.reduce(add);\\nconsole.log(sum);    // 10\\n\\nfunction concat(str,i) {\\n  return str + i;\\n}\\nvar words = [\\"I am \\",\\"a \\",\\"coder \\"];\\nvar re = words.reduce(concat);\\nconsole.log(re);     // I am a coder\\n```\\n\\n###### 返回新数组的 map() 和 filter()\\n\\nmap 的作用与 forEach 是一样的，区别就是 map 函数返回的是一个新数组。\\n\\n```\\nfunction addFive(grade){\\n  return grade += 5;\\n}\\nvar grade = [77,82,88,95,90];\\nvar result = grade.map(addFive);\\nconsole.log(result);     // 82, 87, 93, 100, 95\\n```\\n\\n而 filter 和 every 相似，区别在于当所有的元素使改函数为 true 时，它并不返回布尔类型，而是返回一个新数组。下面这个例子十分有趣，它随机产生 10 个 0 到 100 的数字作为分数，然后把大于 60 的及格分数筛选出来。\\n\\n```\\nfunction passing(num){\\n  return num >= 60;\\n}\\nvar grades = [];\\nfor(var i = 0;i < 11;i++){\\n  grade[i] = Math.floor(Math.random() * 101);\\n}\\nvar pass = grades.filter(passing);\\nconsole.log(\\"随机产生的 10 个同学的分数为：\\");\\nconsole.log(grades)；\\nconsole.log(\\"及格的分数有：\\");\\nconsole.log(pass)；\\n```\\n\\n上述代码的输出结果为\\n\\n> 随机产生的 10 个同学的分数为：\\n> 21, 4, 89, 45, 5, 51, 71, 7, 46, 53, 47\\n> 及格的分数有：\\n> 89, 71\\n\\n#### 二维数组\\n\\nJavaScript 可以通过在数组里在嵌套一个数组来形成二维数组。\\n\\n```\\nvar grades = [\\n  [88,86,82],\\n  [91,82,83],\\n  [77,72,79],\\n  [86,80,82]\\n];\\nconsole.log(grades[1][2]);    // 83\\n```\\n\\n#### 处理二维数组\\n\\n对于二维数组的处理可以分为两种，一种按列访问，一种是按行访问。\\n按列访问，外层循环对应行，内层循环对应列。例如，上述的数组，每一行对应一个学生三门科目的成绩记录，可以通过相加所有成绩，然后除以科目数来得到该生的平均成绩。\\n\\n```\\nvar grades = [\\n  [88,86,82],\\n  [91,82,83],\\n  [77,72,79],\\n  [86,80,82]\\n];\\nvar total = 0;\\nvar average = 0.0;\\nfor(var row = 0;row<grades.length;++row){\\n  for(var col = 0;col<grades[row].length;++col){\\n    total += grades[row][col];\\n  }\\n  average = total/grades[row].length;\\n  console.log(\\"student \\"+parseInt(row+1)+\\" average: \\"+average.toFixed(2));   // toFixed 表示按照 2 位来保留小数\\n  total = 0;\\n  average = 0.0;\\n}\\n```\\n\\n上述代码的输出结果为\\n\\n> student 1 average: 85.33\\n> student 2 average: 85.33\\n> student 3 average: 76.00\\n> student 4 average: 82.67\\n\\n对于按行访问，则外层循环对应列，内层循环对应行，例如还是上述数组，现在的数组表示一个学生三场考试四门科目的各科分数，我们来求每场考试的平均成绩\\n\\n```\\nvar grades = [\\n  [88,86,82],\\n  [91,82,83],\\n  [77,72,79],\\n  [86,80,82]\\n];\\nvar total = 0;\\nvar average = 0.0;\\n//这里假设每场考试的科目都一样，所以可以通过grades[0].length来获取考试数量\\nfor(var col = 0;col <grades[0].length;++col ){\\n  for(var row= 0;row<grades.length;++row){\\n    total += grades[row][col];\\n  }\\n  average = total/grades.length;\\n  console.log(\\"exam \\"+parseInt(col +1)+\\" average: \\"+average.toFixed(2));\\n  total = 0;\\n  average = 0.0;\\n}\\n```\\n\\n输出结果为：\\n\\n> exam 1 average: 85.50\\n> exam 2 average: 80.00\\n> exam 3 average: 81.50\\n\\n其实只要调整 for 循环的顺序就可以控制是按行还是按列来输出，此外，JavaScript 还可以处理一些参差不齐的数组，比如一个二维数组中的数组，有的是两个元素，有的是四个元素，并不是都相同，在这种情况下，JavaScript 依然可以处理运行而不报错，这是因为不管多或少，都可以通过 length 属性来计算。\\n\\n#### 对象数组\\n\\n如果你有阅读到这里，你应该可以发现上面的所有例子里数据类型都是基本数据类型，不是数字就是字符串。对象数组，顾名思义，就是数组里面的元素可以是对象，这个与 java 的语法很相似，基本上所有的编程语言都是相通的。看看下面这个例子：\\n\\n```\\nfunction point(x,y){\\n  this.x = x;\\n  this.y = y;\\n}\\nfunction show(arr){\\n  for(var i=0;i<arr.length;i++){\\n    console.log(arr[i].x + \\", \\"+arr[i].y);\\n  }\\n}\\nvar p1 = new Point(1,2);\\nvar p2 = new Point(2,4);\\nvar p3 = new Point(8,1);\\nvar p4 = new Point(2,9);\\nvar point = [p1,p2,p3,p4];\\nfor(var i=0;i<point.lengh;i++){\\n  console.log(\\"Point \\"+parseInt(i+1)+\\": \\"+point[i].x+\\", \\"+point[i].y);\\n}\\n```\\n\\n上述程序的输出结果为：\\n\\n> Point 1: 1, 2\\n> Point 2: 2, 4\\n> Point 3: 8, 1\\n> Point 4: 2, 9\\n\\n也可以用之前的 push() 等操作方法来操作对象数组\\n\\n```\\nvar p5 = new Point(11,13);\\npoint.push(p5);\\nconsole.log(\\"添加了 p5 后：\\");\\nshow(point);\\npoint.shift();\\nconsole.log(\\"删除第一个元素后：\\")\\nshow(point);\\n```\\n\\n输出结果为：\\n\\n> 添加了 p5 后：\\n> 1,2\\n> 2,4\\n> 8,1\\n> 2,9\\n> 11,13\\n> 删除第一个元素后：\\n> 2,4\\n> 8,1\\n> 2,9\\n> 11,13\\n","html":"<h2 id=\\"数组\\" tabindex=\\"-1\\">数组 <a class=\\"header-anchor\\" href=\\"#数组\\" aria-label=\\"Permalink to &quot;数组&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>{{ $frontmatter.description }}</p>\\n<h4 id=\\"数组的创建与读写\\" tabindex=\\"-1\\">数组的创建与读写 <a class=\\"header-anchor\\" href=\\"#数组的创建与读写\\" aria-label=\\"Permalink to &quot;数组的创建与读写&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>以下两种方式都可创建数组：</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 字面量方式,常用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">print(num.length);   // 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 构造函数方式</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = new Array(1,5,6,10);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">print(num.length);    // 4</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">// 字面量方式,常用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">print(num.length);   // 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">// 构造函数方式</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = new Array(1,5,6,10);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">print(num.length);    // 4</span></span></code></pre>\\n</div><p>值得注意的是，JavaScript 中的数组数据可以是不同类型，它的语法相对宽松，例如可以指定不同类型数据<code>var example = [1,&quot;Mike&quot;,true,null];</code>另外，可以通过<code>Array.isArray()</code>来判断一个对象是否是数组，例如：</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">print(Array.isArray(num));        // true</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">print(Array.isArray(num));        // true</span></span></code></pre>\\n</div><p>如何读写数组呢？可以使用循环。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for (var i = 0; i &lt; num.length; i++) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(num[i]+&quot; &quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for (var i = 0; i &lt; num.length; i++) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(num[i]+&quot; &quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><h4 id=\\"数组的深复制与浅复制\\" tabindex=\\"-1\\">数组的深复制与浅复制 <a class=\\"header-anchor\\" href=\\"#数组的深复制与浅复制\\" aria-label=\\"Permalink to &quot;数组的深复制与浅复制&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>当我们把数组赋给另外一个数组，然后改变其中一个数组的值，另一数组也会随之改变，这就是数组的浅复制。而深复制指的就是不改变原来的数组而去创建一个新的数组，这种情况是经常使用的，为了不破坏原数组。下面的代码展示了这两种复制</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 浅复制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4,5];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var newNum = num;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num[0] = 10;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(newNum[0]);  // 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 深复制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function copy (arr1,arr2) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  for(var i=0;i&lt;arr1.length;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    arr2[i] = arr1[i];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,5,6,7,9];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var newNum = [];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">copy(num,newNum);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num[0] = 10;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(newNum[0]);    // 仍然为 1</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">// 浅复制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4,5];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var newNum = num;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num[0] = 10;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(newNum[0]);  // 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">// 深复制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function copy (arr1,arr2) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  for(var i=0;i&lt;arr1.length;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    arr2[i] = arr1[i];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,5,6,7,9];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var newNum = [];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">copy(num,newNum);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num[0] = 10;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(newNum[0]);    // 仍然为 1</span></span></code></pre>\\n</div><h4 id=\\"存取函数\\" tabindex=\\"-1\\">存取函数 <a class=\\"header-anchor\\" href=\\"#存取函数\\" aria-label=\\"Permalink to &quot;存取函数&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>JavaScript 提供了一组用来访问数组元素的函数，叫存取函数。最常用的存取函数就是 indexOf() 函数，该函数返回指定查找的值在目标值中是否存在，如果存在，返回该值在数组中的索引，不存在则返回 -1。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var word = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var result = word.indexOf(&quot;A&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(result);    // 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var test = word.indexOf(&quot;F&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(test);   // -1</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var word = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var result = word.indexOf(&quot;A&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(result);    // 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var test = word.indexOf(&quot;F&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(test);   // -1</span></span></code></pre>\\n</div><p>除此之外，还有 join 和 toString 函数，concat 和 splice 函数。前两个函数可以将数组转化为字符串，后面两个函数可以通过已有的数组创建新数组，其中 concat 方法通过合并多个数组来形成新数组，而 splice 方法是截取一个数组的子集作为一个新数组。它们的使用示例如下</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var arr = [&quot;Mike&quot;,&quot;John&quot;,&quot;Hexo&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(arr.join());   // Mike,John,Hexo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(arr.toString());   // Mike,John,Hexo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var arr1 = [1,10,&quot;Mike&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var arr2 = [8,7,6];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var cat = arr1.concat(arr2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(cat);    // [1, 10, &quot;Mike&quot;, 8, 7, 6]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4,5,6,7];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var a = num.splice(3,2);     // 3 表示索引，2 表示删除 2 个</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(num);      // [1, 2, 3, 6, 7]</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var arr = [&quot;Mike&quot;,&quot;John&quot;,&quot;Hexo&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(arr.join());   // Mike,John,Hexo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(arr.toString());   // Mike,John,Hexo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var arr1 = [1,10,&quot;Mike&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var arr2 = [8,7,6];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var cat = arr1.concat(arr2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(cat);    // [1, 10, &quot;Mike&quot;, 8, 7, 6]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4,5,6,7];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var a = num.splice(3,2);     // 3 表示索引，2 表示删除 2 个</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(num);      // [1, 2, 3, 6, 7]</span></span></code></pre>\\n</div><h4 id=\\"可变函数\\" tabindex=\\"-1\\">可变函数 <a class=\\"header-anchor\\" href=\\"#可变函数\\" aria-label=\\"Permalink to &quot;可变函数&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>不去引用数组中的某个元素，就能改变数组内容，这种函数称它为可变函数。</p>\\n<h6 id=\\"push-和-unshift-、pop-和-shift\\" tabindex=\\"-1\\">push() 和 unshift()、pop() 和 shift() <a class=\\"header-anchor\\" href=\\"#push-和-unshift-、pop-和-shift\\" aria-label=\\"Permalink to &quot;push() 和 unshift()、pop() 和 shift()&quot;\\">&ZeroWidthSpace;</a></h6>\\n<p>push() 方法可以在数组末尾添加元素，而 unshift() 方法可以在数组开头添加元素；相对应的，pop 可以删除数组末尾的元素，而 shift 删除数组的第一个元素。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var nums = [9,58,15,16,23];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.push(111);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // 9, 58, 15, 16, 23, 111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.unshift(1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // 1, 9, 58, 15, 16, 23, 111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.pop();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // 1, 9, 58, 15, 16, 23</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.shift();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // 9, 58, 15, 16, 23</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var nums = [9,58,15,16,23];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.push(111);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // 9, 58, 15, 16, 23, 111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.unshift(1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // 1, 9, 58, 15, 16, 23, 111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.pop();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // 1, 9, 58, 15, 16, 23</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.shift();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // 9, 58, 15, 16, 23</span></span></code></pre>\\n</div><h6 id=\\"splice-、sort-、reverse\\" tabindex=\\"-1\\">splice()、sort()、reverse() <a class=\\"header-anchor\\" href=\\"#splice-、sort-、reverse\\" aria-label=\\"Permalink to &quot;splice()、sort()、reverse()&quot;\\">&ZeroWidthSpace;</a></h6>\\n<p>前面提到的 splice 不仅可以用来删除元素，还可以添加元素进数组。用 sort 可以为数组排序，reverse 将数组内的元素翻转。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [98,99,100,101];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num.splice(1,0,89);     // 1 表示索引，0 表示不删除元素，89 表示将 89 这个元素添加进数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(num);    // 98, 89, 99, 100, 101</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num.reverse();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(num);    //  101, 100, 99, 89, 98</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [98,99,100,101];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num.splice(1,0,89);     // 1 表示索引，0 表示不删除元素，89 表示将 89 这个元素添加进数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(num);    // 98, 89, 99, 100, 101</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num.reverse();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(num);    //  101, 100, 99, 89, 98</span></span></code></pre>\\n</div><p>关于 sort 方法非常有意思，它只能对那些字符串类型的元素排列得比较准确，但如果是数字，结果就不那么令人满意了。看看例子.</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var str = [&quot;hello&quot;,&quot;client&quot;,&quot;zero&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">str.sort();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(str);     // [&quot;client&quot;, &quot;hello&quot;, &quot;zero&quot;]  按照字母 a-z 排列准确</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var nums = [1,200,51,66,88];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.sort();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // [1, 200, 51, 66, 88]  有趣的事情来了，因为 200 的 2 比 51 的 5 先，所以 200 排在 51 前头</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var str = [&quot;hello&quot;,&quot;client&quot;,&quot;zero&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">str.sort();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(str);     // [&quot;client&quot;, &quot;hello&quot;, &quot;zero&quot;]  按照字母 a-z 排列准确</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var nums = [1,200,51,66,88];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.sort();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // [1, 200, 51, 66, 88]  有趣的事情来了，因为 200 的 2 比 51 的 5 先，所以 200 排在 51 前头</span></span></code></pre>\\n</div><p>那如何解决这种排序的错误呢？方法就是在调用 sort() 的时候传入一个函数，该函数可以比较出大小。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function compare(num1,num2){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num1 - num2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var nums = [3,1,2,100,4,200];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.sort(compare);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);    // 1, 2, 3, 4, 100, 200</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">function compare(num1,num2){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num1 - num2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var nums = [3,1,2,100,4,200];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.sort(compare);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);    // 1, 2, 3, 4, 100, 200</span></span></code></pre>\\n</div><p>可以看到，已经排序正确了，compare 函数就是利用了两数相减，如果结果为正，那么被减数大于减数，如果结果为 0，则两数相等，而如果结果为负，说明被减数小于减数。</p>\\n<h4 id=\\"迭代器方法\\" tabindex=\\"-1\\">迭代器方法 <a class=\\"header-anchor\\" href=\\"#迭代器方法\\" aria-label=\\"Permalink to &quot;迭代器方法&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>迭代函数通过对数组中的元素逐个应用，来操作返回相应的值。</p>\\n<h6 id=\\"不返回新数组的-foreach-、every-、some-、reduce\\" tabindex=\\"-1\\">不返回新数组的 forEach() 、every()、some()、reduce() <a class=\\"header-anchor\\" href=\\"#不返回新数组的-foreach-、every-、some-、reduce\\" aria-label=\\"Permalink to &quot;不返回新数组的 forEach() 、every()、some()、reduce()&quot;\\">&ZeroWidthSpace;</a></h6>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 用 forEach 开方</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function square(num) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    console.log(num,num*num);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4,5];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num.forEach(square);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(num);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">/*  1 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    2 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    3 9</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    4 16</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    5 25</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">*/</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">// 用 forEach 开方</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function square(num) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    console.log(num,num*num);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4,5];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num.forEach(square);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(num);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">/*  1 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    2 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    3 9</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    4 16</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    5 25</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">*/</span></span></code></pre>\\n</div><div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">every() 返回值为布尔类型，对于应用的所有元素，该函数返回 true，则该方法返回 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function isEven(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num % 2 == 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [2,4,6,8,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var even = num.every(isEven);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">if(even){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;所有的数字都是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}else{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;不是所有的数字都是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">every() 返回值为布尔类型，对于应用的所有元素，该函数返回 true，则该方法返回 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function isEven(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num % 2 == 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [2,4,6,8,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var even = num.every(isEven);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">if(even){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;所有的数字都是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}else{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;不是所有的数字都是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">some() 与 every() 的不同就是只要有一个元素使改函数返回 true ，那么该方法就返回 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function isEven(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num % 2 == 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4,5,6,7,8];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var someEven = num.some(isEven);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">if(someEven){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;有些数字是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}else{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;没有数字是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">some() 与 every() 的不同就是只要有一个元素使改函数返回 true ，那么该方法就返回 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function isEven(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num % 2 == 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4,5,6,7,8];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var someEven = num.some(isEven);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">if(someEven){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;有些数字是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}else{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;没有数字是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">reduce() 有两个功能，一是可以对数组元素进行求和，二是将数组元素连接成字符串。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">fucntion add(num1,num2){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num1 + num2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var sum = num.reduce(add);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(sum);    // 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function concat(str,i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return str + i;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var words = [&quot;I am &quot;,&quot;a &quot;,&quot;coder &quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var re = words.reduce(concat);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(re);     // I am a coder</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">reduce() 有两个功能，一是可以对数组元素进行求和，二是将数组元素连接成字符串。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">fucntion add(num1,num2){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num1 + num2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var sum = num.reduce(add);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(sum);    // 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function concat(str,i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return str + i;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var words = [&quot;I am &quot;,&quot;a &quot;,&quot;coder &quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var re = words.reduce(concat);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(re);     // I am a coder</span></span></code></pre>\\n</div><h6 id=\\"返回新数组的-map-和-filter\\" tabindex=\\"-1\\">返回新数组的 map() 和 filter() <a class=\\"header-anchor\\" href=\\"#返回新数组的-map-和-filter\\" aria-label=\\"Permalink to &quot;返回新数组的 map() 和 filter()&quot;\\">&ZeroWidthSpace;</a></h6>\\n<p>map 的作用与 forEach 是一样的，区别就是 map 函数返回的是一个新数组。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function addFive(grade){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return grade += 5;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grade = [77,82,88,95,90];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var result = grade.map(addFive);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(result);     // 82, 87, 93, 100, 95</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">function addFive(grade){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return grade += 5;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var grade = [77,82,88,95,90];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var result = grade.map(addFive);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(result);     // 82, 87, 93, 100, 95</span></span></code></pre>\\n</div><p>而 filter 和 every 相似，区别在于当所有的元素使改函数为 true 时，它并不返回布尔类型，而是返回一个新数组。下面这个例子十分有趣，它随机产生 10 个 0 到 100 的数字作为分数，然后把大于 60 的及格分数筛选出来。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function passing(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num &gt;= 60;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grades = [];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for(var i = 0;i &lt; 11;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  grade[i] = Math.floor(Math.random() * 101);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var pass = grades.filter(passing);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(&quot;随机产生的 10 个同学的分数为：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(grades)；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(&quot;及格的分数有：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(pass)；</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">function passing(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num &gt;= 60;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var grades = [];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for(var i = 0;i &lt; 11;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  grade[i] = Math.floor(Math.random() * 101);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var pass = grades.filter(passing);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(&quot;随机产生的 10 个同学的分数为：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(grades)；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(&quot;及格的分数有：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(pass)；</span></span></code></pre>\\n</div><p>上述代码的输出结果为</p>\\n<blockquote>\\n<p>随机产生的 10 个同学的分数为：\\n21, 4, 89, 45, 5, 51, 71, 7, 46, 53, 47\\n及格的分数有：\\n89, 71</p>\\n</blockquote>\\n<h4 id=\\"二维数组\\" tabindex=\\"-1\\">二维数组 <a class=\\"header-anchor\\" href=\\"#二维数组\\" aria-label=\\"Permalink to &quot;二维数组&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>JavaScript 可以通过在数组里在嵌套一个数组来形成二维数组。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(grades[1][2]);    // 83</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(grades[1][2]);    // 83</span></span></code></pre>\\n</div><h4 id=\\"处理二维数组\\" tabindex=\\"-1\\">处理二维数组 <a class=\\"header-anchor\\" href=\\"#处理二维数组\\" aria-label=\\"Permalink to &quot;处理二维数组&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>对于二维数组的处理可以分为两种，一种按列访问，一种是按行访问。\\n按列访问，外层循环对应行，内层循环对应列。例如，上述的数组，每一行对应一个学生三门科目的成绩记录，可以通过相加所有成绩，然后除以科目数来得到该生的平均成绩。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for(var row = 0;row&lt;grades.length;++row){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  for(var col = 0;col&lt;grades[row].length;++col){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    total += grades[row][col];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  average = total/grades[row].length;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;student &quot;+parseInt(row+1)+&quot; average: &quot;+average.toFixed(2));   // toFixed 表示按照 2 位来保留小数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for(var row = 0;row&lt;grades.length;++row){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  for(var col = 0;col&lt;grades[row].length;++col){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    total += grades[row][col];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  average = total/grades[row].length;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;student &quot;+parseInt(row+1)+&quot; average: &quot;+average.toFixed(2));   // toFixed 表示按照 2 位来保留小数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><p>上述代码的输出结果为</p>\\n<blockquote>\\n<p>student 1 average: 85.33\\nstudent 2 average: 85.33\\nstudent 3 average: 76.00\\nstudent 4 average: 82.67</p>\\n</blockquote>\\n<p>对于按行访问，则外层循环对应列，内层循环对应行，例如还是上述数组，现在的数组表示一个学生三场考试四门科目的各科分数，我们来求每场考试的平均成绩</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">//这里假设每场考试的科目都一样，所以可以通过grades[0].length来获取考试数量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for(var col = 0;col &lt;grades[0].length;++col ){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  for(var row= 0;row&lt;grades.length;++row){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    total += grades[row][col];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  average = total/grades.length;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;exam &quot;+parseInt(col +1)+&quot; average: &quot;+average.toFixed(2));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">//这里假设每场考试的科目都一样，所以可以通过grades[0].length来获取考试数量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for(var col = 0;col &lt;grades[0].length;++col ){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  for(var row= 0;row&lt;grades.length;++row){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    total += grades[row][col];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  average = total/grades.length;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;exam &quot;+parseInt(col +1)+&quot; average: &quot;+average.toFixed(2));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><p>输出结果为：</p>\\n<blockquote>\\n<p>exam 1 average: 85.50\\nexam 2 average: 80.00\\nexam 3 average: 81.50</p>\\n</blockquote>\\n<p>其实只要调整 for 循环的顺序就可以控制是按行还是按列来输出，此外，JavaScript 还可以处理一些参差不齐的数组，比如一个二维数组中的数组，有的是两个元素，有的是四个元素，并不是都相同，在这种情况下，JavaScript 依然可以处理运行而不报错，这是因为不管多或少，都可以通过 length 属性来计算。</p>\\n<h4 id=\\"对象数组\\" tabindex=\\"-1\\">对象数组 <a class=\\"header-anchor\\" href=\\"#对象数组\\" aria-label=\\"Permalink to &quot;对象数组&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>如果你有阅读到这里，你应该可以发现上面的所有例子里数据类型都是基本数据类型，不是数字就是字符串。对象数组，顾名思义，就是数组里面的元素可以是对象，这个与 java 的语法很相似，基本上所有的编程语言都是相通的。看看下面这个例子：</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function point(x,y){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  this.x = x;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  this.y = y;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function show(arr){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  for(var i=0;i&lt;arr.length;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    console.log(arr[i].x + &quot;, &quot;+arr[i].y);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p1 = new Point(1,2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p2 = new Point(2,4);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p3 = new Point(8,1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p4 = new Point(2,9);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var point = [p1,p2,p3,p4];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for(var i=0;i&lt;point.lengh;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;Point &quot;+parseInt(i+1)+&quot;: &quot;+point[i].x+&quot;, &quot;+point[i].y);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">function point(x,y){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  this.x = x;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  this.y = y;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function show(arr){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  for(var i=0;i&lt;arr.length;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    console.log(arr[i].x + &quot;, &quot;+arr[i].y);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var p1 = new Point(1,2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var p2 = new Point(2,4);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var p3 = new Point(8,1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var p4 = new Point(2,9);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var point = [p1,p2,p3,p4];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for(var i=0;i&lt;point.lengh;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;Point &quot;+parseInt(i+1)+&quot;: &quot;+point[i].x+&quot;, &quot;+point[i].y);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><p>上述程序的输出结果为：</p>\\n<blockquote>\\n<p>Point 1: 1, 2\\nPoint 2: 2, 4\\nPoint 3: 8, 1\\nPoint 4: 2, 9</p>\\n</blockquote>\\n<p>也可以用之前的 push() 等操作方法来操作对象数组</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p5 = new Point(11,13);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">point.push(p5);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(&quot;添加了 p5 后：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">show(point);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">point.shift();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(&quot;删除第一个元素后：&quot;)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">show(point);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var p5 = new Point(11,13);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">point.push(p5);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(&quot;添加了 p5 后：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">show(point);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">point.shift();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(&quot;删除第一个元素后：&quot;)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">show(point);</span></span></code></pre>\\n</div><p>输出结果为：</p>\\n<blockquote>\\n<p>添加了 p5 后：\\n1,2\\n2,4\\n8,1\\n2,9\\n11,13\\n删除第一个元素后：\\n2,4\\n8,1\\n2,9\\n11,13</p>\\n</blockquote>\\n","frontmatter":{"title":"数组","author":"power","description":"与 Java 、PHP 等语言不同，在 JavaScript 中，数组其实是一种特殊的对象","date":"2023-09-21T09:52:51.000Z","link":"./algorithm/Array","tags":["数据结构"]},"excerpt":"","url":"/algorithm/Array.html"},{"src":"---\\nlayout: home\\n\\nhero:\\n  name: 权王\\n  text: \'记录技术的点点滴滴\'\\n  tagline: 凡心所向，素履所往，生如逆旅，一苇以航\\n  actions:\\n    - theme: brand\\n      text: 最新文章\\n      link: ./latestArticles\\n    - theme: alt\\n      text: 简介\\n      link: /about\\n\\nfeatures:\\n  - title: 前端\\n    details: html、css、js、vue、react\\n  - title: 后端\\n    details: node、java\\n  - title: 算法\\n    details: 介绍算法\\n---\\n","html":"","frontmatter":{"layout":"home","hero":{"name":"权王","text":"记录技术的点点滴滴","tagline":"凡心所向，素履所往，生如逆旅，一苇以航","actions":[{"theme":"brand","text":"最新文章","link":"./latestArticles"},{"theme":"alt","text":"简介","link":"/about"}]},"features":[{"title":"前端","details":"html、css、js、vue、react"},{"title":"后端","details":"node、java"},{"title":"算法","details":"介绍算法"}]},"excerpt":"","url":"/"},{"src":"<script setup>\\n \\nimport { data as posts } from \'./posts.data.js\'\\nimport { useData } from \'vitepress\'\\nconst { frontmatter } = useData()\\n\\n<\/script>\\n<style lang=\\"sass\\">\\n.box\\n  border-bottom: 1px solid #eee\\n  padding-bottom: 20px \\n  margin-bottom: 20px\\n.title\\n    font-family: PT Serif,Serif\\n    font-size: 28px\\n    border-bottom: 0\\n    cursor: pointer\\n    transition: all .2s\\n    a\\n        color: #000\\n        font-weight: bold\\na:link\\n    text-decoration: none\\na:hover\\n    text-decoration: underline\\n    color: #d05dd2!important   \\n.description\\n    font-size: 14px\\n\\n    font-weight: 200   \\n    word-wrap: break-word\\n    text-overflow: ellipsis\\n    // overflow: hidden\\n    // display: -webkit-box\\n.meta\\n    /* color: rgba(0,0,0,.54) */\\n    font-weight: 200\\n    display: flex\\n    align-items: center    \\n    font-size: 14px\\n.posts-time-svg\\n    margin-right: 5px\\n    width: 14px\\n    height: 14px       \\n</style>\\n\\n<article :class=\\"{box: !!item.frontmatter?.title}\\" v-for=\\"(item, index) in posts\\" :key=\\"index\\">\\n\\n  <div v-if=\\"item.frontmatter?.title\\">\\n    <header class=\\"title\\">\\n      <a :href=\\"item.frontmatter.link\\" class=\\"nav-link\\">\\n        {{item.frontmatter?.title}}\\n      </a>\\n    </header>\\n    <p class=\\"description\\" >\\n        {{ item.frontmatter?.description }}\\n    </p>\\n    <div class=\\"meta\\">\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"posts-time-svg\\">\\n          <circle cx=\\"12\\" cy=\\"12\\" r=\\"10\\"></circle>\\n          <polyline points=\\"12 6 12 12 16 14\\"></polyline>\\n        </svg>\\n        <span>\\n        {{new Date(Date.parse(String(item.frontmatter?.date).replace(\'Z\', \'\')+\'+08:00\')).toLocaleString(\'chinese\',{ hour12: false })}}\\n        </span>\\n    </div>\\n    <div class=\\"meta\\">\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"posts-time-svg\\">\\n          <path d=\\"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\\"></path>\\n          <line x1=\\"7\\" y1=\\"7\\" x2=\\"7\\" y2=\\"7\\"></line>\\n        </svg>\\n        <span span href=\\"/tag/WebAV\\" class=\\"\\">\\n          {{item && item.frontmatter?.tags.join()}}\\n        </span>\\n    </div>\\n\\n  </div>\\n\\n</article>\\n","html":"<article :class=\\"{box: !!item.frontmatter?.title}\\" v-for=\\"(item, index) in posts\\" :key=\\"index\\">\\n  <div v-if=\\"item.frontmatter?.title\\">\\n    <header class=\\"title\\">\\n      <a :href=\\"item.frontmatter.link\\" class=\\"nav-link\\">\\n        {{item.frontmatter?.title}}\\n      </a>\\n    </header>\\n    <p class=\\"description\\" >\\n        {{ item.frontmatter?.description }}\\n    </p>\\n    <div class=\\"meta\\">\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"posts-time-svg\\">\\n          <circle cx=\\"12\\" cy=\\"12\\" r=\\"10\\"></circle>\\n          <polyline points=\\"12 6 12 12 16 14\\"></polyline>\\n        </svg>\\n        <span>\\n        {{new Date(Date.parse(String(item.frontmatter?.date).replace(\'Z\', \'\')+\'+08:00\')).toLocaleString(\'chinese\',{ hour12: false })}}\\n        </span>\\n    </div>\\n    <div class=\\"meta\\">\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"posts-time-svg\\">\\n          <path d=\\"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\\"></path>\\n          <line x1=\\"7\\" y1=\\"7\\" x2=\\"7\\" y2=\\"7\\"></line>\\n        </svg>\\n        <span span href=\\"/tag/WebAV\\" class=\\"\\">\\n          {{item && item.frontmatter?.tags.join()}}\\n        </span>\\n    </div>\\n  </div>\\n</article>\\n","frontmatter":{},"excerpt":"","url":"/latestArticles.html"}]');const C={key:0},v={class:"title"},f=["href"],B={class:"description"},q={class:"meta"},A=s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"posts-time-svg"},[s("circle",{cx:"12",cy:"12",r:"10"}),s("polyline",{points:"12 6 12 12 16 14"})],-1),D={class:"meta"},b=s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"posts-time-svg"},[s("path",{d:"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}),s("line",{x1:"7",y1:"7",x2:"7",y2:"7"})],-1),k={span:"",href:"/tag/WebAV",class:""},j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"latestArticles.md","filePath":"latestArticles.md","lastUpdated":1695351588000}'),w={name:"latestArticles.md"},$=Object.assign(w,{setup(x){return i(),(S,P)=>(a(),l("div",null,[(a(!0),l(d,null,u(F(g),(n,E)=>{var o,e,t,r,c,y;return a(),l("article",{class:h({box:!!((o=n.frontmatter)!=null&&o.title)}),key:E},[(e=n.frontmatter)!=null&&e.title?(a(),l("div",C,[s("header",v,[s("a",{href:n.frontmatter.link,class:"nav-link"},p((t=n.frontmatter)==null?void 0:t.title),9,f)]),s("p",B,p((r=n.frontmatter)==null?void 0:r.description),1),s("div",q,[A,s("span",null,p(new Date(Date.parse(String((c=n.frontmatter)==null?void 0:c.date).replace("Z","")+"+08:00")).toLocaleString("chinese",{hour12:!1})),1)]),s("div",D,[b,s("span",k,p(n&&((y=n.frontmatter)==null?void 0:y.tags.join())),1)])])):m("",!0)],2)}),128))]))}});export{j as __pageData,$ as default};
