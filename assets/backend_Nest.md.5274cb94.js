import{_ as l,o as p,c as o,k as s,a as e,t as a,Q as t}from"./chunks/framework.bad694e9.js";const r="/power-blog/assets/image1.f1fc6c5d.png",c="/power-blog/assets/image.742306f1.png",f=JSON.parse('{"title":"nest精髓","description":null,"frontmatter":{"title":"nest精髓","author":"power","description":null,"date":"2023-09-26T21:13:04.000Z","link":"./backend/Nest","tags":["node"]},"headers":[],"relativePath":"backend/Nest.md","filePath":"backend/Nest.md","lastUpdated":1696646727000}'),y={name:"backend/Nest.md"},i={id:"frontmatter-title",tabindex:"-1"},E=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),F=t('<ul><li><p>著名 nest 开源项目：<a href="https://github.com/apitable/apitable" target="_blank" rel="noreferrer">apiTabel</a></p></li><li><p>nestjs 架构 -- 适配器设计模式</p><p><img src="'+r+`" alt="nest架构图--适配器模式"></p></li></ul><h1 id="nest-的使用" tabindex="-1">nest 的使用 <a class="header-anchor" href="#nest-的使用" aria-label="Permalink to &quot;nest 的使用&quot;">​</a></h1><ul><li>新建项目</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 第一种：</span></span>
<span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@nestjs/cli</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> [projectName]</span></span>
<span class="line"><span style="color:#6A737D;"># 第二种</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@nestjs/cli</span></span>
<span class="line"><span style="color:#B392F0;">nest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> [projectName]</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@nestjs/cli</span></span>
<span class="line"><span style="color:#6A737D;"># 帮助</span></span>
<span class="line"><span style="color:#B392F0;">nest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-h</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 第一种：</span></span>
<span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@nestjs/cli</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> [projectName]</span></span>
<span class="line"><span style="color:#6A737D;"># 第二种</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@nestjs/cli</span></span>
<span class="line"><span style="color:#6F42C1;">nest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> [projectName]</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@nestjs/cli</span></span>
<span class="line"><span style="color:#6A737D;"># 帮助</span></span>
<span class="line"><span style="color:#6F42C1;">nest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-h</span></span></code></pre></div><ul><li>nest new 快速创建项目</li><li>nest generate resource modlule 快速生成 modlule 模块的 crud 代码</li><li>nest build 使用 tsc 或者 webpack 构建代码</li><li>nest start 启动开发服务，支持 watch 和调试</li><li>nest info 打印 node、npm、nest 包的依赖版本</li></ul><h1 id="_5-种-http-数据传输方式" tabindex="-1">5 种 http 数据传输方式 <a class="header-anchor" href="#_5-种-http-数据传输方式" aria-label="Permalink to &quot;5 种 http 数据传输方式&quot;">​</a></h1><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 1、 路径参数111</span></span>
<span class="line"><span style="color:#B392F0;">http://power17.xyz/1111</span></span>
<span class="line"><span style="color:#6A737D;"># 2、query（get）</span></span>
<span class="line"><span style="color:#B392F0;">http://power17.xyz?name</span><span style="color:#E1E4E8;">=power&amp;age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#6A737D;"># 3、 form 表单提交数据</span></span>
<span class="line"><span style="color:#B392F0;">application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:#B392F0;">post</span></span>
<span class="line"><span style="color:#B392F0;">http://power17.xyz</span></span>
<span class="line"><span style="color:#B392F0;">body：name</span><span style="color:#E1E4E8;">=power&amp;age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#6A737D;"># 4、form-data：content type 为 multipart/form-data（适合传输文件）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 5、json</span></span>
<span class="line"><span style="color:#B392F0;">form-urlencoded</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">需要对内容做</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">url</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">encode，而</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">form</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">则需要加很长的</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">boundary，两种方式都有一些缺点。</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">json没有</span></span>
<span class="line"><span style="color:#B392F0;">Nest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">解析</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">form</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">使用</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FilesInterceptor</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">的拦截器，用</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@UseInterceptors</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">装饰器启用，然后通过</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@UploadedFiles</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">来取。非文件的内容，同样是通过</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@Body</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">来取</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 1、 路径参数111</span></span>
<span class="line"><span style="color:#6F42C1;">http://power17.xyz/1111</span></span>
<span class="line"><span style="color:#6A737D;"># 2、query（get）</span></span>
<span class="line"><span style="color:#6F42C1;">http://power17.xyz?name</span><span style="color:#24292E;">=power&amp;age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#6A737D;"># 3、 form 表单提交数据</span></span>
<span class="line"><span style="color:#6F42C1;">application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:#6F42C1;">post</span></span>
<span class="line"><span style="color:#6F42C1;">http://power17.xyz</span></span>
<span class="line"><span style="color:#6F42C1;">body：name</span><span style="color:#24292E;">=power&amp;age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#6A737D;"># 4、form-data：content type 为 multipart/form-data（适合传输文件）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 5、json</span></span>
<span class="line"><span style="color:#6F42C1;">form-urlencoded</span><span style="color:#24292E;"> </span><span style="color:#032F62;">需要对内容做</span><span style="color:#24292E;"> </span><span style="color:#032F62;">url</span><span style="color:#24292E;"> </span><span style="color:#032F62;">encode，而</span><span style="color:#24292E;"> </span><span style="color:#032F62;">form</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">则需要加很长的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">boundary，两种方式都有一些缺点。</span><span style="color:#24292E;"> </span><span style="color:#032F62;">json没有</span></span>
<span class="line"><span style="color:#6F42C1;">Nest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">解析</span><span style="color:#24292E;"> </span><span style="color:#032F62;">form</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">使用</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FilesInterceptor</span><span style="color:#24292E;"> </span><span style="color:#032F62;">的拦截器，用</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@UseInterceptors</span><span style="color:#24292E;"> </span><span style="color:#032F62;">装饰器启用，然后通过</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@UploadedFiles</span><span style="color:#24292E;"> </span><span style="color:#032F62;">来取。非文件的内容，同样是通过</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@Body</span><span style="color:#24292E;"> </span><span style="color:#032F62;">来取</span></span></code></pre></div><ul><li>Nest 解析 form data 使用 FilesInterceptor 的拦截器，用 @UseInterceptors 装饰器启用，然后通过 @UploadedFiles 来取。非文件的内容，同样是通过 @Body 来取。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// npm i -D @types/multer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AnyFilesInterceptor } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/platform-express&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { CreatePersonDto } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./dto/create-person.dto&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;api/person&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PersonController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">Post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">UseInterceptors</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">AnyFilesInterceptor</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      dest: </span><span style="color:#9ECBFF;">&#39;uploads/&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">body2</span><span style="color:#E1E4E8;">(@</span><span style="color:#B392F0;">Body</span><span style="color:#E1E4E8;">() </span><span style="color:#FFAB70;">createPersonDto</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreatePersonDto</span><span style="color:#E1E4E8;">, @</span><span style="color:#B392F0;">UploadedFiles</span><span style="color:#E1E4E8;">() </span><span style="color:#FFAB70;">files</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Express</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Multer</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(files);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`received: \${</span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">createPersonDto</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// npm i -D @types/multer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AnyFilesInterceptor } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/platform-express&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { CreatePersonDto } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./dto/create-person.dto&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;api/person&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PersonController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">Post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">UseInterceptors</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">AnyFilesInterceptor</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      dest: </span><span style="color:#032F62;">&#39;uploads/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">body2</span><span style="color:#24292E;">(@</span><span style="color:#6F42C1;">Body</span><span style="color:#24292E;">() </span><span style="color:#E36209;">createPersonDto</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreatePersonDto</span><span style="color:#24292E;">, @</span><span style="color:#6F42C1;">UploadedFiles</span><span style="color:#24292E;">() </span><span style="color:#E36209;">files</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Express</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Multer</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(files);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`received: \${</span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">(</span><span style="color:#24292E;">createPersonDto</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="ioc-inverse-of-controll-di-dependency-injection" tabindex="-1">IOC：Inverse of Controll,DI:Dependency Injection <a class="header-anchor" href="#ioc-inverse-of-controll-di-dependency-injection" aria-label="Permalink to &quot;IOC：Inverse of Controll,DI:Dependency Injection&quot;">​</a></h2><h2 id="aop-aspect-oriented-programming" tabindex="-1">AOP （Aspect Oriented Programming <a class="header-anchor" href="#aop-aspect-oriented-programming" aria-label="Permalink to &quot;AOP （Aspect Oriented Programming&quot;">​</a></h2><p><img src="`+c+`" alt="Alt text"></p><h2 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#  chrome://inspect/  9229</span></span>
<span class="line"><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--inspect-brk</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#  chrome://inspect/  9229</span></span>
<span class="line"><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--inspect-brk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.js</span></span></code></pre></div><h2 id="nest-装饰器" tabindex="-1">nest 装饰器 <a class="header-anchor" href="#nest-装饰器" aria-label="Permalink to &quot;nest 装饰器&quot;">​</a></h2><ul><li>@Module： 声明 Nest 模块</li><li>@Controller：声明模块里的 controller</li><li>@Injectable：声明模块里可以注入的 provider</li><li>@Inject：通过 token 手动指定注入的 provider，token 可以是 class 或者 string</li><li>@Optional：声明注入的 provider 是可选的，可以为空</li><li>@Global：声明全局模块</li><li>@Catch：声明 exception filter 处理的 exception 类型</li><li>@UseFilters：路由级别使用 exception filter</li><li>@UsePipes：路由级别使用 pipe</li><li>@UseInterceptors：路由级别使用 interceptor</li><li>@SetMetadata：在 class 或者 handler 上添加 metadata</li><li>@Get、@Post、@Put、@Delete、@Patch、@Options、@Head：声明 get、post、put、 -delete、patch、options、head 的请求方式</li><li>@Param：取出 url 中的参数，比如 /aaa/:id 中的 id</li><li>@Query: 取出 query 部分的参数，比如 /aaa?name=xx 中的 name</li><li>@Body：取出请求 body，通过 dto class 来接收</li><li>@Headers：取出某个或全部请求头</li><li>@Session：取出 session 对象，需要启用 express-session 中间件</li><li>@HostParm： 取出 host 里的参数</li><li>@Req、@Request：注入 request 对象</li><li>@Res、@Response：注入 response 对象，一旦注入了这个 Nest 就不会把返回值作为响应了，除 - 非指定 passthrough 为 true</li><li>@Next：注入调用下一个 handler 的 next 方法</li><li>@HttpCode： 修改响应的状态码</li><li>@Header：修改响应头</li><li>@Redirect：指定重定向的 url</li><li>@Render：指定渲染用的模版引擎</li></ul><h2 id="ngix-配置-nginxconfig-io" tabindex="-1">ngix 配置：nginxconfig.io <a class="header-anchor" href="#ngix-配置-nginxconfig-io" aria-label="Permalink to &quot;ngix 配置：nginxconfig.io&quot;">​</a></h2>`,17);function d(n,h,C,m,u,B){return p(),o("div",null,[s("h1",i,[e(a(n.$frontmatter.title)+" ",1),E]),s("p",null,a(n.$frontmatter.description),1),F])}const b=l(y,[["render",d]]);export{f as __pageData,b as default};
