import{u as i,o as a,c as l,F as E,D as u,l as d,k as s,t as p,e as h}from"./chunks/framework.9133f087.js";const m=JSON.parse('[{"src":"# 这是一个关于成长的故事\\n\\n- 博客目录\\n\\n```sh\\n.\\n├── package.json\\n├── pnpm-lock.yaml\\n└── src\\n├── about.md\\n├── algorithm\\n│ ├── Array.md\\n│ └── example.md\\n├── frontend\\n└── index.md\\n```\\n","html":"<h1 id=\\"这是一个关于成长的故事\\" tabindex=\\"-1\\">这是一个关于成长的故事 <a class=\\"header-anchor\\" href=\\"#这是一个关于成长的故事\\" aria-label=\\"Permalink to &quot;这是一个关于成长的故事&quot;\\">&ZeroWidthSpace;</a></h1>\\n<ul>\\n<li>博客目录</li>\\n</ul>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">├──</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">package.json</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">├──</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">pnpm-lock.yaml</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">└──</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">src</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">├──</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">about.md</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">├──</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">algorithm</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">│</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">├──</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">Array.md</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">│</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">└──</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">example.md</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">├──</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">frontend</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">└──</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">index.md</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">├──</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">package.json</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">├──</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">pnpm-lock.yaml</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">└──</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">src</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">├──</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">about.md</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">├──</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">algorithm</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">│</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">├──</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">Array.md</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">│</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">└──</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">example.md</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">├──</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">frontend</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">└──</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">index.md</span></span></code></pre>\\n</div>","frontmatter":{},"excerpt":"","url":"/about.html"},{"src":"---\\ntitle: vite源码解析\\nauthor: power\\ndescription: \'vite作为web开发构建工具，其重要的目的是开发和构建\'\\ndate: 2023-09-21 12:46:28\\nlink: ./frontend/Vite\\ntags:\\n  - 数据结构\\n---\\n\\n{{$frontmatter.description}}\\n","html":"<p>{{$frontmatter.description}}</p>\\n","frontmatter":{"title":"vite源码解析","author":"power","description":"vite作为web开发构建工具，其重要的目的是开发和构建","date":"2023-09-21T12:46:28.000Z","link":"./frontend/Vite","tags":["数据结构"]},"excerpt":"","url":"/frontend/Vite.html"},{"src":"---\\ntitle: 排序\\nauthor: power\\ndescription: \'冒泡排序： 左右指针，右指针不断-1 重复直到 0\\n\\n- 网上大部分都是双循环，用 i、j 表示不容易读。其实冒泡排序其实是右指针往回移动，每次左指针跑一遍将最大的排在最后面，\'\\ndate: 2023-09-21 11:12:29\\nlink: ./algorithm/Sort\\ntags:\\n  - 数据结构\\n---\\n\\n## 排序\\n\\n{{ $frontmatter.description }}\\n\\n```java\\n// java\\npackage sandbox;\\nimport java.util.Arrays;\\n\\n// java\\nclass Sort {\\n  public static void main(String[] args) {\\n    int[] arr = { 1, 2, 3, 4, 5, 6, 7 };\\n    int[] sortArr = sortArray(arr);\\n    System.out.println(Arrays.toString(sortArr));\\n  }\\n\\n  public static int[] sortArray(int[] nums) { // 冒泡排序\\n    int right = nums.length - 1;\\n    for (int left = 0; left <= right; left++) {\\n      // 重置j和end指针\\n      if (left == right) {\\n        right = right - 1;\\n        left = 0;\\n      }\\n      // 交换\\n      if (nums[left] > nums[left + 1]) {\\n        int tem = nums[left];\\n        nums[left] = nums[left + 1];\\n        nums[left + 1] = tem;\\n      }\\n    }\\n    return nums;\\n  }\\n}\\n```\\n","html":"<h2 id=\\"排序\\" tabindex=\\"-1\\">排序 <a class=\\"header-anchor\\" href=\\"#排序\\" aria-label=\\"Permalink to &quot;排序&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>{{ $frontmatter.description }}</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// java</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">package</span><span style=\\"color: #E1E4E8\\"> sandbox;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">import</span><span style=\\"color: #E1E4E8\\"> java.util.Arrays;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// java</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">class</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Sort</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">public</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">static</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">void</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">main</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #F97583\\">String</span><span style=\\"color: #E1E4E8\\">[] </span><span style=\\"color: #FFAB70\\">args</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\">[] arr </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">3</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">4</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">5</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">6</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">7</span><span style=\\"color: #E1E4E8\\"> };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\">[] sortArr </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">sortArray</span><span style=\\"color: #E1E4E8\\">(arr);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    System.out.</span><span style=\\"color: #B392F0\\">println</span><span style=\\"color: #E1E4E8\\">(Arrays.</span><span style=\\"color: #B392F0\\">toString</span><span style=\\"color: #E1E4E8\\">(sortArr));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">public</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">static</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\">[] </span><span style=\\"color: #B392F0\\">sortArray</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\">[] </span><span style=\\"color: #FFAB70\\">nums</span><span style=\\"color: #E1E4E8\\">) { </span><span style=\\"color: #6A737D\\">// 冒泡排序</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\"> right </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> nums.length </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">for</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\"> left </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">; left </span><span style=\\"color: #F97583\\">&lt;=</span><span style=\\"color: #E1E4E8\\"> right; left</span><span style=\\"color: #F97583\\">++</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// 重置j和end指针</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (left </span><span style=\\"color: #F97583\\">==</span><span style=\\"color: #E1E4E8\\"> right) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        right </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> right </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        left </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #6A737D\\">// 交换</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (nums[left] </span><span style=\\"color: #F97583\\">&gt;</span><span style=\\"color: #E1E4E8\\"> nums[left </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">]) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #F97583\\">int</span><span style=\\"color: #E1E4E8\\"> tem </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> nums[left];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        nums[left] </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> nums[left </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        nums[left </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">] </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> tem;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> nums;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// java</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">package</span><span style=\\"color: #24292E\\"> sandbox;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">import</span><span style=\\"color: #24292E\\"> java.util.Arrays;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// java</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">class</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Sort</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">public</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">static</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">void</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">main</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #D73A49\\">String</span><span style=\\"color: #24292E\\">[] </span><span style=\\"color: #E36209\\">args</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\">[] arr </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">3</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">4</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">5</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">6</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">7</span><span style=\\"color: #24292E\\"> };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\">[] sortArr </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">sortArray</span><span style=\\"color: #24292E\\">(arr);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    System.out.</span><span style=\\"color: #6F42C1\\">println</span><span style=\\"color: #24292E\\">(Arrays.</span><span style=\\"color: #6F42C1\\">toString</span><span style=\\"color: #24292E\\">(sortArr));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">public</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">static</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\">[] </span><span style=\\"color: #6F42C1\\">sortArray</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\">[] </span><span style=\\"color: #E36209\\">nums</span><span style=\\"color: #24292E\\">) { </span><span style=\\"color: #6A737D\\">// 冒泡排序</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\"> right </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> nums.length </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">for</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\"> left </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">; left </span><span style=\\"color: #D73A49\\">&lt;=</span><span style=\\"color: #24292E\\"> right; left</span><span style=\\"color: #D73A49\\">++</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// 重置j和end指针</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (left </span><span style=\\"color: #D73A49\\">==</span><span style=\\"color: #24292E\\"> right) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        right </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> right </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        left </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #6A737D\\">// 交换</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (nums[left] </span><span style=\\"color: #D73A49\\">&gt;</span><span style=\\"color: #24292E\\"> nums[left </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">]) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #D73A49\\">int</span><span style=\\"color: #24292E\\"> tem </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> nums[left];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        nums[left] </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> nums[left </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        nums[left </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">] </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> tem;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> nums;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n</div>","frontmatter":{"title":"排序","author":"power","description":"冒泡排序： 左右指针，右指针不断-1 重复直到 0\\n- 网上大部分都是双循环，用 i、j 表示不容易读。其实冒泡排序其实是右指针往回移动，每次左指针跑一遍将最大的排在最后面，","date":"2023-09-21T11:12:29.000Z","link":"./algorithm/Sort","tags":["数据结构"]},"excerpt":"","url":"/algorithm/Sort.html"},{"src":"---\\ntitle: 链表\\nauthor: power\\ndescription: \'链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“结点”。\'\\ndate: 2023-09-21 10:58:00\\nlink: ./algorithm/Array\\ntags:\\n  - 数据结构\\n---\\n\\n{{ $frontmatter.description }}\\n\\n```js\\n/**\\n * 1）单链表的插入、删除、查找操作；\\n * 2）链表中存储的是int类型的数据；\\n */\\nclass Node {\\n  constructor(element) {\\n    this.element = element;\\n    this.next = null;\\n  }\\n}\\nclass LinkList {\\n  constructor() {\\n    this.head = new Node(\'head\');\\n  }\\n  // 遍历\\n  forEach() {\\n    let currentNode = this.head.next;\\n    while (currentNode.next !== null) {\\n      console.log(currentNode.element);\\n      currentNode = currentNode.next;\\n    }\\n  }\\n\\n  // 通过值查找\\n  findByValue(val) {\\n    let currentElement = this.head;\\n    while (currentElement.next !== null && currentElement.element !== val) {\\n      currentElement = currentElement.next;\\n    }\\n    return currentElement === null ? -1 : currentElement;\\n  }\\n  // 根据index查找节点，下标从0开始\\n  findByIndex(index) {\\n    let currentNode = this.head.next;\\n    let pos = 0;\\n    while (currentNode !== null && pos !== index) {\\n      currentNode = currentNode.next;\\n      pos++;\\n    }\\n    return currentNode === null ? -1 : currentNode;\\n  }\\n  // findPrev\\n  findPrev(item) {\\n    let currentNode = this.head;\\n    while (currentNode.next !== null && currentNode.next.element !== item) {\\n      currentNode = currentNode.next;\\n    }\\n    return currentNode === null ? -1 : currentNode;\\n  }\\n  // create\\n  append(element) {\\n    let currentElement = this.head;\\n    const newNode = new Node(element);\\n    while (currentElement.next) {\\n      currentElement = currentElement.next;\\n    }\\n    currentElement.next = newNode;\\n  }\\n  insert(newValue, value) {\\n    const currentNode = this.findByValue(value);\\n    if (currentNode === null) {\\n      console.log(\'未找到该值\');\\n      return -1;\\n    }\\n    const newNode = new Node(newValue);\\n    // insert\\n    newNode.next = currentNode.next;\\n    currentNode.next = newNode;\\n  }\\n  // delete\\n  remove(item) {\\n    const preNode = this.findPrev(item);\\n    if (preNode === -1) {\\n      console.log(\'未找到该值\');\\n      return -1;\\n    }\\n    preNode.next = preNode.next.next;\\n  }\\n  removeByIndex(index) {\\n    let currentNode = this.head.next;\\n    let pos = 1;\\n    while (currentNode !== null && pos < index) {\\n      currentNode = currentNode.next;\\n      pos++;\\n    }\\n    if (currentNode !== null && currentNode.next !== null) {\\n      currentNode.next = currentNode.next.next;\\n    }\\n    console.log(\'无法删除最后一个节点或者该节点不存在\');\\n    return false;\\n  }\\n  removeByEndIndex(index) {\\n    this.reverseList();\\n    this.removeByIndex(index);\\n    this.reverseList();\\n  }\\n  /**\\n   * 1) 单链表反转\\n   * 2) 链表中环的检测\\n   * 3) 两个有序的链表合并\\n   * 4) 删除链表倒数第n个结点\\n   * 5) 求链表的中间结点\\n   *\\n   */\\n  // 反转链表\\n  reverseList() {\\n    const root = new Node(\'head\');\\n    let currentNode = this.head.next;\\n    while (currentNode !== null) {\\n      const next = currentNode.next;\\n      currentNode.next = root.next;\\n      root.next = currentNode;\\n      currentNode = next;\\n    }\\n    this.head = root;\\n  }\\n\\n  // reverseList() {\\n  //   let currentNode = this.head.next;\\n  //   let previousNode = null;\\n  //   while (currentNode !== null) {\\n  //     const next = currentNode.next;\\n  //     currentNode.next = previousNode;\\n  //     previousNode = currentNode;\\n  //     currentNode = next;\\n  //   }\\n  //   this.head.next = previousNode;\\n  // }\\n  // 环检测\\n  checkCircle() {\\n    let fast = this.head.next;\\n    let slow = this.head;\\n    while (slow.next !== null && fast.next !== null && fast.next.next !== null) {\\n      slow = slow.next;\\n      fast = fast.next.next;\\n      if (slow === fast) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n  // 找中点\\n  findMiddleNode() {\\n    let slow = this.head;\\n    let fast = this.head;\\n    while (slow.next !== null && fast.next !== null && fast.next.next !== null) {\\n      slow = slow.next;\\n      fast = fast.next.next;\\n    }\\n    console.log(slow);\\n    return slow;\\n  }\\n}\\n// Test\\nconst LList = new LinkList();\\nLList.append(1);\\nLList.append(2);\\nLList.append(3);\\nLList.append(4); // chen -> curry -> sang -> zhao\\n\\n// LList.insert(3, 5);\\n\\nLList.forEach();\\nconsole.log(JSON.stringify(LList, null, 2));\\n\\nLList.findMiddleNode();\\n// 删除\\n// LList.removeByIndex(2);\\nLList.removeByEndIndex(2);\\n// 反转\\n// LList.reverseList();\\n// 成环\\n// const lastElement = LList.findByIndex(3);\\n// lastElement.next = LList.head;\\n// console.log(LList.checkCircle(), lastElement);\\n```\\n","html":"<p>{{ $frontmatter.description }}</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> * 1）单链表的插入、删除、查找操作；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> * 2）链表中存储的是int类型的数据；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">class</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">constructor</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">element</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.element </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> element;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">class</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">LinkList</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">constructor</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;head&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 遍历</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">forEach</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(currentNode.element);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 通过值查找</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">findByValue</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">val</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentElement </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentElement.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> currentElement.element </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> val) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentElement </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentElement.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> currentElement </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> currentElement;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 根据index查找节点，下标从0开始</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">findByIndex</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">index</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> pos </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> pos </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> index) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      pos</span><span style=\\"color: #F97583\\">++</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// findPrev</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">findPrev</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">item</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> currentNode.next.element </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> item) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// create</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">element</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentElement </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">newNode</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\">(element);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentElement.next) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentElement </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentElement.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    currentElement.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">insert</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">newValue</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">value</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">currentNode</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">findByValue</span><span style=\\"color: #E1E4E8\\">(value);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;未找到该值&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">newNode</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\">(newValue);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// insert</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    newNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    currentNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// delete</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">remove</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">item</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">preNode</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">findPrev</span><span style=\\"color: #E1E4E8\\">(item);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (preNode </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;未找到该值&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    preNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> preNode.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">removeByIndex</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">index</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> pos </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> pos </span><span style=\\"color: #F97583\\">&lt;</span><span style=\\"color: #E1E4E8\\"> index) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      pos</span><span style=\\"color: #F97583\\">++</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> currentNode.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;无法删除最后一个节点或者该节点不存在&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">removeByEndIndex</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">index</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">reverseList</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">removeByIndex</span><span style=\\"color: #E1E4E8\\">(index);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">reverseList</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 1) 单链表反转</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 2) 链表中环的检测</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 3) 两个有序的链表合并</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 4) 删除链表倒数第n个结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 5) 求链表的中间结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   *</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 反转链表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">reverseList</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">root</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Node</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;head&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (currentNode </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">next</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> root.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      root.next </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      currentNode </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> root;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// reverseList() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   let currentNode = this.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   let previousNode = null;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   while (currentNode !== null) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//     const next = currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//     currentNode.next = previousNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//     previousNode = currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//     currentNode = next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//   this.head.next = previousNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 环检测</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">checkCircle</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> fast </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> slow </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (slow.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> fast.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> fast.next.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      slow </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> slow.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      fast </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> fast.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (slow </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> fast) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">// 找中点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">findMiddleNode</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> slow </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> fast </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">while</span><span style=\\"color: #E1E4E8\\"> (slow.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> fast.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">&amp;&amp;</span><span style=\\"color: #E1E4E8\\"> fast.next.next </span><span style=\\"color: #F97583\\">!==</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      slow </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> slow.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      fast </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> fast.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(slow);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> slow;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// Test</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">LList</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">LinkList</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">3</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">append</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">4</span><span style=\\"color: #E1E4E8\\">); </span><span style=\\"color: #6A737D\\">// chen -&gt; curry -&gt; sang -&gt; zhao</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.insert(3, 5);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">forEach</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">(LList, </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #E1E4E8\\">));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">findMiddleNode</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 删除</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.removeByIndex(2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">LList.</span><span style=\\"color: #B392F0\\">removeByEndIndex</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 反转</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.reverseList();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 成环</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// const lastElement = LList.findByIndex(3);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// lastElement.next = LList.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// console.log(LList.checkCircle(), lastElement);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> * 1）单链表的插入、删除、查找操作；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> * 2）链表中存储的是int类型的数据；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">class</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">constructor</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">element</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.element </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> element;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">class</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">LinkList</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">constructor</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;head&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 遍历</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">forEach</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(currentNode.element);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 通过值查找</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">findByValue</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">val</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentElement </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentElement.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> currentElement.element </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> val) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentElement </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentElement.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> currentElement </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> currentElement;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 根据index查找节点，下标从0开始</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">findByIndex</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">index</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> pos </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> pos </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> index) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      pos</span><span style=\\"color: #D73A49\\">++</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// findPrev</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">findPrev</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">item</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> currentNode.next.element </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> item) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// create</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">element</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentElement </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">newNode</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\">(element);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentElement.next) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentElement </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentElement.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    currentElement.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">insert</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">newValue</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">value</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">currentNode</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">findByValue</span><span style=\\"color: #24292E\\">(value);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;未找到该值&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">newNode</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\">(newValue);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// insert</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    newNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    currentNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// delete</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">remove</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">item</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">preNode</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">findPrev</span><span style=\\"color: #24292E\\">(item);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (preNode </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;未找到该值&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    preNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> preNode.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">removeByIndex</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">index</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> pos </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> pos </span><span style=\\"color: #D73A49\\">&lt;</span><span style=\\"color: #24292E\\"> index) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      pos</span><span style=\\"color: #D73A49\\">++</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> currentNode.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;无法删除最后一个节点或者该节点不存在&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">removeByEndIndex</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">index</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">reverseList</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">removeByIndex</span><span style=\\"color: #24292E\\">(index);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">reverseList</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 1) 单链表反转</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 2) 链表中环的检测</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 3) 两个有序的链表合并</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 4) 删除链表倒数第n个结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   * 5) 求链表的中间结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   *</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">   */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 反转链表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">reverseList</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">root</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Node</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;head&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (currentNode </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">next</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> root.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      root.next </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      currentNode </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> root;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// reverseList() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   let currentNode = this.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   let previousNode = null;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   while (currentNode !== null) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//     const next = currentNode.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//     currentNode.next = previousNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//     previousNode = currentNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//     currentNode = next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//   this.head.next = previousNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 环检测</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">checkCircle</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> fast </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> slow </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (slow.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> fast.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> fast.next.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      slow </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> slow.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      fast </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> fast.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (slow </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> fast) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">// 找中点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">findMiddleNode</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> slow </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> fast </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">while</span><span style=\\"color: #24292E\\"> (slow.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> fast.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">&amp;&amp;</span><span style=\\"color: #24292E\\"> fast.next.next </span><span style=\\"color: #D73A49\\">!==</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      slow </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> slow.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      fast </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> fast.next.next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(slow);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> slow;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// Test</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">LList</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">LinkList</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">3</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">append</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">4</span><span style=\\"color: #24292E\\">); </span><span style=\\"color: #6A737D\\">// chen -&gt; curry -&gt; sang -&gt; zhao</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.insert(3, 5);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">forEach</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">(LList, </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #24292E\\">));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">findMiddleNode</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 删除</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.removeByIndex(2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">LList.</span><span style=\\"color: #6F42C1\\">removeByEndIndex</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 反转</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// LList.reverseList();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 成环</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// const lastElement = LList.findByIndex(3);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// lastElement.next = LList.head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// console.log(LList.checkCircle(), lastElement);</span></span></code></pre>\\n</div>","frontmatter":{"title":"链表","author":"power","description":"链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“结点”。","date":"2023-09-21T10:58:00.000Z","link":"./algorithm/Array","tags":["数据结构"]},"excerpt":"","url":"/algorithm/LinkedList.html"},{"src":"---\\ntitle: 数组\\nauthor: power\\ndescription: \'与 Java 、PHP 等语言不同，在 JavaScript 中，数组其实是一种特殊的对象\'\\ndate: 2023-09-21 09:52:51\\nlink: ./algorithm/Array\\ntags:\\n  - 数据结构\\n---\\n\\n## 数组\\n\\n{{ $frontmatter.description }}\\n\\n#### 数组的创建与读写\\n\\n以下两种方式都可创建数组：\\n\\n```\\n// 字面量方式,常用\\nvar num = [1,5,6,10];\\nprint(num.length);   // 4\\n\\n// 构造函数方式\\nvar num = new Array(1,5,6,10);\\nprint(num.length);    // 4\\n```\\n\\n值得注意的是，JavaScript 中的数组数据可以是不同类型，它的语法相对宽松，例如可以指定不同类型数据`var example = [1,\\"Mike\\",true,null];`另外，可以通过`Array.isArray()`来判断一个对象是否是数组，例如：\\n\\n```\\nvar num = [1,5,6,10];\\nprint(Array.isArray(num));        // true\\n```\\n\\n如何读写数组呢？可以使用循环。\\n\\n```\\nvar num = [1,5,6,10];\\nfor (var i = 0; i < num.length; i++) {\\n  console.log(num[i]+\\" \\");\\n}\\n```\\n\\n#### 数组的深复制与浅复制\\n\\n当我们把数组赋给另外一个数组，然后改变其中一个数组的值，另一数组也会随之改变，这就是数组的浅复制。而深复制指的就是不改变原来的数组而去创建一个新的数组，这种情况是经常使用的，为了不破坏原数组。下面的代码展示了这两种复制\\n\\n```\\n// 浅复制\\nvar num = [1,2,3,4,5];\\nvar newNum = num;\\nnum[0] = 10;\\nconsole.log(newNum[0]);  // 10\\n\\n// 深复制\\nfunction copy (arr1,arr2) {\\n  for(var i=0;i<arr1.length;i++){\\n    arr2[i] = arr1[i];\\n  }\\n}\\nvar num = [1,5,6,7,9];\\nvar newNum = [];\\ncopy(num,newNum);\\nnum[0] = 10;\\nconsole.log(newNum[0]);    // 仍然为 1\\n```\\n\\n#### 存取函数\\n\\nJavaScript 提供了一组用来访问数组元素的函数，叫存取函数。最常用的存取函数就是 indexOf() 函数，该函数返回指定查找的值在目标值中是否存在，如果存在，返回该值在数组中的索引，不存在则返回 -1。\\n\\n```\\nvar word = [\\"A\\",\\"B\\",\\"C\\",\\"D\\"];\\nvar result = word.indexOf(\\"A\\");\\nconsole.log(result);    // 0\\nvar test = word.indexOf(\\"F\\");\\nconsole.log(test);   // -1\\n```\\n\\n除此之外，还有 join 和 toString 函数，concat 和 splice 函数。前两个函数可以将数组转化为字符串，后面两个函数可以通过已有的数组创建新数组，其中 concat 方法通过合并多个数组来形成新数组，而 splice 方法是截取一个数组的子集作为一个新数组。它们的使用示例如下\\n\\n```\\nvar arr = [\\"Mike\\",\\"John\\",\\"Hexo\\"];\\nconsole.log(arr.join());   // Mike,John,Hexo\\nconsole.log(arr.toString());   // Mike,John,Hexo\\n\\nvar arr1 = [1,10,\\"Mike\\"];\\nvar arr2 = [8,7,6];\\nvar cat = arr1.concat(arr2);\\nconsole.log(cat);    // [1, 10, \\"Mike\\", 8, 7, 6]\\nvar num = [1,2,3,4,5,6,7];\\nvar a = num.splice(3,2);     // 3 表示索引，2 表示删除 2 个\\nconsole.log(num);      // [1, 2, 3, 6, 7]\\n```\\n\\n#### 可变函数\\n\\n不去引用数组中的某个元素，就能改变数组内容，这种函数称它为可变函数。\\n\\n###### push() 和 unshift()、pop() 和 shift()\\n\\npush() 方法可以在数组末尾添加元素，而 unshift() 方法可以在数组开头添加元素；相对应的，pop 可以删除数组末尾的元素，而 shift 删除数组的第一个元素。\\n\\n```\\nvar nums = [9,58,15,16,23];\\nnums.push(111);\\nconsole.log(nums);   // 9, 58, 15, 16, 23, 111\\nnums.unshift(1);\\nconsole.log(nums);   // 1, 9, 58, 15, 16, 23, 111\\nnums.pop();\\nconsole.log(nums);   // 1, 9, 58, 15, 16, 23\\nnums.shift();\\nconsole.log(nums);   // 9, 58, 15, 16, 23\\n```\\n\\n###### splice()、sort()、reverse()\\n\\n前面提到的 splice 不仅可以用来删除元素，还可以添加元素进数组。用 sort 可以为数组排序，reverse 将数组内的元素翻转。\\n\\n```\\nvar num = [98,99,100,101];\\nnum.splice(1,0,89);     // 1 表示索引，0 表示不删除元素，89 表示将 89 这个元素添加进数组\\nconsole.log(num);    // 98, 89, 99, 100, 101\\nnum.reverse();\\nconsole.log(num);    //  101, 100, 99, 89, 98\\n```\\n\\n关于 sort 方法非常有意思，它只能对那些字符串类型的元素排列得比较准确，但如果是数字，结果就不那么令人满意了。看看例子.\\n\\n```\\nvar str = [\\"hello\\",\\"client\\",\\"zero\\"];\\nstr.sort();\\nconsole.log(str);     // [\\"client\\", \\"hello\\", \\"zero\\"]  按照字母 a-z 排列准确\\nvar nums = [1,200,51,66,88];\\nnums.sort();\\nconsole.log(nums);   // [1, 200, 51, 66, 88]  有趣的事情来了，因为 200 的 2 比 51 的 5 先，所以 200 排在 51 前头\\n```\\n\\n那如何解决这种排序的错误呢？方法就是在调用 sort() 的时候传入一个函数，该函数可以比较出大小。\\n\\n```\\nfunction compare(num1,num2){\\n  return num1 - num2;\\n}\\nvar nums = [3,1,2,100,4,200];\\nnums.sort(compare);\\nconsole.log(nums);    // 1, 2, 3, 4, 100, 200\\n```\\n\\n可以看到，已经排序正确了，compare 函数就是利用了两数相减，如果结果为正，那么被减数大于减数，如果结果为 0，则两数相等，而如果结果为负，说明被减数小于减数。\\n\\n#### 迭代器方法\\n\\n迭代函数通过对数组中的元素逐个应用，来操作返回相应的值。\\n\\n###### 不返回新数组的 forEach() 、every()、some()、reduce()\\n\\n```\\n// 用 forEach 开方\\nfunction square(num) {\\n    console.log(num,num*num);\\n}\\nvar num = [1,2,3,4,5];\\nnum.forEach(square);\\nconsole.log(num);\\n/*  1 1\\n    2 4\\n    3 9\\n    4 16\\n    5 25\\n*/\\n```\\n\\n```\\n/*\\nevery() 返回值为布尔类型，对于应用的所有元素，该函数返回 true，则该方法返回 true\\n*/\\nfunction isEven(num){\\n  return num % 2 == 0;\\n}\\nvar num = [2,4,6,8,10];\\nvar even = num.every(isEven);\\nif(even){\\n  console.log(\\"所有的数字都是偶数\\");\\n}else{\\n  console.log(\\"不是所有的数字都是偶数\\");\\n}\\n```\\n\\n```\\n/*\\nsome() 与 every() 的不同就是只要有一个元素使改函数返回 true ，那么该方法就返回 true\\n*/\\nfunction isEven(num){\\n  return num % 2 == 0;\\n}\\nvar num = [1,2,3,4,5,6,7,8];\\nvar someEven = num.some(isEven);\\nif(someEven){\\n  console.log(\\"有些数字是偶数\\");\\n}else{\\n  console.log(\\"没有数字是偶数\\");\\n}\\n```\\n\\n```\\n/*\\nreduce() 有两个功能，一是可以对数组元素进行求和，二是将数组元素连接成字符串。\\n*/\\nfucntion add(num1,num2){\\n  return num1 + num2;\\n}\\nvar num = [1,2,3,4];\\nvar sum = num.reduce(add);\\nconsole.log(sum);    // 10\\n\\nfunction concat(str,i) {\\n  return str + i;\\n}\\nvar words = [\\"I am \\",\\"a \\",\\"coder \\"];\\nvar re = words.reduce(concat);\\nconsole.log(re);     // I am a coder\\n```\\n\\n###### 返回新数组的 map() 和 filter()\\n\\nmap 的作用与 forEach 是一样的，区别就是 map 函数返回的是一个新数组。\\n\\n```\\nfunction addFive(grade){\\n  return grade += 5;\\n}\\nvar grade = [77,82,88,95,90];\\nvar result = grade.map(addFive);\\nconsole.log(result);     // 82, 87, 93, 100, 95\\n```\\n\\n而 filter 和 every 相似，区别在于当所有的元素使改函数为 true 时，它并不返回布尔类型，而是返回一个新数组。下面这个例子十分有趣，它随机产生 10 个 0 到 100 的数字作为分数，然后把大于 60 的及格分数筛选出来。\\n\\n```\\nfunction passing(num){\\n  return num >= 60;\\n}\\nvar grades = [];\\nfor(var i = 0;i < 11;i++){\\n  grade[i] = Math.floor(Math.random() * 101);\\n}\\nvar pass = grades.filter(passing);\\nconsole.log(\\"随机产生的 10 个同学的分数为：\\");\\nconsole.log(grades)；\\nconsole.log(\\"及格的分数有：\\");\\nconsole.log(pass)；\\n```\\n\\n上述代码的输出结果为\\n\\n> 随机产生的 10 个同学的分数为：\\n> 21, 4, 89, 45, 5, 51, 71, 7, 46, 53, 47\\n> 及格的分数有：\\n> 89, 71\\n\\n#### 二维数组\\n\\nJavaScript 可以通过在数组里在嵌套一个数组来形成二维数组。\\n\\n```\\nvar grades = [\\n  [88,86,82],\\n  [91,82,83],\\n  [77,72,79],\\n  [86,80,82]\\n];\\nconsole.log(grades[1][2]);    // 83\\n```\\n\\n#### 处理二维数组\\n\\n对于二维数组的处理可以分为两种，一种按列访问，一种是按行访问。\\n按列访问，外层循环对应行，内层循环对应列。例如，上述的数组，每一行对应一个学生三门科目的成绩记录，可以通过相加所有成绩，然后除以科目数来得到该生的平均成绩。\\n\\n```\\nvar grades = [\\n  [88,86,82],\\n  [91,82,83],\\n  [77,72,79],\\n  [86,80,82]\\n];\\nvar total = 0;\\nvar average = 0.0;\\nfor(var row = 0;row<grades.length;++row){\\n  for(var col = 0;col<grades[row].length;++col){\\n    total += grades[row][col];\\n  }\\n  average = total/grades[row].length;\\n  console.log(\\"student \\"+parseInt(row+1)+\\" average: \\"+average.toFixed(2));   // toFixed 表示按照 2 位来保留小数\\n  total = 0;\\n  average = 0.0;\\n}\\n```\\n\\n上述代码的输出结果为\\n\\n> student 1 average: 85.33\\n> student 2 average: 85.33\\n> student 3 average: 76.00\\n> student 4 average: 82.67\\n\\n对于按行访问，则外层循环对应列，内层循环对应行，例如还是上述数组，现在的数组表示一个学生三场考试四门科目的各科分数，我们来求每场考试的平均成绩\\n\\n```\\nvar grades = [\\n  [88,86,82],\\n  [91,82,83],\\n  [77,72,79],\\n  [86,80,82]\\n];\\nvar total = 0;\\nvar average = 0.0;\\n//这里假设每场考试的科目都一样，所以可以通过grades[0].length来获取考试数量\\nfor(var col = 0;col <grades[0].length;++col ){\\n  for(var row= 0;row<grades.length;++row){\\n    total += grades[row][col];\\n  }\\n  average = total/grades.length;\\n  console.log(\\"exam \\"+parseInt(col +1)+\\" average: \\"+average.toFixed(2));\\n  total = 0;\\n  average = 0.0;\\n}\\n```\\n\\n输出结果为：\\n\\n> exam 1 average: 85.50\\n> exam 2 average: 80.00\\n> exam 3 average: 81.50\\n\\n其实只要调整 for 循环的顺序就可以控制是按行还是按列来输出，此外，JavaScript 还可以处理一些参差不齐的数组，比如一个二维数组中的数组，有的是两个元素，有的是四个元素，并不是都相同，在这种情况下，JavaScript 依然可以处理运行而不报错，这是因为不管多或少，都可以通过 length 属性来计算。\\n\\n#### 对象数组\\n\\n如果你有阅读到这里，你应该可以发现上面的所有例子里数据类型都是基本数据类型，不是数字就是字符串。对象数组，顾名思义，就是数组里面的元素可以是对象，这个与 java 的语法很相似，基本上所有的编程语言都是相通的。看看下面这个例子：\\n\\n```\\nfunction point(x,y){\\n  this.x = x;\\n  this.y = y;\\n}\\nfunction show(arr){\\n  for(var i=0;i<arr.length;i++){\\n    console.log(arr[i].x + \\", \\"+arr[i].y);\\n  }\\n}\\nvar p1 = new Point(1,2);\\nvar p2 = new Point(2,4);\\nvar p3 = new Point(8,1);\\nvar p4 = new Point(2,9);\\nvar point = [p1,p2,p3,p4];\\nfor(var i=0;i<point.lengh;i++){\\n  console.log(\\"Point \\"+parseInt(i+1)+\\": \\"+point[i].x+\\", \\"+point[i].y);\\n}\\n```\\n\\n上述程序的输出结果为：\\n\\n> Point 1: 1, 2\\n> Point 2: 2, 4\\n> Point 3: 8, 1\\n> Point 4: 2, 9\\n\\n也可以用之前的 push() 等操作方法来操作对象数组\\n\\n```\\nvar p5 = new Point(11,13);\\npoint.push(p5);\\nconsole.log(\\"添加了 p5 后：\\");\\nshow(point);\\npoint.shift();\\nconsole.log(\\"删除第一个元素后：\\")\\nshow(point);\\n```\\n\\n输出结果为：\\n\\n> 添加了 p5 后：\\n> 1,2\\n> 2,4\\n> 8,1\\n> 2,9\\n> 11,13\\n> 删除第一个元素后：\\n> 2,4\\n> 8,1\\n> 2,9\\n> 11,13\\n","html":"<h2 id=\\"数组\\" tabindex=\\"-1\\">数组 <a class=\\"header-anchor\\" href=\\"#数组\\" aria-label=\\"Permalink to &quot;数组&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>{{ $frontmatter.description }}</p>\\n<h4 id=\\"数组的创建与读写\\" tabindex=\\"-1\\">数组的创建与读写 <a class=\\"header-anchor\\" href=\\"#数组的创建与读写\\" aria-label=\\"Permalink to &quot;数组的创建与读写&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>以下两种方式都可创建数组：</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 字面量方式,常用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">print(num.length);   // 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 构造函数方式</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = new Array(1,5,6,10);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">print(num.length);    // 4</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">// 字面量方式,常用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">print(num.length);   // 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">// 构造函数方式</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = new Array(1,5,6,10);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">print(num.length);    // 4</span></span></code></pre>\\n</div><p>值得注意的是，JavaScript 中的数组数据可以是不同类型，它的语法相对宽松，例如可以指定不同类型数据<code>var example = [1,&quot;Mike&quot;,true,null];</code>另外，可以通过<code>Array.isArray()</code>来判断一个对象是否是数组，例如：</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">print(Array.isArray(num));        // true</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">print(Array.isArray(num));        // true</span></span></code></pre>\\n</div><p>如何读写数组呢？可以使用循环。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for (var i = 0; i &lt; num.length; i++) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(num[i]+&quot; &quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,5,6,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for (var i = 0; i &lt; num.length; i++) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(num[i]+&quot; &quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><h4 id=\\"数组的深复制与浅复制\\" tabindex=\\"-1\\">数组的深复制与浅复制 <a class=\\"header-anchor\\" href=\\"#数组的深复制与浅复制\\" aria-label=\\"Permalink to &quot;数组的深复制与浅复制&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>当我们把数组赋给另外一个数组，然后改变其中一个数组的值，另一数组也会随之改变，这就是数组的浅复制。而深复制指的就是不改变原来的数组而去创建一个新的数组，这种情况是经常使用的，为了不破坏原数组。下面的代码展示了这两种复制</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 浅复制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4,5];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var newNum = num;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num[0] = 10;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(newNum[0]);  // 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 深复制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function copy (arr1,arr2) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  for(var i=0;i&lt;arr1.length;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    arr2[i] = arr1[i];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,5,6,7,9];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var newNum = [];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">copy(num,newNum);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num[0] = 10;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(newNum[0]);    // 仍然为 1</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">// 浅复制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4,5];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var newNum = num;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num[0] = 10;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(newNum[0]);  // 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">// 深复制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function copy (arr1,arr2) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  for(var i=0;i&lt;arr1.length;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    arr2[i] = arr1[i];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,5,6,7,9];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var newNum = [];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">copy(num,newNum);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num[0] = 10;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(newNum[0]);    // 仍然为 1</span></span></code></pre>\\n</div><h4 id=\\"存取函数\\" tabindex=\\"-1\\">存取函数 <a class=\\"header-anchor\\" href=\\"#存取函数\\" aria-label=\\"Permalink to &quot;存取函数&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>JavaScript 提供了一组用来访问数组元素的函数，叫存取函数。最常用的存取函数就是 indexOf() 函数，该函数返回指定查找的值在目标值中是否存在，如果存在，返回该值在数组中的索引，不存在则返回 -1。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var word = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var result = word.indexOf(&quot;A&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(result);    // 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var test = word.indexOf(&quot;F&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(test);   // -1</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var word = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var result = word.indexOf(&quot;A&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(result);    // 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var test = word.indexOf(&quot;F&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(test);   // -1</span></span></code></pre>\\n</div><p>除此之外，还有 join 和 toString 函数，concat 和 splice 函数。前两个函数可以将数组转化为字符串，后面两个函数可以通过已有的数组创建新数组，其中 concat 方法通过合并多个数组来形成新数组，而 splice 方法是截取一个数组的子集作为一个新数组。它们的使用示例如下</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var arr = [&quot;Mike&quot;,&quot;John&quot;,&quot;Hexo&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(arr.join());   // Mike,John,Hexo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(arr.toString());   // Mike,John,Hexo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var arr1 = [1,10,&quot;Mike&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var arr2 = [8,7,6];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var cat = arr1.concat(arr2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(cat);    // [1, 10, &quot;Mike&quot;, 8, 7, 6]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4,5,6,7];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var a = num.splice(3,2);     // 3 表示索引，2 表示删除 2 个</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(num);      // [1, 2, 3, 6, 7]</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var arr = [&quot;Mike&quot;,&quot;John&quot;,&quot;Hexo&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(arr.join());   // Mike,John,Hexo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(arr.toString());   // Mike,John,Hexo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var arr1 = [1,10,&quot;Mike&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var arr2 = [8,7,6];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var cat = arr1.concat(arr2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(cat);    // [1, 10, &quot;Mike&quot;, 8, 7, 6]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4,5,6,7];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var a = num.splice(3,2);     // 3 表示索引，2 表示删除 2 个</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(num);      // [1, 2, 3, 6, 7]</span></span></code></pre>\\n</div><h4 id=\\"可变函数\\" tabindex=\\"-1\\">可变函数 <a class=\\"header-anchor\\" href=\\"#可变函数\\" aria-label=\\"Permalink to &quot;可变函数&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>不去引用数组中的某个元素，就能改变数组内容，这种函数称它为可变函数。</p>\\n<h6 id=\\"push-和-unshift-、pop-和-shift\\" tabindex=\\"-1\\">push() 和 unshift()、pop() 和 shift() <a class=\\"header-anchor\\" href=\\"#push-和-unshift-、pop-和-shift\\" aria-label=\\"Permalink to &quot;push() 和 unshift()、pop() 和 shift()&quot;\\">&ZeroWidthSpace;</a></h6>\\n<p>push() 方法可以在数组末尾添加元素，而 unshift() 方法可以在数组开头添加元素；相对应的，pop 可以删除数组末尾的元素，而 shift 删除数组的第一个元素。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var nums = [9,58,15,16,23];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.push(111);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // 9, 58, 15, 16, 23, 111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.unshift(1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // 1, 9, 58, 15, 16, 23, 111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.pop();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // 1, 9, 58, 15, 16, 23</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.shift();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // 9, 58, 15, 16, 23</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var nums = [9,58,15,16,23];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.push(111);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // 9, 58, 15, 16, 23, 111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.unshift(1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // 1, 9, 58, 15, 16, 23, 111</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.pop();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // 1, 9, 58, 15, 16, 23</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.shift();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // 9, 58, 15, 16, 23</span></span></code></pre>\\n</div><h6 id=\\"splice-、sort-、reverse\\" tabindex=\\"-1\\">splice()、sort()、reverse() <a class=\\"header-anchor\\" href=\\"#splice-、sort-、reverse\\" aria-label=\\"Permalink to &quot;splice()、sort()、reverse()&quot;\\">&ZeroWidthSpace;</a></h6>\\n<p>前面提到的 splice 不仅可以用来删除元素，还可以添加元素进数组。用 sort 可以为数组排序，reverse 将数组内的元素翻转。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [98,99,100,101];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num.splice(1,0,89);     // 1 表示索引，0 表示不删除元素，89 表示将 89 这个元素添加进数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(num);    // 98, 89, 99, 100, 101</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num.reverse();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(num);    //  101, 100, 99, 89, 98</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [98,99,100,101];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num.splice(1,0,89);     // 1 表示索引，0 表示不删除元素，89 表示将 89 这个元素添加进数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(num);    // 98, 89, 99, 100, 101</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num.reverse();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(num);    //  101, 100, 99, 89, 98</span></span></code></pre>\\n</div><p>关于 sort 方法非常有意思，它只能对那些字符串类型的元素排列得比较准确，但如果是数字，结果就不那么令人满意了。看看例子.</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var str = [&quot;hello&quot;,&quot;client&quot;,&quot;zero&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">str.sort();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(str);     // [&quot;client&quot;, &quot;hello&quot;, &quot;zero&quot;]  按照字母 a-z 排列准确</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var nums = [1,200,51,66,88];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.sort();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);   // [1, 200, 51, 66, 88]  有趣的事情来了，因为 200 的 2 比 51 的 5 先，所以 200 排在 51 前头</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var str = [&quot;hello&quot;,&quot;client&quot;,&quot;zero&quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">str.sort();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(str);     // [&quot;client&quot;, &quot;hello&quot;, &quot;zero&quot;]  按照字母 a-z 排列准确</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var nums = [1,200,51,66,88];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.sort();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);   // [1, 200, 51, 66, 88]  有趣的事情来了，因为 200 的 2 比 51 的 5 先，所以 200 排在 51 前头</span></span></code></pre>\\n</div><p>那如何解决这种排序的错误呢？方法就是在调用 sort() 的时候传入一个函数，该函数可以比较出大小。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function compare(num1,num2){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num1 - num2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var nums = [3,1,2,100,4,200];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">nums.sort(compare);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(nums);    // 1, 2, 3, 4, 100, 200</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">function compare(num1,num2){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num1 - num2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var nums = [3,1,2,100,4,200];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">nums.sort(compare);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(nums);    // 1, 2, 3, 4, 100, 200</span></span></code></pre>\\n</div><p>可以看到，已经排序正确了，compare 函数就是利用了两数相减，如果结果为正，那么被减数大于减数，如果结果为 0，则两数相等，而如果结果为负，说明被减数小于减数。</p>\\n<h4 id=\\"迭代器方法\\" tabindex=\\"-1\\">迭代器方法 <a class=\\"header-anchor\\" href=\\"#迭代器方法\\" aria-label=\\"Permalink to &quot;迭代器方法&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>迭代函数通过对数组中的元素逐个应用，来操作返回相应的值。</p>\\n<h6 id=\\"不返回新数组的-foreach-、every-、some-、reduce\\" tabindex=\\"-1\\">不返回新数组的 forEach() 、every()、some()、reduce() <a class=\\"header-anchor\\" href=\\"#不返回新数组的-foreach-、every-、some-、reduce\\" aria-label=\\"Permalink to &quot;不返回新数组的 forEach() 、every()、some()、reduce()&quot;\\">&ZeroWidthSpace;</a></h6>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 用 forEach 开方</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function square(num) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    console.log(num,num*num);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4,5];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">num.forEach(square);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(num);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">/*  1 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    2 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    3 9</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    4 16</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    5 25</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">*/</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">// 用 forEach 开方</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function square(num) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    console.log(num,num*num);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4,5];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">num.forEach(square);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(num);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">/*  1 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    2 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    3 9</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    4 16</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    5 25</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">*/</span></span></code></pre>\\n</div><div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">every() 返回值为布尔类型，对于应用的所有元素，该函数返回 true，则该方法返回 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function isEven(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num % 2 == 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [2,4,6,8,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var even = num.every(isEven);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">if(even){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;所有的数字都是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}else{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;不是所有的数字都是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">every() 返回值为布尔类型，对于应用的所有元素，该函数返回 true，则该方法返回 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function isEven(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num % 2 == 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [2,4,6,8,10];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var even = num.every(isEven);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">if(even){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;所有的数字都是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}else{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;不是所有的数字都是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">some() 与 every() 的不同就是只要有一个元素使改函数返回 true ，那么该方法就返回 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function isEven(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num % 2 == 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4,5,6,7,8];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var someEven = num.some(isEven);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">if(someEven){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;有些数字是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}else{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;没有数字是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">some() 与 every() 的不同就是只要有一个元素使改函数返回 true ，那么该方法就返回 true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function isEven(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num % 2 == 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4,5,6,7,8];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var someEven = num.some(isEven);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">if(someEven){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;有些数字是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}else{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;没有数字是偶数&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">reduce() 有两个功能，一是可以对数组元素进行求和，二是将数组元素连接成字符串。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">fucntion add(num1,num2){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num1 + num2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var num = [1,2,3,4];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var sum = num.reduce(add);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(sum);    // 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function concat(str,i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return str + i;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var words = [&quot;I am &quot;,&quot;a &quot;,&quot;coder &quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var re = words.reduce(concat);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(re);     // I am a coder</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">reduce() 有两个功能，一是可以对数组元素进行求和，二是将数组元素连接成字符串。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">fucntion add(num1,num2){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num1 + num2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var num = [1,2,3,4];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var sum = num.reduce(add);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(sum);    // 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function concat(str,i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return str + i;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var words = [&quot;I am &quot;,&quot;a &quot;,&quot;coder &quot;];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var re = words.reduce(concat);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(re);     // I am a coder</span></span></code></pre>\\n</div><h6 id=\\"返回新数组的-map-和-filter\\" tabindex=\\"-1\\">返回新数组的 map() 和 filter() <a class=\\"header-anchor\\" href=\\"#返回新数组的-map-和-filter\\" aria-label=\\"Permalink to &quot;返回新数组的 map() 和 filter()&quot;\\">&ZeroWidthSpace;</a></h6>\\n<p>map 的作用与 forEach 是一样的，区别就是 map 函数返回的是一个新数组。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function addFive(grade){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return grade += 5;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grade = [77,82,88,95,90];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var result = grade.map(addFive);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(result);     // 82, 87, 93, 100, 95</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">function addFive(grade){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return grade += 5;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var grade = [77,82,88,95,90];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var result = grade.map(addFive);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(result);     // 82, 87, 93, 100, 95</span></span></code></pre>\\n</div><p>而 filter 和 every 相似，区别在于当所有的元素使改函数为 true 时，它并不返回布尔类型，而是返回一个新数组。下面这个例子十分有趣，它随机产生 10 个 0 到 100 的数字作为分数，然后把大于 60 的及格分数筛选出来。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function passing(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  return num &gt;= 60;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grades = [];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for(var i = 0;i &lt; 11;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  grade[i] = Math.floor(Math.random() * 101);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var pass = grades.filter(passing);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(&quot;随机产生的 10 个同学的分数为：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(grades)；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(&quot;及格的分数有：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(pass)；</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">function passing(num){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  return num &gt;= 60;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var grades = [];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for(var i = 0;i &lt; 11;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  grade[i] = Math.floor(Math.random() * 101);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var pass = grades.filter(passing);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(&quot;随机产生的 10 个同学的分数为：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(grades)；</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(&quot;及格的分数有：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(pass)；</span></span></code></pre>\\n</div><p>上述代码的输出结果为</p>\\n<blockquote>\\n<p>随机产生的 10 个同学的分数为：\\n21, 4, 89, 45, 5, 51, 71, 7, 46, 53, 47\\n及格的分数有：\\n89, 71</p>\\n</blockquote>\\n<h4 id=\\"二维数组\\" tabindex=\\"-1\\">二维数组 <a class=\\"header-anchor\\" href=\\"#二维数组\\" aria-label=\\"Permalink to &quot;二维数组&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>JavaScript 可以通过在数组里在嵌套一个数组来形成二维数组。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(grades[1][2]);    // 83</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(grades[1][2]);    // 83</span></span></code></pre>\\n</div><h4 id=\\"处理二维数组\\" tabindex=\\"-1\\">处理二维数组 <a class=\\"header-anchor\\" href=\\"#处理二维数组\\" aria-label=\\"Permalink to &quot;处理二维数组&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>对于二维数组的处理可以分为两种，一种按列访问，一种是按行访问。\\n按列访问，外层循环对应行，内层循环对应列。例如，上述的数组，每一行对应一个学生三门科目的成绩记录，可以通过相加所有成绩，然后除以科目数来得到该生的平均成绩。</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for(var row = 0;row&lt;grades.length;++row){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  for(var col = 0;col&lt;grades[row].length;++col){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    total += grades[row][col];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  average = total/grades[row].length;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;student &quot;+parseInt(row+1)+&quot; average: &quot;+average.toFixed(2));   // toFixed 表示按照 2 位来保留小数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for(var row = 0;row&lt;grades.length;++row){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  for(var col = 0;col&lt;grades[row].length;++col){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    total += grades[row][col];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  average = total/grades[row].length;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;student &quot;+parseInt(row+1)+&quot; average: &quot;+average.toFixed(2));   // toFixed 表示按照 2 位来保留小数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><p>上述代码的输出结果为</p>\\n<blockquote>\\n<p>student 1 average: 85.33\\nstudent 2 average: 85.33\\nstudent 3 average: 76.00\\nstudent 4 average: 82.67</p>\\n</blockquote>\\n<p>对于按行访问，则外层循环对应列，内层循环对应行，例如还是上述数组，现在的数组表示一个学生三场考试四门科目的各科分数，我们来求每场考试的平均成绩</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">//这里假设每场考试的科目都一样，所以可以通过grades[0].length来获取考试数量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for(var col = 0;col &lt;grades[0].length;++col ){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  for(var row= 0;row&lt;grades.length;++row){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    total += grades[row][col];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  average = total/grades.length;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;exam &quot;+parseInt(col +1)+&quot; average: &quot;+average.toFixed(2));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var grades = [</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [88,86,82],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [91,82,83],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [77,72,79],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  [86,80,82]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">//这里假设每场考试的科目都一样，所以可以通过grades[0].length来获取考试数量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for(var col = 0;col &lt;grades[0].length;++col ){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  for(var row= 0;row&lt;grades.length;++row){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    total += grades[row][col];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  average = total/grades.length;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;exam &quot;+parseInt(col +1)+&quot; average: &quot;+average.toFixed(2));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  total = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  average = 0.0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><p>输出结果为：</p>\\n<blockquote>\\n<p>exam 1 average: 85.50\\nexam 2 average: 80.00\\nexam 3 average: 81.50</p>\\n</blockquote>\\n<p>其实只要调整 for 循环的顺序就可以控制是按行还是按列来输出，此外，JavaScript 还可以处理一些参差不齐的数组，比如一个二维数组中的数组，有的是两个元素，有的是四个元素，并不是都相同，在这种情况下，JavaScript 依然可以处理运行而不报错，这是因为不管多或少，都可以通过 length 属性来计算。</p>\\n<h4 id=\\"对象数组\\" tabindex=\\"-1\\">对象数组 <a class=\\"header-anchor\\" href=\\"#对象数组\\" aria-label=\\"Permalink to &quot;对象数组&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>如果你有阅读到这里，你应该可以发现上面的所有例子里数据类型都是基本数据类型，不是数字就是字符串。对象数组，顾名思义，就是数组里面的元素可以是对象，这个与 java 的语法很相似，基本上所有的编程语言都是相通的。看看下面这个例子：</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function point(x,y){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  this.x = x;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  this.y = y;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function show(arr){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  for(var i=0;i&lt;arr.length;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    console.log(arr[i].x + &quot;, &quot;+arr[i].y);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p1 = new Point(1,2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p2 = new Point(2,4);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p3 = new Point(8,1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p4 = new Point(2,9);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var point = [p1,p2,p3,p4];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">for(var i=0;i&lt;point.lengh;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  console.log(&quot;Point &quot;+parseInt(i+1)+&quot;: &quot;+point[i].x+&quot;, &quot;+point[i].y);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">function point(x,y){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  this.x = x;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  this.y = y;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function show(arr){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  for(var i=0;i&lt;arr.length;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    console.log(arr[i].x + &quot;, &quot;+arr[i].y);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var p1 = new Point(1,2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var p2 = new Point(2,4);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var p3 = new Point(8,1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var p4 = new Point(2,9);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var point = [p1,p2,p3,p4];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">for(var i=0;i&lt;point.lengh;i++){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  console.log(&quot;Point &quot;+parseInt(i+1)+&quot;: &quot;+point[i].x+&quot;, &quot;+point[i].y);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n</div><p>上述程序的输出结果为：</p>\\n<blockquote>\\n<p>Point 1: 1, 2\\nPoint 2: 2, 4\\nPoint 3: 8, 1\\nPoint 4: 2, 9</p>\\n</blockquote>\\n<p>也可以用之前的 push() 等操作方法来操作对象数组</p>\\n<div class=\\"language- vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var p5 = new Point(11,13);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">point.push(p5);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(&quot;添加了 p5 后：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">show(point);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">point.shift();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(&quot;删除第一个元素后：&quot;)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">show(point);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var p5 = new Point(11,13);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">point.push(p5);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(&quot;添加了 p5 后：&quot;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">show(point);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">point.shift();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(&quot;删除第一个元素后：&quot;)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">show(point);</span></span></code></pre>\\n</div><p>输出结果为：</p>\\n<blockquote>\\n<p>添加了 p5 后：\\n1,2\\n2,4\\n8,1\\n2,9\\n11,13\\n删除第一个元素后：\\n2,4\\n8,1\\n2,9\\n11,13</p>\\n</blockquote>\\n","frontmatter":{"title":"数组","author":"power","description":"与 Java 、PHP 等语言不同，在 JavaScript 中，数组其实是一种特殊的对象","date":"2023-09-21T09:52:51.000Z","link":"./algorithm/Array","tags":["数据结构"]},"excerpt":"","url":"/algorithm/Array.html"},{"src":"---\\nlayout: home\\n\\nhero:\\n  name: 权王\\n  text: \'记录技术的点点滴滴\'\\n  tagline: 凡心所向，素履所往，生如逆旅，一苇以航\\n  actions:\\n    - theme: brand\\n      text: 最新文章\\n      link: ./latestArticles\\n    - theme: alt\\n      text: 简介\\n      link: /about\\n\\nfeatures:\\n  - title: 前端\\n    details: html、css、js、、\\n  - title: 后端\\n    details: java\\n  - title: 算法\\n    details: 介绍算法\\n---\\n","html":"","frontmatter":{"layout":"home","hero":{"name":"权王","text":"记录技术的点点滴滴","tagline":"凡心所向，素履所往，生如逆旅，一苇以航","actions":[{"theme":"brand","text":"最新文章","link":"./latestArticles"},{"theme":"alt","text":"简介","link":"/about"}]},"features":[{"title":"前端","details":"html、css、js、、"},{"title":"后端","details":"java"},{"title":"算法","details":"介绍算法"}]},"excerpt":"","url":"/"},{"src":"<script setup>\\n \\nimport { data as posts } from \'./posts.data.js\'\\nimport { useData } from \'vitepress\'\\nconst { frontmatter } = useData()\\n\\n<\/script>\\n<style lang=\\"sass\\">\\narticle\\n  border-bottom: 1px solid #eee\\n  padding-bottom: 20px \\n  margin-bottom: 20px\\n.title\\n    font-family: PT Serif,Serif\\n    font-size: 28px\\n    border-bottom: 0\\n    cursor: pointer\\n    transition: all .2s\\n    a\\n        color: #000\\n        font-weight: bold\\na:link\\n    text-decoration: none\\na:hover\\n    text-decoration: underline\\n    color: #d05dd2!important   \\n.description\\n    font-size: 14px\\n    /* color: #888 */\\n    font-weight: 200   \\n    word-wrap: break-word\\n    text-overflow: ellipsis\\n    // overflow: hidden\\n    // display: -webkit-box\\n.meta\\n    /* color: rgba(0,0,0,.54) */\\n    font-weight: 200\\n    display: flex\\n    align-items: center    \\n    font-size: 14px\\n.posts-time-svg\\n    margin-right: 5px\\n    width: 14px\\n    height: 14px       \\n</style>\\n\\n<article v-for=\\"(item, index) in posts\\" :key=\\"index\\">\\n\\n  <div v-if=\\"item.frontmatter?.title\\">\\n    <header class=\\"title\\">\\n      <a :href=\\"item.frontmatter.link\\" class=\\"nav-link\\">\\n        {{item.frontmatter?.title}}\\n      </a>\\n    </header>\\n    <p class=\\"description\\" >\\n        {{ item.frontmatter?.description }}\\n    </p>\\n    <div class=\\"meta\\">\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"posts-time-svg\\">\\n          <circle cx=\\"12\\" cy=\\"12\\" r=\\"10\\"></circle>\\n          <polyline points=\\"12 6 12 12 16 14\\"></polyline>\\n        </svg>\\n        <span>\\n        {{new Date(Date.parse(String(item.frontmatter?.date).replace(\'Z\', \'\')+\'+08:00\')).toLocaleString(\'chinese\',{ hour12: false })}}\\n        </span>\\n    </div>\\n    <div class=\\"meta\\">\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"posts-time-svg\\">\\n          <path d=\\"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\\"></path>\\n          <line x1=\\"7\\" y1=\\"7\\" x2=\\"7\\" y2=\\"7\\"></line>\\n        </svg>\\n        <span span href=\\"/tag/WebAV\\" class=\\"\\">\\n          {{item && item.frontmatter?.tags.join()}}\\n        </span>\\n    </div>\\n\\n  </div>\\n\\n</article>\\n","html":"<article v-for=\\"(item, index) in posts\\" :key=\\"index\\">\\n  <div v-if=\\"item.frontmatter?.title\\">\\n    <header class=\\"title\\">\\n      <a :href=\\"item.frontmatter.link\\" class=\\"nav-link\\">\\n        {{item.frontmatter?.title}}\\n      </a>\\n    </header>\\n    <p class=\\"description\\" >\\n        {{ item.frontmatter?.description }}\\n    </p>\\n    <div class=\\"meta\\">\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"posts-time-svg\\">\\n          <circle cx=\\"12\\" cy=\\"12\\" r=\\"10\\"></circle>\\n          <polyline points=\\"12 6 12 12 16 14\\"></polyline>\\n        </svg>\\n        <span>\\n        {{new Date(Date.parse(String(item.frontmatter?.date).replace(\'Z\', \'\')+\'+08:00\')).toLocaleString(\'chinese\',{ hour12: false })}}\\n        </span>\\n    </div>\\n    <div class=\\"meta\\">\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"posts-time-svg\\">\\n          <path d=\\"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\\"></path>\\n          <line x1=\\"7\\" y1=\\"7\\" x2=\\"7\\" y2=\\"7\\"></line>\\n        </svg>\\n        <span span href=\\"/tag/WebAV\\" class=\\"\\">\\n          {{item && item.frontmatter?.tags.join()}}\\n        </span>\\n    </div>\\n  </div>\\n</article>\\n","frontmatter":{},"excerpt":"","url":"/latestArticles.html"}]');const v={key:0},g={class:"title"},F=["href"],f={class:"description"},A={class:"meta"},x=s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"posts-time-svg"},[s("circle",{cx:"12",cy:"12",r:"10"}),s("polyline",{points:"12 6 12 12 16 14"})],-1),C={class:"meta"},D=s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"posts-time-svg"},[s("path",{d:"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}),s("line",{x1:"7",y1:"7",x2:"7",y2:"7"})],-1),w={span:"",href:"/tag/WebAV",class:""},L=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"latestArticles.md","filePath":"latestArticles.md","lastUpdated":1695344620000}'),k={name:"latestArticles.md"},S=Object.assign(k,{setup(N){return i(),(B,q)=>(a(),l("div",null,[(a(!0),l(E,null,u(d(m),(n,y)=>{var e,o,t,r,c;return a(),l("article",{key:y},[(e=n.frontmatter)!=null&&e.title?(a(),l("div",v,[s("header",g,[s("a",{href:n.frontmatter.link,class:"nav-link"},p((o=n.frontmatter)==null?void 0:o.title),9,F)]),s("p",f,p((t=n.frontmatter)==null?void 0:t.description),1),s("div",A,[x,s("span",null,p(new Date(Date.parse(String((r=n.frontmatter)==null?void 0:r.date).replace("Z","")+"+08:00")).toLocaleString("chinese",{hour12:!1})),1)]),s("div",C,[D,s("span",w,p(n&&((c=n.frontmatter)==null?void 0:c.tags.join())),1)])])):h("",!0)])}),128))]))}});export{L as __pageData,S as default};
